/* Generated By:JavaCC: Do not edit this line. CLIPSParser.java */

using System;
using System.Collections;
using System.IO;
using Creshendo.Functions;
using Creshendo.Util.Rete;
using Creshendo.Util.Rule;

namespace Creshendo.Util.Parser.Clips
{
    public class CLIPSParser_XXX : CLIPSParserConstants
    {
        private static int[] jj_la1_0_Renamed_Field;
        private static int[] jj_la1_1_Renamed_Field;
        private static int[] jj_la1_2_Renamed_Field;
        private static int[] jj_la1_3_Renamed_Field;
        protected internal Rete.Rete engine = null;
        private JJCalls[] jj_2_rtns;
        private int jj_endpos;
        private ArrayList jj_expentries;
        private int[] jj_expentry;
        private int jj_gc = 0;
        private int jj_gen;
        internal SimpleCharStream jj_input_stream;
        private int jj_kind = - 1;
        private int jj_la;
        private int[] jj_la1;
        private Token jj_lastpos;
        private int[] jj_lasttokens;
        private LookaheadSuccess jj_ls;
        public Token jj_nt;
        private int jj_ntk_Renamed_Field;
        private bool jj_rescan = false;
        private Token jj_scanpos;
        private bool jj_semLA;
        public bool lookingAhead = false;
        public Token token;
        public CLIPSParserTokenManager token_source;

        static CLIPSParser_XXX()
        {
            {
                jj_la1_0();
                jj_la1_1();
                jj_la1_2();
                jj_la1_3();
            }
        }

        public CLIPSParser_XXX(Rete.Rete eng, StreamReader stream) : this(stream)
        {
            //InitBlock();
            engine = eng;
        }

        public CLIPSParser_XXX(Rete.Rete eng, Stream stream) : this(new StreamReader(stream))
        {
            //InitBlock();
            engine = eng;
        }

        public CLIPSParser_XXX(Stream stream)
        {
            InitBlock();
            jj_input_stream = new SimpleCharStream(stream, 1, 1);
            token_source = new CLIPSParserTokenManager(jj_input_stream);
            token = new Token();
            jj_ntk_Renamed_Field = - 1;
            jj_gen = 0;
            for (int i = 0; i < 61; i++)
                jj_la1[i] = - 1;
            for (int i = 0; i < jj_2_rtns.Length; i++)
                jj_2_rtns[i] = new JJCalls();
        }

        public CLIPSParser_XXX(StreamReader stream)
        {
            InitBlock();
            jj_input_stream = new SimpleCharStream(stream, 1, 1);
            token_source = new CLIPSParserTokenManager(jj_input_stream);
            token = new Token();
            jj_ntk_Renamed_Field = - 1;
            jj_gen = 0;
            for (int i = 0; i < 61; i++)
                jj_la1[i] = - 1;
            for (int i = 0; i < jj_2_rtns.Length; i++)
                jj_2_rtns[i] = new JJCalls();
        }

        public CLIPSParser_XXX(CLIPSParserTokenManager tm)
        {
            InitBlock();
            token_source = tm;
            token = new Token();
            jj_ntk_Renamed_Field = - 1;
            jj_gen = 0;
            for (int i = 0; i < 61; i++)
                jj_la1[i] = - 1;
            for (int i = 0; i < jj_2_rtns.Length; i++)
                jj_2_rtns[i] = new JJCalls();
        }

        public virtual Token BindType
        {
            get
            {
                Token exp;
                switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                {
                    case CLIPSParserConstants_Fields.BIND3:
                        exp = jj_consume_token(CLIPSParserConstants_Fields.BIND3);
                        {
                            if (true)
                                return exp;
                        }
                        break;

                    case CLIPSParserConstants_Fields.BIND:
                        exp = jj_consume_token(CLIPSParserConstants_Fields.BIND);
                        {
                            if (true)
                                return exp;
                        }
                        break;

                    case CLIPSParserConstants_Fields.BIND4:
                        exp = jj_consume_token(CLIPSParserConstants_Fields.BIND4);
                        {
                            if (true)
                                return exp;
                        }
                        break;

                    default:
                        jj_la1[18] = jj_gen;
                        jj_consume_token(- 1);
                        throw new ParseException();
                }
                throw new ApplicationException("Missing return statement in function");
            }
        }

        /// <summary> this is for convienance
        /// </summary>
        public virtual String Identifier
        {
            get
            {
                Token exp;
                exp = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
                {
                    if (true)
                        return exp.image;
                }
                throw new ApplicationException("Missing return statement in function");
            }
        }

        public virtual int Type
        {
            get
            {
                Token exp = null;
                switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                {
                    case CLIPSParserConstants_Fields.INTEGER:
                        exp = jj_consume_token(CLIPSParserConstants_Fields.INTEGER);
                        exp = null;
                        {
                            if (true)
                                return Constants.INT_PRIM_TYPE;
                        }
                        break;

                    case CLIPSParserConstants_Fields.SHORT:
                        exp = jj_consume_token(CLIPSParserConstants_Fields.SHORT);
                        exp = null;
                        {
                            if (true)
                                return Constants.SHORT_PRIM_TYPE;
                        }
                        break;

                    case CLIPSParserConstants_Fields.LONG:
                        exp = jj_consume_token(CLIPSParserConstants_Fields.LONG);
                        exp = null;
                        {
                            if (true)
                                return Constants.LONG_PRIM_TYPE;
                        }
                        break;

                    case CLIPSParserConstants_Fields.FLOAT:
                        exp = jj_consume_token(CLIPSParserConstants_Fields.FLOAT);
                        exp = null;
                        {
                            if (true)
                                return Constants.FLOAT_PRIM_TYPE;
                        }
                        break;

                    case CLIPSParserConstants_Fields.DOUBLE:
                        exp = jj_consume_token(CLIPSParserConstants_Fields.DOUBLE);
                        exp = null;
                        {
                            if (true)
                                return Constants.DOUBLE_PRIM_TYPE;
                        }
                        break;

                    case CLIPSParserConstants_Fields.SYMBOL:
                        exp = jj_consume_token(CLIPSParserConstants_Fields.SYMBOL);
                        exp = null;
                        {
                            if (true)
                                return Constants.OBJECT_TYPE;
                        }
                        break;

                    case CLIPSParserConstants_Fields.STRING:
                        exp = jj_consume_token(CLIPSParserConstants_Fields.STRING);
                        exp = null;
                        {
                            if (true)
                                return Constants.STRING_TYPE;
                        }
                        break;

                    case CLIPSParserConstants_Fields.BOOLEAN:
                        exp = jj_consume_token(CLIPSParserConstants_Fields.BOOLEAN);
                        exp = null;
                        {
                            if (true)
                                return Constants.BOOLEAN_PRIM_TYPE;
                        }
                        break;

                    default:
                        jj_la1[31] = jj_gen;
                        jj_consume_token(- 1);
                        throw new ParseException();
                }
                throw new ApplicationException("Missing return statement in function");
            }
        }

        public virtual Token NextToken
        {
            get
            {
                if (token.next != null)
                    token = token.next;
                else
                    token = token.next = token_source.NextToken;
                jj_ntk_Renamed_Field = - 1;
                jj_gen++;
                return token;
            }
        }

        private void InitBlock()
        {
            jj_lasttokens = new int[100];
            jj_2_rtns = new JJCalls[40];
            jj_la1 = new int[61];
            jj_ls = new LookaheadSuccess();
            jj_expentries = new ArrayList();
        }

        public virtual void close()
        {
            engine = null;
            if (token != null)
            {
                token.clear();
                token = null;
            }
            if (jj_nt != null)
            {
                jj_nt.clear();
                jj_nt = null;
            }
            if (jj_scanpos != null)
            {
                jj_scanpos.clear();
                jj_scanpos = null;
            }
            if (jj_lastpos != null)
            {
                jj_lastpos.clear();
                jj_lastpos = null;
            }
            try
            {
                jj_input_stream.inputStream.Close();
            }
            catch (IOException e)
            {
                // later on log the error
            }
        }

        public Object basicExpr()
        {
            Object exp = null;
            Token obj = null;
            ShellFunction func = null;
            IParameter[] pms = null;
            ShellBoundParam sbp = null;
            switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
            {
                case CLIPSParserConstants_Fields.BIND:
                case CLIPSParserConstants_Fields.BIND3:
                case CLIPSParserConstants_Fields.BIND4:
                    obj = BindType;
                    func = new ShellFunction();
                    func.Name = "echo";
                    sbp = new ShellBoundParam();
                    sbp.DefglobalName = obj.image;
                    pms = new ShellBoundParam[] {sbp};
                    func.Parameters = pms;
                    {
                        if (true)
                            return func;
                    }
                    break;

                case CLIPSParserConstants_Fields.LBRACE:
                    jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
                    exp = expr();
                    jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
                    {
                        if (true)
                            return exp;
                    }
                    break;

                case 0:
                    jj_consume_token(0);
                    {
                        if (true)
                            return null;
                    }
                    break;

                default:
                    jj_la1[0] = jj_gen;
                    jj_consume_token(- 1);
                    throw new ParseException();
            }
            throw new ApplicationException("Missing return statement in function");
        }

        // main expression for loading a data file
        public IList loadExpr()
        {
            ArrayList facts = new ArrayList();
            while (true)
            {
                loadAllExpr(facts);
                switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                {
                    case CLIPSParserConstants_Fields.LBRACE:
                        ;
                        break;

                    default:
                        jj_la1[1] = jj_gen;
                        //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                        goto label_1_brk;
                }
            }
            //UPGRADE_NOTE: Label 'label_1_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
            label_1_brk:
            ;

            {
                if (true)
                    return facts;
            }
            throw new ApplicationException("Missing return statement in function");
        }

        // this method is used to load data
        public void loadAllExpr(IList list)
        {
            ValueParam[] param = null;
            param = assertBody();
            list.Add(param);
        }

        // typeExpr is only responsible for parsing string and bigdecimal types
        public Object typeExpr()
        {
            Token exp;
            switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
            {
                case CLIPSParserConstants_Fields.STRING_LITERAL:
                    exp = jj_consume_token(CLIPSParserConstants_Fields.STRING_LITERAL);
                    String strlit = exp.image;
                    strlit = ParserUtils.getStringLiteral(strlit);
                    {
                        if (true)
                            return strlit;
                    }
                    break;

                case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                    exp = jj_consume_token(CLIPSParserConstants_Fields.INTEGER_LITERAL);
                    // we use BigDecimal
                    {
                        if (true)
                            return Decimal.Parse(exp.image);
                    }
                    break;

                case CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL:
                    exp = jj_consume_token(CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL);
                    // we use float, double
                    {
                        if (true)
                            return Decimal.Parse(exp.image);
                    }
                    break;

                case CLIPSParserConstants_Fields.PATH_LITERAL:
                    exp = jj_consume_token(CLIPSParserConstants_Fields.PATH_LITERAL);
                    {
                        if (true)
                            return exp.image;
                    }
                    break;

                default:
                    jj_la1[2] = jj_gen;
                    jj_consume_token(- 1);
                    throw new ParseException();
            }
            throw new ApplicationException("Missing return statement in function");
        }

        public Object expr()
        {
            Token exp = null;
            Token exp2 = null;
            Token exp3 = null;
            String body;
            ValueParam param;
            Deffact fact;
            Deftemplate templ;
            Defrule rule;
            ShellFunction func;
            DeffunctionFunction dffunc;
            ArrayList list = new ArrayList();
            ValueParam[] pms;
            IList infunc = new ArrayList();
            switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
            {
                case CLIPSParserConstants_Fields.ASSERT:
                    exp = jj_consume_token(CLIPSParserConstants_Fields.ASSERT);
                    jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
                    exp2 = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
                    while (true)
                    {
                        assertContents(list);
                        switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                        {
                            case CLIPSParserConstants_Fields.LBRACE:
                                ;
                                break;

                            default:
                                jj_la1[3] = jj_gen;
                                //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                                goto label_2_brk;
                        }
                    }
                    //UPGRADE_NOTE: Label 'label_2_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                    label_2_brk:
                    ;

                    jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
                    func = new ShellFunction();
                    func.Name = exp.image;
                    pms = new ValueParam[2];
                    pms[0] = new ValueParam(Constants.STRING_TYPE, exp2.image);

                    object[] lst = new object[list.Count];
                    list.CopyTo(lst, 0);

                    pms[1] = new ValueParam(Constants.OBJECT_TYPE, lst);
                    func.setParameters(pms);
                    exp.clear();
                    exp = null;
                    {
                        if (true)
                            return func;
                    }
                    break;

                case CLIPSParserConstants_Fields.ASSERTTEMPORAL:
                    exp = jj_consume_token(CLIPSParserConstants_Fields.ASSERTTEMPORAL);
                    jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
                    exp2 = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
                    while (true)
                    {
                        assertContents(list);
                        switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                        {
                            case CLIPSParserConstants_Fields.LBRACE:
                                ;
                                break;

                            default:
                                jj_la1[4] = jj_gen;
                                //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                                goto label_3_brk;
                        }
                    }
                    //UPGRADE_NOTE: Label 'label_3_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                    label_3_brk:
                    ;

                    jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
                    func = new ShellFunction();
                    func.Name = exp.image;
                    pms = new ValueParam[2];
                    pms[0] = new ValueParam(Constants.STRING_TYPE, exp2.image);

                    object[] lst1 = new object[list.Count];
                    list.CopyTo(lst1,0);
                    pms[1] = new ValueParam(Constants.OBJECT_TYPE, lst1);
                    func.setParameters(pms);
                    exp.clear();
                    exp = null;
                    {
                        if (true)
                            return func;
                    }
                    break;

                case CLIPSParserConstants_Fields.RETRACT:
                    exp = jj_consume_token(CLIPSParserConstants_Fields.RETRACT);
                    switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                    {
                        case CLIPSParserConstants_Fields.BIND:
                            exp2 = jj_consume_token(CLIPSParserConstants_Fields.BIND);
                            break;

                        case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                            exp2 = jj_consume_token(CLIPSParserConstants_Fields.INTEGER_LITERAL);
                            break;

                        default:
                            jj_la1[5] = jj_gen;
                            jj_consume_token(- 1);
                            throw new ParseException();
                    }
                    func = new ShellFunction();
                    func.Name = exp.image;
                    IParameter[] rpms = new IParameter[1];
                    if (exp2.image.StartsWith("?"))
                    {
                        BoundParam bp = new BoundParam();
                        bp.VariableName = exp2.image;
                        rpms[0] = bp;
                    }
                    else
                    {
                        ValueParam vp = new ValueParam(Constants.BIG_DECIMAL, Decimal.Parse(exp2.image));
                        rpms[0] = vp;
                    }
                    func.Parameters = rpms;
                    exp.clear();
                    exp = null;
                    exp2.clear();
                    exp2 = null;
                    {
                        if (true)
                            return func;
                    }
                    break;

                case CLIPSParserConstants_Fields.MODIFY:
                    exp = jj_consume_token(CLIPSParserConstants_Fields.MODIFY);
                    exp2 = jj_consume_token(CLIPSParserConstants_Fields.BIND);
                    assertContents(list);
                    func = new ShellFunction();
                    func.Name = exp.image;
                    BoundParam bp1 = new BoundParam();
                    bp1.VariableName = exp2.image;
                    list.Insert(0, bp1);
                    func.setParameters(ParameterUtils.slotToParameters(list));
                    exp.clear();
                    exp = null;
                    {
                        if (true)
                            return func;
                    }
                    break;

                case CLIPSParserConstants_Fields.DEFTEMPLATE:
                    exp = jj_consume_token(CLIPSParserConstants_Fields.DEFTEMPLATE);
                    templ = templateExpr();
                    func = new ShellFunction();
                    func.Name = exp.image;
                    pms = new ValueParam[1];
                    pms[0] = new ValueParam(Constants.OBJECT_TYPE, templ);
                    func.setParameters(pms);
                    {
                        if (true)
                            return func;
                    }
                    break;

                case CLIPSParserConstants_Fields.DEFMODULE:
                    exp = jj_consume_token(CLIPSParserConstants_Fields.DEFMODULE);
                    body = Identifier;
                    func = new ShellFunction();
                    func.Name = exp.image;
                    pms = new ValueParam[1];
                    pms[0] = new ValueParam(Constants.STRING_TYPE, body);
                    func.setParameters(pms);
                    {
                        if (true)
                            return func;
                    }
                    break;

                case CLIPSParserConstants_Fields.DEFRULE:
                    exp = jj_consume_token(CLIPSParserConstants_Fields.DEFRULE);
                    rule = ruleBody();
                    func = new ShellFunction();
                    func.Name = exp.image;
                    pms = new ValueParam[1];
                    pms[0] = new ValueParam(Constants.OBJECT_TYPE, rule);
                    func.setParameters(pms);
                    {
                        if (true)
                            return func;
                    }
                    break;

                case CLIPSParserConstants_Fields.DEFCLASS:
                    exp = jj_consume_token(CLIPSParserConstants_Fields.DEFCLASS);
                    switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                    {
                        case CLIPSParserConstants_Fields.LBRACE:
                        case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                        case CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL:
                        case CLIPSParserConstants_Fields.STRING_LITERAL:
                        case CLIPSParserConstants_Fields.BIND:
                        case CLIPSParserConstants_Fields.BIND3:
                        case CLIPSParserConstants_Fields.BIND4:
                        case CLIPSParserConstants_Fields.TRUE:
                        case CLIPSParserConstants_Fields.TRUE2:
                        case CLIPSParserConstants_Fields.FALSE:
                        case CLIPSParserConstants_Fields.FALSE2:
                        case CLIPSParserConstants_Fields.IDENTIFIER:
                        case CLIPSParserConstants_Fields.PATH_LITERAL:
                            while (true)
                            {
                                valueParams(list);
                                switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                                {
                                    case CLIPSParserConstants_Fields.LBRACE:
                                    case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                                    case CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL:
                                    case CLIPSParserConstants_Fields.STRING_LITERAL:
                                    case CLIPSParserConstants_Fields.BIND:
                                    case CLIPSParserConstants_Fields.BIND3:
                                    case CLIPSParserConstants_Fields.BIND4:
                                    case CLIPSParserConstants_Fields.TRUE:
                                    case CLIPSParserConstants_Fields.TRUE2:
                                    case CLIPSParserConstants_Fields.FALSE:
                                    case CLIPSParserConstants_Fields.FALSE2:
                                    case CLIPSParserConstants_Fields.IDENTIFIER:
                                    case CLIPSParserConstants_Fields.PATH_LITERAL:
                                        ;
                                        break;

                                    default:
                                        jj_la1[6] = jj_gen;
                                        //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                                        goto label_4_brk;
                                }
                            }
                            //UPGRADE_NOTE: Label 'label_4_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                            label_4_brk:
                            ;

                            break;

                        default:
                            jj_la1[7] = jj_gen;
                            ;
                            break;
                    }
                    func = new ShellFunction();
                    func.Name = exp.image;
                    func.setParameters(ParameterUtils.convertParameters(list));
                    list.Clear();
                    {
                        if (true)
                            return func;
                    }
                    break;

                case CLIPSParserConstants_Fields.DEFFUNCTION:
                    exp = jj_consume_token(CLIPSParserConstants_Fields.DEFFUNCTION);
                    exp2 = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
                    jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
                    switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                    {
                        case CLIPSParserConstants_Fields.BIND:
                        case CLIPSParserConstants_Fields.BIND3:
                        case CLIPSParserConstants_Fields.BIND4:
                            while (true)
                            {
                                bindingParams(list);
                                switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                                {
                                    case CLIPSParserConstants_Fields.BIND:
                                    case CLIPSParserConstants_Fields.BIND3:
                                    case CLIPSParserConstants_Fields.BIND4:
                                        ;
                                        break;

                                    default:
                                        jj_la1[8] = jj_gen;
                                        //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                                        goto label_5_brk;
                                }
                            }
                            //UPGRADE_NOTE: Label 'label_5_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                            label_5_brk:
                            ;

                            break;

                        default:
                            jj_la1[9] = jj_gen;
                            ;
                            break;
                    }
                    jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
                    jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
                    switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                    {
                        case CLIPSParserConstants_Fields.BINDING:
                        case CLIPSParserConstants_Fields.ASSERT:
                        case CLIPSParserConstants_Fields.ASSERTTEMPORAL:
                        case CLIPSParserConstants_Fields.DEFCLASS:
                        case CLIPSParserConstants_Fields.DEFFUNCTION:
                        case CLIPSParserConstants_Fields.DEFMODULE:
                        case CLIPSParserConstants_Fields.DEFRULE:
                        case CLIPSParserConstants_Fields.DEFTEMPLATE:
                        case CLIPSParserConstants_Fields.MODIFY:
                        case CLIPSParserConstants_Fields.RETRACT:
                        case CLIPSParserConstants_Fields.PLUS:
                        case CLIPSParserConstants_Fields.MINUS:
                        case CLIPSParserConstants_Fields.MULTIPLY:
                        case CLIPSParserConstants_Fields.DIVIDE:
                        case CLIPSParserConstants_Fields.GT1:
                        case CLIPSParserConstants_Fields.GT2:
                        case CLIPSParserConstants_Fields.LT1:
                        case CLIPSParserConstants_Fields.LT2:
                        case CLIPSParserConstants_Fields.EQ1:
                        case CLIPSParserConstants_Fields.EQ2:
                        case CLIPSParserConstants_Fields.LE1:
                        case CLIPSParserConstants_Fields.LE2:
                        case CLIPSParserConstants_Fields.GE1:
                        case CLIPSParserConstants_Fields.GE2:
                        case CLIPSParserConstants_Fields.IDENTIFIER:
                            ruleAction(infunc);
                            break;

                        default:
                            jj_la1[10] = jj_gen;
                            ;
                            break;
                    }
                    jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
                    dffunc = new DeffunctionFunction();
                    dffunc.Name = exp2.image;
                    dffunc.setParameters(ParameterUtils.convertParameters(list));
                    dffunc.setFunction(infunc);
                    list.Clear();
                    {
                        if (true)
                            return dffunc;
                    }
                    break;

                case CLIPSParserConstants_Fields.BINDING:
                    jj_consume_token(CLIPSParserConstants_Fields.BINDING);
                    exp = BindType;
                    while (true)
                    {
                        valueParams(list);
                        switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                        {
                            case CLIPSParserConstants_Fields.LBRACE:
                            case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                            case CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL:
                            case CLIPSParserConstants_Fields.STRING_LITERAL:
                            case CLIPSParserConstants_Fields.BIND:
                            case CLIPSParserConstants_Fields.BIND3:
                            case CLIPSParserConstants_Fields.BIND4:
                            case CLIPSParserConstants_Fields.TRUE:
                            case CLIPSParserConstants_Fields.TRUE2:
                            case CLIPSParserConstants_Fields.FALSE:
                            case CLIPSParserConstants_Fields.FALSE2:
                            case CLIPSParserConstants_Fields.IDENTIFIER:
                            case CLIPSParserConstants_Fields.PATH_LITERAL:
                                ;
                                break;

                            default:
                                jj_la1[11] = jj_gen;
                                //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                                goto label_6_brk;
                        }
                    }
                    //UPGRADE_NOTE: Label 'label_6_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                    label_6_brk:
                    ;

                    func = new ShellFunction();
                    func.Name = "bind";
                    list.Insert(0, new ValueParam(Constants.STRING_TYPE, exp.image.Substring(1)));
                    func.setParameters(ParameterUtils.convertParameters(list));
                    list.Clear();
                    {
                        if (true)
                            return func;
                    }
                    break;

                case CLIPSParserConstants_Fields.PLUS:
                case CLIPSParserConstants_Fields.MINUS:
                case CLIPSParserConstants_Fields.MULTIPLY:
                case CLIPSParserConstants_Fields.DIVIDE:
                case CLIPSParserConstants_Fields.GT1:
                case CLIPSParserConstants_Fields.GT2:
                case CLIPSParserConstants_Fields.LT1:
                case CLIPSParserConstants_Fields.LT2:
                case CLIPSParserConstants_Fields.EQ1:
                case CLIPSParserConstants_Fields.EQ2:
                case CLIPSParserConstants_Fields.LE1:
                case CLIPSParserConstants_Fields.LE2:
                case CLIPSParserConstants_Fields.GE1:
                case CLIPSParserConstants_Fields.GE2:
                    switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                    {
                        case CLIPSParserConstants_Fields.PLUS:
                            exp = jj_consume_token(CLIPSParserConstants_Fields.PLUS);
                            break;

                        case CLIPSParserConstants_Fields.MINUS:
                            exp = jj_consume_token(CLIPSParserConstants_Fields.MINUS);
                            break;

                        case CLIPSParserConstants_Fields.MULTIPLY:
                            exp = jj_consume_token(CLIPSParserConstants_Fields.MULTIPLY);
                            break;

                        case CLIPSParserConstants_Fields.DIVIDE:
                            exp = jj_consume_token(CLIPSParserConstants_Fields.DIVIDE);
                            break;

                        case CLIPSParserConstants_Fields.GT1:
                            exp = jj_consume_token(CLIPSParserConstants_Fields.GT1);
                            break;

                        case CLIPSParserConstants_Fields.GT2:
                            exp = jj_consume_token(CLIPSParserConstants_Fields.GT2);
                            break;

                        case CLIPSParserConstants_Fields.LT1:
                            exp = jj_consume_token(CLIPSParserConstants_Fields.LT1);
                            break;

                        case CLIPSParserConstants_Fields.LT2:
                            exp = jj_consume_token(CLIPSParserConstants_Fields.LT2);
                            break;

                        case CLIPSParserConstants_Fields.EQ1:
                            exp = jj_consume_token(CLIPSParserConstants_Fields.EQ1);
                            break;

                        case CLIPSParserConstants_Fields.EQ2:
                            exp = jj_consume_token(CLIPSParserConstants_Fields.EQ2);
                            break;

                        case CLIPSParserConstants_Fields.LE1:
                            exp = jj_consume_token(CLIPSParserConstants_Fields.LE1);
                            break;

                        case CLIPSParserConstants_Fields.LE2:
                            exp = jj_consume_token(CLIPSParserConstants_Fields.LE2);
                            break;

                        case CLIPSParserConstants_Fields.GE1:
                            exp = jj_consume_token(CLIPSParserConstants_Fields.GE1);
                            break;

                        case CLIPSParserConstants_Fields.GE2:
                            exp = jj_consume_token(CLIPSParserConstants_Fields.GE2);
                            break;

                        default:
                            jj_la1[12] = jj_gen;
                            jj_consume_token(- 1);
                            throw new ParseException();
                    }
                    while (true)
                    {
                        valueParams(list);
                        switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                        {
                            case CLIPSParserConstants_Fields.LBRACE:
                            case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                            case CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL:
                            case CLIPSParserConstants_Fields.STRING_LITERAL:
                            case CLIPSParserConstants_Fields.BIND:
                            case CLIPSParserConstants_Fields.BIND3:
                            case CLIPSParserConstants_Fields.BIND4:
                            case CLIPSParserConstants_Fields.TRUE:
                            case CLIPSParserConstants_Fields.TRUE2:
                            case CLIPSParserConstants_Fields.FALSE:
                            case CLIPSParserConstants_Fields.FALSE2:
                            case CLIPSParserConstants_Fields.IDENTIFIER:
                            case CLIPSParserConstants_Fields.PATH_LITERAL:
                                ;
                                break;

                            default:
                                jj_la1[13] = jj_gen;
                                //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                                goto label_7_brk;
                        }
                    }
                    //UPGRADE_NOTE: Label 'label_7_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                    label_7_brk:
                    ;

                    func = new ShellFunction();
                    func.Name = exp.image;
                    func.setParameters(ParameterUtils.convertParameters(list));
                    list.Clear();
                    {
                        if (true)
                            return func;
                    }
                    break;

                case CLIPSParserConstants_Fields.IDENTIFIER:
                    exp = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
                    switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                    {
                        case CLIPSParserConstants_Fields.LBRACE:
                        case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                        case CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL:
                        case CLIPSParserConstants_Fields.STRING_LITERAL:
                        case CLIPSParserConstants_Fields.BIND:
                        case CLIPSParserConstants_Fields.BIND3:
                        case CLIPSParserConstants_Fields.BIND4:
                        case CLIPSParserConstants_Fields.TRUE:
                        case CLIPSParserConstants_Fields.TRUE2:
                        case CLIPSParserConstants_Fields.FALSE:
                        case CLIPSParserConstants_Fields.FALSE2:
                        case CLIPSParserConstants_Fields.IDENTIFIER:
                        case CLIPSParserConstants_Fields.PATH_LITERAL:
                            while (true)
                            {
                                valueParams(list);
                                switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                                {
                                    case CLIPSParserConstants_Fields.LBRACE:
                                    case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                                    case CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL:
                                    case CLIPSParserConstants_Fields.STRING_LITERAL:
                                    case CLIPSParserConstants_Fields.BIND:
                                    case CLIPSParserConstants_Fields.BIND3:
                                    case CLIPSParserConstants_Fields.BIND4:
                                    case CLIPSParserConstants_Fields.TRUE:
                                    case CLIPSParserConstants_Fields.TRUE2:
                                    case CLIPSParserConstants_Fields.FALSE:
                                    case CLIPSParserConstants_Fields.FALSE2:
                                    case CLIPSParserConstants_Fields.IDENTIFIER:
                                    case CLIPSParserConstants_Fields.PATH_LITERAL:
                                        ;
                                        break;

                                    default:
                                        jj_la1[14] = jj_gen;
                                        //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                                        goto label_8_brk;
                                }
                            }
                            //UPGRADE_NOTE: Label 'label_8_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                            label_8_brk:
                            ;

                            break;

                        default:
                            jj_la1[15] = jj_gen;
                            ;
                            break;
                    }
                    func = new ShellFunction();
                    func.Name = exp.image;
                    func.setParameters(ParameterUtils.convertParameters(list));
                    list.Clear();
                    {
                        if (true)
                            return func;
                    }
                    break;

                default:
                    jj_la1[16] = jj_gen;
                    jj_consume_token(- 1);
                    throw new ParseException();
            }
            throw new ApplicationException("Missing return statement in function");
        }

        public void valueParams(IList list)
        {
            Object exp;
            Token tok;
            ValueParam vp = null;
            if (jj_2_1(2147483647))
            {
                jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
                exp = expr();
                jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
                ShellFunction subfunc = (ShellFunction) exp;
                FunctionParam2 fp2 = new FunctionParam2();
                fp2.FunctionName = subfunc.Name;
                fp2.Engine = engine;
                fp2.Parameters = subfunc.Parameters;
                list.Add(fp2);
            }
            else
            {
                switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                {
                    case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                    case CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL:
                    case CLIPSParserConstants_Fields.STRING_LITERAL:
                    case CLIPSParserConstants_Fields.PATH_LITERAL:
                        exp = typeExpr();
                        vp = new ValueParam();
                        vp.Value = exp;
                        if (exp is Decimal)
                        {
                            vp.ValueType = Constants.BIG_DECIMAL;
                        }
                        else if (exp is String)
                        {
                            vp.ValueType = Constants.STRING_TYPE;
                        }
                        list.Add(vp);
                        break;

                    case CLIPSParserConstants_Fields.IDENTIFIER:
                        exp = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
                        vp = new ValueParam();
                        vp.ValueType = Constants.STRING_TYPE;
                        if (exp is Token)
                        {
                            vp.Value = ((Token) exp).image;
                        }
                        else
                        {
                            vp.Value = exp;
                        }
                        list.Add(vp);
                        break;

                    case CLIPSParserConstants_Fields.TRUE:
                        exp = jj_consume_token(CLIPSParserConstants_Fields.TRUE);
                        vp = new ValueParam();
                        vp.Value = true;
                        list.Add(vp);
                        break;

                    case CLIPSParserConstants_Fields.TRUE2:
                        exp = jj_consume_token(CLIPSParserConstants_Fields.TRUE2);
                        vp = new ValueParam();
                        vp.Value = true;
                        list.Add(vp);
                        break;

                    case CLIPSParserConstants_Fields.FALSE:
                        exp = jj_consume_token(CLIPSParserConstants_Fields.FALSE);
                        vp = new ValueParam();
                        vp.Value = false;
                        list.Add(vp);
                        break;

                    case CLIPSParserConstants_Fields.FALSE2:
                        exp = jj_consume_token(CLIPSParserConstants_Fields.FALSE2);
                        vp = new ValueParam();
                        vp.Value = false;
                        list.Add(vp);
                        break;

                    case CLIPSParserConstants_Fields.BIND:
                    case CLIPSParserConstants_Fields.BIND3:
                    case CLIPSParserConstants_Fields.BIND4:
                        tok = BindType;
                        BoundParam bp = new BoundParam();
                        if (tok.kind == CLIPSParserConstants_Fields.BIND4)
                        {
                            bp.VariableName = tok.image.Substring(2);
                            bp.IsMultislot = true;
                        }
                        else
                        {
                            bp.VariableName = tok.image;
                        }
                        list.Add(bp);
                        break;

                    default:
                        jj_la1[17] = jj_gen;
                        jj_consume_token(- 1);
                        throw new ParseException();
                }
            }
        }

        /// <summary> bindingParams is meant to parse the params for a deffunction
        /// </summary>
        public void bindingParams(IList list)
        {
            Object exp;
            Token tok;
            ValueParam vp = null;
            tok = BindType;
            BoundParam bp = new BoundParam();
            if (tok.kind == CLIPSParserConstants_Fields.BIND4)
            {
                bp.VariableName = tok.image.Substring(2);
                bp.IsMultislot = true;
            }
            else
            {
                bp.VariableName = tok.image;
            }
            list.Add(bp);
        }


        public ValueParam[] assertBody()
        {
            Token exp;
            IList tokens = new ArrayList();
            ValueParam[] param = null;
            jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
            exp = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
            while (true)
            {
                assertContents(tokens);
                switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                {
                    case CLIPSParserConstants_Fields.LBRACE:
                        ;
                        break;

                    default:
                        jj_la1[19] = jj_gen;
                        //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                        goto label_9_brk;
                }
            }
            //UPGRADE_NOTE: Label 'label_9_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
            label_9_brk:
            ;

            jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
            param = new ValueParam[2];
            param[0] = new ValueParam(Constants.STRING_TYPE, exp.image);

            object[] ary = new object[tokens.Count];
            tokens.CopyTo(ary,0);

            param[1] = new ValueParam(Constants.OBJECT_TYPE, ary);
            tokens.Clear();
            exp = null;
            {
                if (true)
                    return param;
            }
            throw new ApplicationException("Missing return statement in function");
        }

        /* assert body */

        public void assertContents(IList tokens)
        {
            Token exp;
            Object body = null;
            jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
            exp = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
            switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
            {
                case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                case CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL:
                case CLIPSParserConstants_Fields.STRING_LITERAL:
                case CLIPSParserConstants_Fields.BIND:
                case CLIPSParserConstants_Fields.BIND3:
                case CLIPSParserConstants_Fields.BIND4:
                case CLIPSParserConstants_Fields.TRUE:
                case CLIPSParserConstants_Fields.TRUE2:
                case CLIPSParserConstants_Fields.FALSE:
                case CLIPSParserConstants_Fields.FALSE2:
                case CLIPSParserConstants_Fields.IDENTIFIER:
                case CLIPSParserConstants_Fields.PATH_LITERAL:
                    body = checkMultiSlot();
                    break;

                default:
                    jj_la1[20] = jj_gen;
                    ;
                    break;
            }
            jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
            if (body != null)
            {
                if (body.GetType().IsArray)
                {
                    MultiSlot msl = new MultiSlot(exp.image);
                    msl.Value = body;
                    tokens.Add(msl);
                }
                else
                {
                    Slot s = new Slot(exp.image);
                    s.Value = body;
                    tokens.Add(s);
                }
            }
            exp.clear();
            exp = null;
            body = null;
        }

        public Object checkMultiSlot()
        {
            Object body;
            ArrayList artokens = new ArrayList();
            if (jj_2_2(2147483647))
            {
                while (true)
                {
                    arrayType(artokens);
                    switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                    {
                        case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                        case CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL:
                        case CLIPSParserConstants_Fields.STRING_LITERAL:
                        case CLIPSParserConstants_Fields.BIND:
                        case CLIPSParserConstants_Fields.BIND3:
                        case CLIPSParserConstants_Fields.IDENTIFIER:
                        case CLIPSParserConstants_Fields.PATH_LITERAL:
                            ;
                            break;

                        default:
                            jj_la1[21] = jj_gen;
                            //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                            goto label_10_brk;
                    }
                }
                //UPGRADE_NOTE: Label 'label_10_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                label_10_brk:
                ;

                {
                    if (true)
                    {
                        object[] toks = new object[artokens.Count];
                        artokens.CopyTo(toks,0);
                        return toks;
                    }
                }
            }
            else if (jj_2_3(2147483647))
            {
                while (true)
                {
                    arrayType(artokens);
                    switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                    {
                        case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                        case CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL:
                        case CLIPSParserConstants_Fields.STRING_LITERAL:
                        case CLIPSParserConstants_Fields.BIND:
                        case CLIPSParserConstants_Fields.BIND3:
                        case CLIPSParserConstants_Fields.IDENTIFIER:
                        case CLIPSParserConstants_Fields.PATH_LITERAL:
                            ;
                            break;

                        default:
                            jj_la1[22] = jj_gen;
                            //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                            goto label_11_brk;
                    }
                }
                //UPGRADE_NOTE: Label 'label_11_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                label_11_brk:
                ;

                {
                    if (true)
                    {
                        object[] toks = new object[artokens.Count];
                        artokens.CopyTo(toks, 0);
                        return toks;
                        //return artokens.toArray();
                    }
                }
            }
            else if (jj_2_4(2147483647))
            {
                while (true)
                {
                    arrayType(artokens);
                    switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                    {
                        case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                        case CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL:
                        case CLIPSParserConstants_Fields.STRING_LITERAL:
                        case CLIPSParserConstants_Fields.BIND:
                        case CLIPSParserConstants_Fields.BIND3:
                        case CLIPSParserConstants_Fields.IDENTIFIER:
                        case CLIPSParserConstants_Fields.PATH_LITERAL:
                            ;
                            break;

                        default:
                            jj_la1[23] = jj_gen;
                            //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                            goto label_12_brk;
                    }
                }
                //UPGRADE_NOTE: Label 'label_12_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                label_12_brk:
                ;

                {
                    if (true)
                    {
                        object[] toks = new object[artokens.Count];
                        artokens.CopyTo(toks, 0);
                        return toks;
                        //return artokens.toArray();
                    }
                }
            }
            else if (jj_2_5(2147483647))
            {
                while (true)
                {
                    arrayType(artokens);
                    switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                    {
                        case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                        case CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL:
                        case CLIPSParserConstants_Fields.STRING_LITERAL:
                        case CLIPSParserConstants_Fields.BIND:
                        case CLIPSParserConstants_Fields.BIND3:
                        case CLIPSParserConstants_Fields.IDENTIFIER:
                        case CLIPSParserConstants_Fields.PATH_LITERAL:
                            ;
                            break;

                        default:
                            jj_la1[24] = jj_gen;
                            //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                            goto label_13_brk;
                    }
                }
                //UPGRADE_NOTE: Label 'label_13_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                label_13_brk:
                ;

                {
                    if (true)
                    {
                        object[] toks = new object[artokens.Count];
                        artokens.CopyTo(toks, 0);
                        return toks;

                        //return artokens.toArray();
                    }
                }
            }
            else if (jj_2_6(2147483647))
            {
                while (true)
                {
                    arrayType(artokens);
                    switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                    {
                        case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                        case CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL:
                        case CLIPSParserConstants_Fields.STRING_LITERAL:
                        case CLIPSParserConstants_Fields.BIND:
                        case CLIPSParserConstants_Fields.BIND3:
                        case CLIPSParserConstants_Fields.IDENTIFIER:
                        case CLIPSParserConstants_Fields.PATH_LITERAL:
                            ;
                            break;

                        default:
                            jj_la1[25] = jj_gen;
                            //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                            goto label_14_brk;
                    }
                }
                //UPGRADE_NOTE: Label 'label_14_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                label_14_brk:
                ;

                {
                    if (true)
                    {
                        object[] toks = new object[artokens.Count];
                        artokens.CopyTo(toks, 0);
                        return toks;
                        //return artokens.toArray();
                    }
                }
            }
            else if (jj_2_7(2147483647))
            {
                while (true)
                {
                    arrayType(artokens);
                    switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                    {
                        case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                        case CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL:
                        case CLIPSParserConstants_Fields.STRING_LITERAL:
                        case CLIPSParserConstants_Fields.BIND:
                        case CLIPSParserConstants_Fields.BIND3:
                        case CLIPSParserConstants_Fields.IDENTIFIER:
                        case CLIPSParserConstants_Fields.PATH_LITERAL:
                            ;
                            break;

                        default:
                            jj_la1[26] = jj_gen;
                            //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                            goto label_15_brk;
                    }
                }
                //UPGRADE_NOTE: Label 'label_15_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                label_15_brk:
                ;

                {
                    if (true)
                    {
                        object[] toks = new object[artokens.Count];
                        artokens.CopyTo(toks, 0);
                        return toks;
                        //return artokens.toArray();
                    }
                }
            }
            else
            {
                switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                {
                    case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                    case CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL:
                    case CLIPSParserConstants_Fields.STRING_LITERAL:
                    case CLIPSParserConstants_Fields.BIND:
                    case CLIPSParserConstants_Fields.BIND3:
                    case CLIPSParserConstants_Fields.BIND4:
                    case CLIPSParserConstants_Fields.TRUE:
                    case CLIPSParserConstants_Fields.TRUE2:
                    case CLIPSParserConstants_Fields.FALSE:
                    case CLIPSParserConstants_Fields.FALSE2:
                    case CLIPSParserConstants_Fields.IDENTIFIER:
                    case CLIPSParserConstants_Fields.PATH_LITERAL:
                        body = slotValueType();
                        {
                            if (true)
                                return body;
                        }
                        break;

                    default:
                        jj_la1[27] = jj_gen;
                        jj_consume_token(- 1);
                        throw new ParseException();
                }
            }
            throw new ApplicationException("Missing return statement in function");
        }

        public Object slotValueType()
        {
            Object body;
            Token btoken;
            bool boolval;
            switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
            {
                case CLIPSParserConstants_Fields.BIND:
                case CLIPSParserConstants_Fields.BIND3:
                case CLIPSParserConstants_Fields.BIND4:
                    btoken = BindType;
                    // probably should refactor this later, instead of looking up the value directly
                    Object val = engine.getDefglobalValue(btoken.image);
                    if (val != null)
                    {
                        {
                            if (true)
                                return engine.getDefglobalValue(btoken.image);
                        }
                    }
                    else
                    {
                        BoundParam bp = new BoundParam();
                        bp.VariableName = btoken.image;
                        {
                            if (true)
                                return bp;
                        }
                    }
                    break;

                case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                case CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL:
                case CLIPSParserConstants_Fields.STRING_LITERAL:
                case CLIPSParserConstants_Fields.PATH_LITERAL:
                    body = typeExpr();
                    {
                        if (true)
                            return body;
                    }
                    break;

                case CLIPSParserConstants_Fields.TRUE:
                case CLIPSParserConstants_Fields.TRUE2:
                case CLIPSParserConstants_Fields.FALSE:
                case CLIPSParserConstants_Fields.FALSE2:
                    boolval = trueFalse();
                    {
                        if (true)
                            return boolval;
                    }
                    break;

                case CLIPSParserConstants_Fields.IDENTIFIER:
                    btoken = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
                    {
                        if (true)
                            return btoken.image;
                    }
                    break;

                default:
                    jj_la1[28] = jj_gen;
                    jj_consume_token(- 1);
                    throw new ParseException();
            }
            throw new ApplicationException("Missing return statement in function");
        }

        /* arrayType handles multislot tokens */

        public void arrayType(IList tokens)
        {
            Token tval;
            Object val;
            switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
            {
                case CLIPSParserConstants_Fields.IDENTIFIER:
                    tval = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
                    tokens.Add(tval.image);
                    break;

                case CLIPSParserConstants_Fields.BIND:
                    tval = jj_consume_token(CLIPSParserConstants_Fields.BIND);
                    if (tval.kind == CLIPSParserConstants_Fields.BIND)
                    {
                        BoundParam bp = new BoundParam();
                        bp.VariableName = tval.image;
                        tokens.Add(bp);
                    }
                    break;

                case CLIPSParserConstants_Fields.BIND3:
                    tval = jj_consume_token(CLIPSParserConstants_Fields.BIND3);
                    if (tval.kind == CLIPSParserConstants_Fields.BIND3)
                    {
                        BoundParam bp = new BoundParam();
                        bp.VariableName = tval.image;
                        tokens.Add(bp);
                    }
                    break;

                case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                case CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL:
                case CLIPSParserConstants_Fields.STRING_LITERAL:
                case CLIPSParserConstants_Fields.PATH_LITERAL:
                    val = typeExpr();
                    tokens.Add(val);
                    break;

                default:
                    jj_la1[29] = jj_gen;
                    jj_consume_token(- 1);
                    throw new ParseException();
            }
        }

        /* templateExpr gets the slots of a deftemplate */

        public Deftemplate templateExpr()
        {
            Token exp;
            Deftemplate template;
            IList slots = new ArrayList();
            /* javacc gives a warning for this, but not sure how to do it better */
            exp = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
            while (true)
            {
                templateBody(slots);
                switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                {
                    case CLIPSParserConstants_Fields.LBRACE:
                        ;
                        break;

                    default:
                        jj_la1[30] = jj_gen;
                        //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                        goto label_16_brk;
                }
            }
            //UPGRADE_NOTE: Label 'label_16_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
            label_16_brk:
            ;

            Slot[] s = new Slot[slots.Count];
            slots.CopyTo(s,0);
            template = new Deftemplate(exp.image, null, s);
            slots.Clear();
            exp.clear();
            exp = null;
            {
                if (true)
                    return template;
            }
            throw new ApplicationException("Missing return statement in function");
        }

        public void templateBody(IList slots)
        {
            Token sname;
            int stype;
            int sid;
            Slot sl;
            MultiSlot msl;
            Object defaultvalue;
            if (jj_2_8(2147483647))
            {
                jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
                jj_consume_token(CLIPSParserConstants_Fields.SLOT);
                sname = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
                stype = slotType();
                defaultvalue = defaultValue();
                jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
                sid = slots.Count;
                sl = new Slot(sname.image);
                sl.Id = sid;
                sl.ValueType = stype;
                slots.Add(sl);
                sname = null;
            }
            else if (jj_2_9(2147483647))
            {
                jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
                jj_consume_token(CLIPSParserConstants_Fields.MULTISLOT);
                sname = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
                jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
                sid = slots.Count;
                msl = new MultiSlot(sname.image);
                msl.Id = sid;
                slots.Add(msl);
                sname = null;
            }
            else
            {
                jj_consume_token(- 1);
                throw new ParseException();
            }
        }

        public int slotType()
        {
            int stype = - 1;
            int defaultType = 9;
            if (jj_2_10(2147483647))
            {
                jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
                jj_consume_token(CLIPSParserConstants_Fields.TYPEDEF);
                stype = Type;
                jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
            }
            else
            {
                ;
            }
            if (stype > - 1)
            {
                defaultType = stype;
            }
            {
                if (true)
                    return defaultType;
            }
            throw new ApplicationException("Missing return statement in function");
        }

        public Object defaultValue()
        {
            Object defobj = null;
            if (jj_2_11(2147483647))
            {
                jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
                jj_consume_token(CLIPSParserConstants_Fields.DEFAULTVALUE);
                defobj = typeExpr();
                jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
            }
            else
            {
                ;
            }
            {
                if (true)
                    return defobj;
            }
            throw new ApplicationException("Missing return statement in function");
        }


        public Defrule ruleBody()
        {
            Token exp = null;
            Token rulecomment = null;
            Defrule rule;
            IList dec = new ArrayList();
            IList conditions = new ArrayList();
            IList actions = new ArrayList();
            exp = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
            if (jj_2_12(2147483647))
            {
                rulecomment = jj_consume_token(CLIPSParserConstants_Fields.STRING_LITERAL);
            }
            else
            {
                ;
            }
            if (jj_2_13(2147483647))
            {
                ruleDeclaration(dec);
            }
            else
            {
                ;
            }
            switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
            {
                case CLIPSParserConstants_Fields.LBRACE:
                case CLIPSParserConstants_Fields.BIND:
                    while (true)
                    {
                        conditionElement(conditions);
                        switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                        {
                            case CLIPSParserConstants_Fields.LBRACE:
                            case CLIPSParserConstants_Fields.BIND:
                                ;
                                break;

                            default:
                                jj_la1[32] = jj_gen;
                                //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                                goto label_17_brk;
                        }
                    }
                    //UPGRADE_NOTE: Label 'label_17_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                    label_17_brk:
                    ;

                    break;

                default:
                    jj_la1[33] = jj_gen;
                    ;
                    break;
            }
            arrow();
            ruleActions(actions);
            rule = new Defrule(exp.image);
            if (rulecomment != null)
            {
                rule.Comment = rulecomment.image;
            }
            rule.setRuleProperties(dec);
            IEnumerator itr = conditions.GetEnumerator();
            while (itr.MoveNext())
            {
                rule.addCondition((ICondition) itr.Current);
            }

            itr = actions.GetEnumerator();
            while (itr.MoveNext())
            {
                Object acn = itr.Current;
                if (acn is IFunction)
                {
                    FunctionAction faction = new FunctionAction();
                    faction.Function = (IFunction) acn;
                    rule.addAction(faction);
                }
                else if (acn is IAction)
                {
                    rule.addAction((IAction) acn);
                }
            }
            dec.Clear();
            conditions.Clear();
            actions.Clear();
            exp = null;
            {
                if (true)
                    return rule;
            }
            throw new ApplicationException("Missing return statement in function");
        }

        public void ruleDeclaration(IList list)
        {
            Token exp;
            jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
            exp = jj_consume_token(CLIPSParserConstants_Fields.DECLARE);
            ruleProperty(list);
            jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
        }

        public void ruleProperty(IList list)
        {
            Object exp = null;
            bool tf = true;
            String ver = null;
            bool remember1 = true;
            bool temporal = false;
            bool agenda = false;
            String direction1 = null;
            String date = null;
            if (jj_2_14(2147483647))
            {
                exp = salience();
            }
            else
            {
                ;
            }
            if (exp != null)
            {
                Int64 intsal = Int64.Parse(((Token) exp).image);
                RuleProperty sal = new RuleProperty(RuleProperty.SALIENCE, (int) intsal);
                list.Add(sal);
            }
            if (jj_2_15(2147483647))
            {
                tf = autoFocus();
            }
            else
            {
                ;
            }
            RuleProperty auto = new RuleProperty(RuleProperty.AUTO_FOCUS, tf);
            list.Add(auto);
            if (jj_2_16(2147483647))
            {
                ver = ruleVersion();
            }
            else
            {
                ;
            }
            RuleProperty rp = new RuleProperty(RuleProperty.VERSION, ver);
            list.Add(rp);
            if (jj_2_17(2147483647))
            {
                remember1 = remember();
            }
            else
            {
                ;
            }
            RuleProperty rmem = new RuleProperty(RuleProperty.REMEMBER_MATCH, remember1);
            list.Add(rmem);
            if (jj_2_18(2147483647))
            {
                date = effectiveDate();
            }
            else
            {
                ;
            }
            RuleProperty eff = new RuleProperty(RuleProperty.EFFECTIVE_DATE, date);
            list.Add(eff);
            if (jj_2_19(2147483647))
            {
                date = expirationDate();
            }
            else
            {
                ;
            }
            RuleProperty expr = new RuleProperty(RuleProperty.EXPIRATION_DATE, date);
            list.Add(expr);
            if (jj_2_20(2147483647))
            {
                direction1 = direction();
            }
            else
            {
                ;
            }
            RuleProperty dir = new RuleProperty(RuleProperty.DIRECTION, direction1);
            list.Add(dir);
            if (jj_2_21(2147483647))
            {
                agenda = noAgenda();
            }
            else
            {
                ;
            }
            RuleProperty noagenda = new RuleProperty(RuleProperty.NO_AGENDA, agenda);
            list.Add(noagenda);
            if (jj_2_22(2147483647))
            {
                temporal = temporalAct();
            }
            else
            {
                ;
            }
            RuleProperty tempprop = new RuleProperty(RuleProperty.TEMPORAL_ACTIVATION, temporal);
            list.Add(tempprop);
        }

        public Object salience()
        {
            Token exp = null;
            Object val = null;
            jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
            exp = jj_consume_token(CLIPSParserConstants_Fields.SALIENCE);
            val = jj_consume_token(CLIPSParserConstants_Fields.INTEGER_LITERAL);
            jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
            exp = null;
            if (val != null)
            {
                {
                    if (true)
                        return val;
                }
            }
            else
            {
                {
                    if (true)
                        return null;
                }
            }
            throw new ApplicationException("Missing return statement in function");
        }

        public bool autoFocus()
        {
            Token exp;
            bool tf = false;
            jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
            exp = jj_consume_token(CLIPSParserConstants_Fields.AUTOFOCUS);
            tf = trueFalse();
            jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
            {
                if (true)
                    return tf;
            }
            throw new ApplicationException("Missing return statement in function");
        }

        public String ruleVersion()
        {
            Token exp;
            jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
            jj_consume_token(CLIPSParserConstants_Fields.RULEVERSION);
            switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
            {
                case CLIPSParserConstants_Fields.IDENTIFIER:
                    exp = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
                    break;

                case CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL:
                    exp = jj_consume_token(CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL);
                    break;

                case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                    exp = jj_consume_token(CLIPSParserConstants_Fields.INTEGER_LITERAL);
                    break;

                default:
                    jj_la1[34] = jj_gen;
                    jj_consume_token(- 1);
                    throw new ParseException();
            }
            jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
            {
                if (true)
                    return exp.image;
            }
            throw new ApplicationException("Missing return statement in function");
        }

        public bool remember()
        {
            Token exp;
            bool tf = false;
            jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
            exp = jj_consume_token(CLIPSParserConstants_Fields.REMEMBERMATCH);
            tf = trueFalse();
            jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
            {
                if (true)
                    return tf;
            }
            throw new ApplicationException("Missing return statement in function");
        }

        public String direction()
        {
            Token exp;
            String defaultDir = "forward";
            jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
            jj_consume_token(CLIPSParserConstants_Fields.CHAININGDIRECTION);
            exp = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
            jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
            if (exp != null && exp.image.Equals("backward"))
            {
                {
                    if (true)
                        return exp.image;
                }
            }
            else
            {
                {
                    if (true)
                        return defaultDir;
                }
            }
            throw new ApplicationException("Missing return statement in function");
        }

        public bool noAgenda()
        {
            Token exp;
            bool tf = false;
            jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
            exp = jj_consume_token(CLIPSParserConstants_Fields.NOAGENDA);
            tf = trueFalse();
            jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
            {
                if (true)
                    return tf;
            }
            throw new ApplicationException("Missing return statement in function");
        }

        public String effectiveDate()
        {
            Token exp;
            Token date;
            jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
            exp = jj_consume_token(CLIPSParserConstants_Fields.EFFECTIVE);
            date = jj_consume_token(CLIPSParserConstants_Fields.STRING_LITERAL);
            jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
            {
                if (true)
                    return date.image.Substring(1, (date.image.Length - 1) - (1));
            }
            throw new ApplicationException("Missing return statement in function");
        }

        public String expirationDate()
        {
            Token exp;
            Token date;
            jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
            exp = jj_consume_token(CLIPSParserConstants_Fields.EXPIRATION);
            date = jj_consume_token(CLIPSParserConstants_Fields.STRING_LITERAL);
            jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
            {
                if (true)
                    return date.image.Substring(1, (date.image.Length - 1) - (1));
            }
            throw new ApplicationException("Missing return statement in function");
        }

        public bool temporalAct()
        {
            Token exp;
            bool tf = false;
            jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
            exp = jj_consume_token(CLIPSParserConstants_Fields.TEMPORALACTIVATION);
            tf = trueFalse();
            jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
            {
                if (true)
                    return tf;
            }
            throw new ApplicationException("Missing return statement in function");
        }

        public bool trueFalse()
        {
            switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
            {
                case CLIPSParserConstants_Fields.TRUE:
                    jj_consume_token(CLIPSParserConstants_Fields.TRUE);
                    {
                        if (true)
                            return true;
                    }
                    break;

                case CLIPSParserConstants_Fields.TRUE2:
                    jj_consume_token(CLIPSParserConstants_Fields.TRUE2);
                    {
                        if (true)
                            return true;
                    }
                    break;

                case CLIPSParserConstants_Fields.FALSE:
                    jj_consume_token(CLIPSParserConstants_Fields.FALSE);
                    {
                        if (true)
                            return false;
                    }
                    break;

                case CLIPSParserConstants_Fields.FALSE2:
                    jj_consume_token(CLIPSParserConstants_Fields.FALSE2);
                    {
                        if (true)
                            return false;
                    }
                    break;

                default:
                    jj_la1[35] = jj_gen;
                    jj_consume_token(- 1);
                    throw new ParseException();
            }
            throw new ApplicationException("Missing return statement in function");
        }

        public void conditionElement(IList list)
        {
            Token exp;
            if (jj_2_23(2147483647))
            {
                exp = jj_consume_token(CLIPSParserConstants_Fields.BIND);
                jj_consume_token(CLIPSParserConstants_Fields.ASSIGN);
                jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
                CEType(list);
                jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
                ObjectCondition oc = (ObjectCondition) list[list.Count - 1];
                BoundConstraint bc = new BoundConstraint(oc.TemplateName, true);
                bc.Value = exp.image.Substring(1);
                oc.addConstraint(bc, 0);
            }
            else
            {
                switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                {
                    case CLIPSParserConstants_Fields.LBRACE:
                        jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
                        CEType(list);
                        jj_consume_token(CLIPSParserConstants_Fields.RBRACE);

                        break;

                    default:
                        jj_la1[36] = jj_gen;
                        jj_consume_token(- 1);
                        throw new ParseException();
                }
            }
        }

        public void CEType(IList list)
        {
            Token exp;
            Token exp2;
            Object etime;
            Object nested = null;
            IList alpha = new ArrayList();
            ObjectCondition oc = null;
            TemporalCondition tmpc = null;
            if (jj_2_24(2147483647))
            {
                jj_consume_token(CLIPSParserConstants_Fields.NOTCE);
                jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
                exp = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
                switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                {
                    case CLIPSParserConstants_Fields.LBRACE:
                        while (true)
                        {
                            templatePatterns(alpha);
                            switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                            {
                                case CLIPSParserConstants_Fields.LBRACE:
                                    ;
                                    break;

                                default:
                                    jj_la1[37] = jj_gen;
                                    //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                                    goto label_18_brk;
                            }
                        }
                        //UPGRADE_NOTE: Label 'label_18_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                        label_18_brk:
                        ;

                        break;

                    default:
                        jj_la1[38] = jj_gen;
                        ;
                        break;
                }
                jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
                oc = new ObjectCondition();
                oc.Negated = true;
                oc.TemplateName = exp.image;
                IEnumerator itr = alpha.GetEnumerator();
                while (itr.MoveNext())
                {
                    oc.addConstraint((IConstraint) itr.Current);
                }
                list.Add(oc);
                alpha.Clear();
                exp = null;
            }
            else
            {
                switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                {
                    case CLIPSParserConstants_Fields.NOTCE:
                        jj_consume_token(CLIPSParserConstants_Fields.NOTCE);
                        jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
                        nested = expr();
                        jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
                        TestCondition tc = new TestCondition();
                        tc.Negated = true;
                        if (nested is IFunction)
                        {
                            tc.Function = (IFunction) nested;
                        }
                        list.Add(tc);
                        break;

                    default:
                        jj_la1[47] = jj_gen;
                        if (jj_2_25(2147483647))
                        {
                            jj_consume_token(CLIPSParserConstants_Fields.TEMPORAL);
                            jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
                            jj_consume_token(CLIPSParserConstants_Fields.RELATIVETIME);
                            etime = typeExpr();
                            jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
                            jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
                            jj_consume_token(CLIPSParserConstants_Fields.NOTCE);
                            jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
                            exp = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
                            switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                            {
                                case CLIPSParserConstants_Fields.LBRACE:
                                    while (true)
                                    {
                                        templatePatterns(alpha);
                                        switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                                        {
                                            case CLIPSParserConstants_Fields.LBRACE:
                                                ;
                                                break;

                                            default:
                                                jj_la1[39] = jj_gen;
                                                //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                                                goto label_19_brk;
                                        }
                                    }
                                    //UPGRADE_NOTE: Label 'label_19_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                                    label_19_brk:
                                    ;

                                    break;

                                default:
                                    jj_la1[40] = jj_gen;
                                    ;
                                    break;
                            }
                            jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
                            jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
                            tmpc = new TemporalCondition();
                            tmpc.TemplateName = exp.image;
                            tmpc.Negated = true;
                            if (etime is Decimal)
                            {
                                tmpc.RelativeTime = Decimal.ToInt32(((Decimal) etime));
                            }
                            IEnumerator itr = alpha.GetEnumerator();
                            while (itr.MoveNext())
                            {
                                tmpc.addConstraint((IConstraint) itr.Current);
                            }
                            list.Add(tmpc);
                            alpha.Clear();
                            exp = null;
                        }
                        else
                        {
                            switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                            {
                                case CLIPSParserConstants_Fields.TEMPORAL:
                                    jj_consume_token(CLIPSParserConstants_Fields.TEMPORAL);
                                    exp2 = jj_consume_token(CLIPSParserConstants_Fields.BIND);
                                    jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
                                    jj_consume_token(CLIPSParserConstants_Fields.RELATIVETIME);
                                    etime = typeExpr();
                                    jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
                                    jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
                                    exp = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
                                    switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                                    {
                                        case CLIPSParserConstants_Fields.LBRACE:
                                            while (true)
                                            {
                                                templatePatterns(alpha);
                                                switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                                                {
                                                    case CLIPSParserConstants_Fields.LBRACE:
                                                        ;
                                                        break;

                                                    default:
                                                        jj_la1[41] = jj_gen;
                                                        //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                                                        goto label_20_brk;
                                                }
                                            }
                                            //UPGRADE_NOTE: Label 'label_20_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                                            label_20_brk:
                                            ;

                                            break;

                                        default:
                                            jj_la1[42] = jj_gen;
                                            ;
                                            break;
                                    }
                                    jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
                                    tmpc = new TemporalCondition();
                                    tmpc.TemplateName = exp.image;
                                    tmpc.VariableName = exp2.image.Substring(1);
                                    if (etime is Decimal)
                                    {
                                        tmpc.RelativeTime = Decimal.ToInt32(((Decimal) etime));
                                    }
                                    IEnumerator itr = alpha.GetEnumerator();
                                    while (itr.MoveNext())
                                    {
                                        tmpc.addConstraint((IConstraint) itr.Current);
                                    }
                                    list.Add(tmpc);
                                    alpha.Clear();
                                    exp = null;
                                    break;

                                case CLIPSParserConstants_Fields.TEST:
                                    jj_consume_token(CLIPSParserConstants_Fields.TEST);
                                    jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
                                    nested = expr();
                                    jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
                                    tc = new TestCondition();
                                    if (nested is IFunction)
                                    {
                                        tc.Function = (IFunction) nested;
                                    }
                                    list.Add(tc);
                                    break;

                                case CLIPSParserConstants_Fields.AND1:
                                    jj_consume_token(CLIPSParserConstants_Fields.AND1);
                                    while (true)
                                    {
                                        jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
                                        nested = expr();
                                        jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
                                        switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                                        {
                                            case CLIPSParserConstants_Fields.LBRACE:
                                                ;
                                                break;

                                            default:
                                                jj_la1[43] = jj_gen;
                                                //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                                                goto label_21_brk;
                                        }
                                    }
                                    //UPGRADE_NOTE: Label 'label_21_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                                    label_21_brk:
                                    ;

                                    AndCondition ac = new AndCondition();
                                    ac.addNestedConditionElement(nested);
                                    list.Add(ac);
                                    break;

                                case CLIPSParserConstants_Fields.EXISTS:
                                    jj_consume_token(CLIPSParserConstants_Fields.EXISTS);
                                    while (true)
                                    {
                                        jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
                                        CEType(alpha);
                                        jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
                                        switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                                        {
                                            case CLIPSParserConstants_Fields.LBRACE:
                                                ;
                                                break;

                                            default:
                                                jj_la1[44] = jj_gen;
                                                //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                                                goto label_22_brk;
                                        }
                                    }
                                    //UPGRADE_NOTE: Label 'label_22_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                                    label_22_brk:
                                    ;

                                    ExistCondition exc = null;
                                    if (alpha.Count > 1)
                                    {
                                        for (int iz = 0; iz < alpha.Count; iz++)
                                        {
                                            exc = ExistCondition.newExistCondition((ObjectCondition) alpha[iz]);
                                            list.Add(exc);
                                        }
                                    }
                                    else
                                    {
                                        exc = ExistCondition.newExistCondition((ObjectCondition) alpha[0]);
                                        list.Add(exc);
                                    }
                                    break;

                                case CLIPSParserConstants_Fields.IDENTIFIER:
                                    exp = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
                                    switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                                    {
                                        case CLIPSParserConstants_Fields.LBRACE:
                                            while (true)
                                            {
                                                templatePatterns(alpha);
                                                switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                                                {
                                                    case CLIPSParserConstants_Fields.LBRACE:
                                                        ;
                                                        break;

                                                    default:
                                                        jj_la1[45] = jj_gen;
                                                        //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                                                        goto label_23_brk;
                                                }
                                            }
                                            //UPGRADE_NOTE: Label 'label_23_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                                            label_23_brk:
                                            ;

                                            break;

                                        default:
                                            jj_la1[46] = jj_gen;
                                            ;
                                            break;
                                    }
                                    oc = new ObjectCondition();
                                    oc.TemplateName = exp.image;
                                    itr = alpha.GetEnumerator();
                                    while (itr.MoveNext())
                                    {
                                        oc.addConstraint((IConstraint) itr.Current);
                                    }
                                    list.Add(oc);
                                    alpha.Clear();
                                    exp = null;
                                    break;

                                default:
                                    jj_la1[48] = jj_gen;
                                    jj_consume_token(- 1);
                                    throw new ParseException();
                            }
                        }
                        break;
                }
            }
        }

        public void templatePatterns(IList list)
        {
            Token exp = null;
            jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
            exp = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
            propertyType(list, exp);
            jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
            exp = null;
        }

        public void propertyType(IList list, Token identifier)
        {
            Token id = null;
            Object body = null;
            Token body2 = null;
            bool bval = false;
            LiteralConstraint vc;
            BoundConstraint bc;
            OrLiteralConstraint orc;
            AndLiteralConstraint andc;
            //UPGRADE_TODO: Field java.util was not converted. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1095"'
            IList andor = new ArrayList();
            MultiValue mv = null;
            if (jj_2_26(2147483647))
            {
                predicateFunc(list, identifier);
            }
            else if (jj_2_27(2147483647))
            {
                body2 = jj_consume_token(CLIPSParserConstants_Fields.BIND4);
                if (body2 != null)
                {
                    bc = new BoundConstraint();
                    bc.Name = identifier.image;
                    bc.Value = body2.image.Substring(2);
                    bc.IsMultislot = true;
                    list.Add(bc);
                }
            }
            else if (jj_2_28(2147483647))
            {
                body2 = jj_consume_token(CLIPSParserConstants_Fields.BIND);
                if (body2 != null)
                {
                    bc = new BoundConstraint();
                    bc.Name = identifier.image;
                    bc.Value = body2.image.Substring(1);
                    list.Add(bc);
                }
            }
            else if (jj_2_29(2147483647))
            {
                jj_consume_token(CLIPSParserConstants_Fields.TILDA);
                body2 = jj_consume_token(CLIPSParserConstants_Fields.BIND);
                if (body2 != null)
                {
                    bc = new BoundConstraint();
                    bc.Name = identifier.image;
                    bc.Value = body2.image.Substring(1);
                    bc.Negated = true;
                    list.Add(bc);
                }
            }
            else if (jj_2_30(2147483647))
            {
                body = typeExpr();
                while (true)
                {
                    jj_consume_token(CLIPSParserConstants_Fields.OR2);
                    orType(andor);
                    switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                    {
                        case CLIPSParserConstants_Fields.OR2:
                            ;
                            break;

                        default:
                            jj_la1[49] = jj_gen;
                            //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                            goto label_24_brk;
                    }
                }
                //UPGRADE_NOTE: Label 'label_24_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                label_24_brk:
                ;

                if (body != null)
                {
                    orc = new OrLiteralConstraint();
                    orc.Name = identifier.image;
                    mv = new MultiValue(body);
                    orc.addValue(mv);
                    orc.addValues(andor);
                    list.Add(orc);
                }
            }
            else if (jj_2_31(2147483647))
            {
                jj_consume_token(CLIPSParserConstants_Fields.TILDA);
                body = typeExpr();
                while (true)
                {
                    jj_consume_token(CLIPSParserConstants_Fields.OR2);
                    orType(andor);
                    switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                    {
                        case CLIPSParserConstants_Fields.OR2:
                            ;
                            break;

                        default:
                            jj_la1[50] = jj_gen;
                            //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                            goto label_25_brk;
                    }
                }
                //UPGRADE_NOTE: Label 'label_25_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                label_25_brk:
                ;

                if (body != null)
                {
                    orc = new OrLiteralConstraint();
                    orc.Name = identifier.image;
                    mv = new MultiValue(body);
                    mv.Negated = true;
                    orc.addValue(mv);
                    orc.addValues(andor);
                    list.Add(orc);
                }
            }
            else if (jj_2_32(2147483647))
            {
                body = typeExpr();
                while (true)
                {
                    jj_consume_token(CLIPSParserConstants_Fields.AND2);
                    andType(andor);
                    switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                    {
                        case CLIPSParserConstants_Fields.AND2:
                            ;
                            break;

                        default:
                            jj_la1[51] = jj_gen;
                            //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                            goto label_26_brk;
                    }
                }
                //UPGRADE_NOTE: Label 'label_26_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                label_26_brk:
                ;

                if (body != null)
                {
                    andc = new AndLiteralConstraint();
                    andc.Name = identifier.image;
                    mv = new MultiValue(body);
                    andc.addValue(mv);
                    andc.addValues(andor);
                    list.Add(andc);
                }
            }
            else if (jj_2_33(2147483647))
            {
                jj_consume_token(CLIPSParserConstants_Fields.TILDA);
                body = typeExpr();
                while (true)
                {
                    jj_consume_token(CLIPSParserConstants_Fields.AND2);
                    andType(andor);
                    switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                    {
                        case CLIPSParserConstants_Fields.AND2:
                            ;
                            break;

                        default:
                            jj_la1[52] = jj_gen;
                            //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                            goto label_27_brk;
                    }
                }
                //UPGRADE_NOTE: Label 'label_27_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                label_27_brk:
                ;

                if (body != null)
                {
                    andc = new AndLiteralConstraint();
                    andc.Name = identifier.image;
                    mv = new MultiValue(body);
                    mv.Negated = true;
                    andc.addValue(mv);
                    andc.addValues(andor);
                    list.Add(andc);
                }
            }
            else if (jj_2_34(2147483647))
            {
                jj_consume_token(CLIPSParserConstants_Fields.TILDA);
                body = typeExpr();
                if (body != null)
                {
                    vc = new LiteralConstraint();
                    vc.Name = identifier.image;
                    vc.Value = body;
                    vc.Negated = true;
                    list.Add(vc);
                }
            }
            else if (jj_2_35(2147483647))
            {
                id = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
                if (id != null)
                {
                    vc = new LiteralConstraint();
                    vc.Name = identifier.image;
                    vc.Value = id.image;
                    list.Add(vc);
                }
            }
            else if (jj_2_36(2147483647))
            {
                jj_consume_token(CLIPSParserConstants_Fields.TILDA);
                id = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
                if (id != null)
                {
                    vc = new LiteralConstraint();
                    vc.Name = identifier.image;
                    vc.Value = id.image;
                    vc.Negated = true;
                    list.Add(vc);
                }
            }
            else
            {
                switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                {
                    case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                    case CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL:
                    case CLIPSParserConstants_Fields.STRING_LITERAL:
                    case CLIPSParserConstants_Fields.PATH_LITERAL:
                        body = typeExpr();
                        if (body != null)
                        {
                            vc = new LiteralConstraint();
                            vc.Name = identifier.image;
                            vc.Value = body;
                            list.Add(vc);
                        }
                        break;

                    case CLIPSParserConstants_Fields.TRUE:
                    case CLIPSParserConstants_Fields.TRUE2:
                    case CLIPSParserConstants_Fields.FALSE:
                    case CLIPSParserConstants_Fields.FALSE2:
                        bval = trueFalse();
                        vc = new LiteralConstraint();
                        vc.Name = identifier.image;
                        vc.Value = bval;
                        list.Add(vc);
                        break;

                    default:
                        jj_la1[53] = jj_gen;
                        jj_consume_token(- 1);
                        throw new ParseException();
                }
            }
        }

        public void andType(IList list)
        {
            Token body = null;
            Object val = null;
            MultiValue mv = null;
            if (jj_2_37(2147483647))
            {
                body = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
                if (body != null)
                {
                    mv = new MultiValue(body.image);
                    list.Add(mv);
                }
            }
            else if (jj_2_38(2147483647))
            {
                jj_consume_token(CLIPSParserConstants_Fields.TILDA);
                val = typeExpr();
                if (val != null)
                {
                    mv = new MultiValue(val, true);
                    list.Add(mv);
                }
            }
            else
            {
                switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                {
                    case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                    case CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL:
                    case CLIPSParserConstants_Fields.STRING_LITERAL:
                    case CLIPSParserConstants_Fields.PATH_LITERAL:
                        val = typeExpr();
                        if (val != null)
                        {
                            mv = new MultiValue(val);
                            list.Add(mv);
                        }
                        break;

                    default:
                        jj_la1[54] = jj_gen;
                        jj_consume_token(- 1);
                        throw new ParseException();
                }
            }
        }

        public void orType(IList list)
        {
            Token body = null;
            Object val = null;
            MultiValue mv = null;
            if (jj_2_39(2147483647))
            {
                body = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
                if (body != null)
                {
                    mv = new MultiValue(body.image);
                    list.Add(mv);
                }
            }
            else if (jj_2_40(2147483647))
            {
                jj_consume_token(CLIPSParserConstants_Fields.TILDA);
                val = typeExpr();
                if (val != null)
                {
                    mv = new MultiValue(val, true);
                    list.Add(mv);
                }
            }
            else
            {
                switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                {
                    case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                    case CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL:
                    case CLIPSParserConstants_Fields.STRING_LITERAL:
                    case CLIPSParserConstants_Fields.PATH_LITERAL:
                        val = typeExpr();
                        if (val != null)
                        {
                            mv = new MultiValue(val);
                            list.Add(mv);
                        }
                        break;

                    default:
                        jj_la1[55] = jj_gen;
                        jj_consume_token(- 1);
                        throw new ParseException();
                }
            }
        }

        public void predicateFunc(IList list, Token identifier)
        {
            Token varname = null;
            String func = null;
            IList params_Renamed = new ArrayList();
            Token bind = null;
            Token val = null;
            varname = jj_consume_token(CLIPSParserConstants_Fields.BIND2);
            jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
            func = functionName();
            bind = jj_consume_token(CLIPSParserConstants_Fields.BIND);
            actionParams(params_Renamed);
            jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
            PredicateConstraint predc = new PredicateConstraint();
            predc.Name = identifier.image;
            predc.VariableName = varname.image.Substring(1, (varname.image.Length - 2) - (1));
            predc.FunctionName = func;
            BoundParam bp = new BoundParam();
            bp.VariableName = bind.image;
            predc.addParameter(bp);
            predc.addParameters(params_Renamed);
            list.Add(predc);
        }

        public String functionName()
        {
            Token fname = null;
            switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
            {
                case CLIPSParserConstants_Fields.IDENTIFIER:
                    fname = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
                    {
                        if (true)
                            return fname.image;
                    }
                    break;

                case CLIPSParserConstants_Fields.PLUS:
                case CLIPSParserConstants_Fields.MINUS:
                case CLIPSParserConstants_Fields.MULTIPLY:
                case CLIPSParserConstants_Fields.DIVIDE:
                case CLIPSParserConstants_Fields.GT1:
                case CLIPSParserConstants_Fields.GT2:
                case CLIPSParserConstants_Fields.LT1:
                case CLIPSParserConstants_Fields.LT2:
                case CLIPSParserConstants_Fields.EQ1:
                case CLIPSParserConstants_Fields.EQ2:
                case CLIPSParserConstants_Fields.LE1:
                case CLIPSParserConstants_Fields.LE2:
                case CLIPSParserConstants_Fields.GE1:
                case CLIPSParserConstants_Fields.GE2:
                    switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                    {
                        case CLIPSParserConstants_Fields.PLUS:
                            fname = jj_consume_token(CLIPSParserConstants_Fields.PLUS);
                            break;

                        case CLIPSParserConstants_Fields.MINUS:
                            fname = jj_consume_token(CLIPSParserConstants_Fields.MINUS);
                            break;

                        case CLIPSParserConstants_Fields.MULTIPLY:
                            fname = jj_consume_token(CLIPSParserConstants_Fields.MULTIPLY);
                            break;

                        case CLIPSParserConstants_Fields.DIVIDE:
                            fname = jj_consume_token(CLIPSParserConstants_Fields.DIVIDE);
                            break;

                        case CLIPSParserConstants_Fields.GT1:
                            fname = jj_consume_token(CLIPSParserConstants_Fields.GT1);
                            break;

                        case CLIPSParserConstants_Fields.GT2:
                            fname = jj_consume_token(CLIPSParserConstants_Fields.GT2);
                            break;

                        case CLIPSParserConstants_Fields.LT1:
                            fname = jj_consume_token(CLIPSParserConstants_Fields.LT1);
                            break;

                        case CLIPSParserConstants_Fields.LT2:
                            fname = jj_consume_token(CLIPSParserConstants_Fields.LT2);
                            break;

                        case CLIPSParserConstants_Fields.EQ1:
                            fname = jj_consume_token(CLIPSParserConstants_Fields.EQ1);
                            break;

                        case CLIPSParserConstants_Fields.EQ2:
                            fname = jj_consume_token(CLIPSParserConstants_Fields.EQ2);
                            break;

                        case CLIPSParserConstants_Fields.LE1:
                            fname = jj_consume_token(CLIPSParserConstants_Fields.LE1);
                            break;

                        case CLIPSParserConstants_Fields.LE2:
                            fname = jj_consume_token(CLIPSParserConstants_Fields.LE2);
                            break;

                        case CLIPSParserConstants_Fields.GE1:
                            fname = jj_consume_token(CLIPSParserConstants_Fields.GE1);
                            break;

                        case CLIPSParserConstants_Fields.GE2:
                            fname = jj_consume_token(CLIPSParserConstants_Fields.GE2);
                            break;

                        default:
                            jj_la1[56] = jj_gen;
                            jj_consume_token(- 1);
                            throw new ParseException();
                    }
                    {
                        if (true)
                            return fname.image;
                    }
                    break;

                default:
                    jj_la1[57] = jj_gen;
                    jj_consume_token(- 1);
                    throw new ParseException();
            }
            throw new ApplicationException("Missing return statement in function");
        }

        public void arrow()
        {
            Token exp;
            exp = jj_consume_token(CLIPSParserConstants_Fields.ARROW);
            exp = null;
        }

        public void ruleActions(IList list)
        {
            switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
            {
                case CLIPSParserConstants_Fields.LBRACE:
                    while (true)
                    {
                        jj_consume_token(CLIPSParserConstants_Fields.LBRACE);
                        ruleAction(list);
                        jj_consume_token(CLIPSParserConstants_Fields.RBRACE);
                        switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
                        {
                            case CLIPSParserConstants_Fields.LBRACE:
                                ;
                                break;

                            default:
                                jj_la1[58] = jj_gen;
                                //UPGRADE_NOTE: Labeled break statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1012"'
                                goto label_28_brk;
                        }
                    }
                    //UPGRADE_NOTE: Label 'label_28_brk' was added. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1011"'
                    label_28_brk:
                    ;

                    break;

                default:
                    jj_la1[59] = jj_gen;
                    ;
                    break;
            }
        }

        public void ruleAction(IList list)
        {
            Object exp;
            exp = expr();
            list.Add(exp);
        }

        public void actionParams(IList list)
        {
            Object exp;
            ValueParam vp = null;
            switch ((jj_ntk_Renamed_Field == - 1) ? jj_ntk() : jj_ntk_Renamed_Field)
            {
                case CLIPSParserConstants_Fields.BIND:
                    exp = jj_consume_token(CLIPSParserConstants_Fields.BIND);
                    if (exp is Token)
                    {
                        BoundParam bp = new BoundParam();
                        bp.VariableName = ((Token) exp).image.Substring(1);
                        list.Add(bp);
                    }
                    break;

                case CLIPSParserConstants_Fields.INTEGER_LITERAL:
                case CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL:
                case CLIPSParserConstants_Fields.STRING_LITERAL:
                case CLIPSParserConstants_Fields.PATH_LITERAL:
                    exp = typeExpr();
                    vp = new ValueParam();
                    if (exp is Token)
                    {
                        vp.Value = ((Token) exp).image;
                    }
                    else
                    {
                        vp.Value = exp;
                    }
                    if (exp is Int64)
                    {
                        vp.ValueType = Constants.LONG_PRIM_TYPE;
                    }
                    else if (exp is Single)
                    {
                        vp.ValueType = Constants.DOUBLE_PRIM_TYPE;
                    }
                    else if (exp is String)
                    {
                        vp.ValueType = Constants.STRING_TYPE;
                    }
                    list.Add(vp);
                    break;

                case CLIPSParserConstants_Fields.IDENTIFIER:
                    exp = jj_consume_token(CLIPSParserConstants_Fields.IDENTIFIER);
                    vp = new ValueParam();
                    vp.ValueType = Constants.STRING_TYPE;
                    if (exp is Token)
                    {
                        vp.Value = ((Token) exp).image;
                    }
                    else
                    {
                        vp.Value = exp;
                    }
                    list.Add(vp);
                    break;

                default:
                    jj_la1[60] = jj_gen;
                    jj_consume_token(- 1);
                    throw new ParseException();
            }
        }

        private bool jj_2_1(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_1();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(0, xla);
            }
        }

        private bool jj_2_2(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_2();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(1, xla);
            }
        }

        private bool jj_2_3(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_3();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(2, xla);
            }
        }

        private bool jj_2_4(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_4();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(3, xla);
            }
        }

        private bool jj_2_5(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_5();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(4, xla);
            }
        }

        private bool jj_2_6(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_6();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(5, xla);
            }
        }

        private bool jj_2_7(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_7();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(6, xla);
            }
        }

        private bool jj_2_8(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_8();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(7, xla);
            }
        }

        private bool jj_2_9(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_9();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(8, xla);
            }
        }

        private bool jj_2_10(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_10();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(9, xla);
            }
        }

        private bool jj_2_11(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_11();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(10, xla);
            }
        }

        private bool jj_2_12(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_12();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(11, xla);
            }
        }

        private bool jj_2_13(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_13();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(12, xla);
            }
        }

        private bool jj_2_14(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_14();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(13, xla);
            }
        }

        private bool jj_2_15(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_15();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(14, xla);
            }
        }

        private bool jj_2_16(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_16();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(15, xla);
            }
        }

        private bool jj_2_17(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_17();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(16, xla);
            }
        }

        private bool jj_2_18(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_18();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(17, xla);
            }
        }

        private bool jj_2_19(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_19();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(18, xla);
            }
        }

        private bool jj_2_20(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_20();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(19, xla);
            }
        }

        private bool jj_2_21(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_21();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(20, xla);
            }
        }

        private bool jj_2_22(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_22();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(21, xla);
            }
        }

        private bool jj_2_23(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_23();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(22, xla);
            }
        }

        private bool jj_2_24(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_24();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(23, xla);
            }
        }

        private bool jj_2_25(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_25();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(24, xla);
            }
        }

        private bool jj_2_26(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_26();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(25, xla);
            }
        }

        private bool jj_2_27(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_27();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(26, xla);
            }
        }

        private bool jj_2_28(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_28();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(27, xla);
            }
        }

        private bool jj_2_29(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_29();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(28, xla);
            }
        }

        private bool jj_2_30(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_30();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(29, xla);
            }
        }

        private bool jj_2_31(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_31();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(30, xla);
            }
        }

        private bool jj_2_32(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_32();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(31, xla);
            }
        }

        private bool jj_2_33(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_33();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(32, xla);
            }
        }

        private bool jj_2_34(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_34();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(33, xla);
            }
        }

        private bool jj_2_35(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_35();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(34, xla);
            }
        }

        private bool jj_2_36(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_36();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(35, xla);
            }
        }

        private bool jj_2_37(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_37();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(36, xla);
            }
        }

        private bool jj_2_38(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_38();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(37, xla);
            }
        }

        private bool jj_2_39(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_39();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(38, xla);
            }
        }

        private bool jj_2_40(int xla)
        {
            jj_la = xla;
            jj_lastpos = jj_scanpos = token;
            try
            {
                return !jj_3_40();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                jj_save(39, xla);
            }
        }

        private bool jj_3_7()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.BIND3))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.BIND3))
                return true;
            return false;
        }

        private bool jj_3_14()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.LBRACE))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.SALIENCE))
                return true;
            return false;
        }

        private bool jj_3_6()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.BIND))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.BIND))
                return true;
            return false;
        }

        private bool jj_3_36()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.TILDA))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.IDENTIFIER))
                return true;
            return false;
        }

        private bool jj_3_28()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.BIND))
                return true;
            return false;
        }

        private bool jj_3_5()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.FLOATING_POINT_LITERAL))
                return true;
            return false;
        }

        private bool jj_3_4()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.INTEGER_LITERAL))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.INTEGER_LITERAL))
                return true;
            return false;
        }

        private bool jj_3_35()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.IDENTIFIER))
                return true;
            return false;
        }

        private bool jj_3_27()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.BIND4))
                return true;
            return false;
        }

        private bool jj_3_1()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.LBRACE))
                return true;
            return false;
        }

        private bool jj_3_3()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.STRING_LITERAL))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.STRING_LITERAL))
                return true;
            return false;
        }

        private bool jj_3_26()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.BIND2))
                return true;
            return false;
        }

        private bool jj_3_40()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.TILDA))
                return true;
            Token xsp;
            xsp = jj_scanpos;
            if (jj_scan_token(14))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(11))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(12))
                        return true;
                }
            }
            return false;
        }

        private bool jj_3_2()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.IDENTIFIER))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.IDENTIFIER))
                return true;
            return false;
        }

        private bool jj_3_34()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.TILDA))
                return true;
            Token xsp;
            xsp = jj_scanpos;
            if (jj_scan_token(14))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(11))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(12))
                        return true;
                }
            }
            return false;
        }

        private bool jj_3_39()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.IDENTIFIER))
                return true;
            return false;
        }

        private bool jj_3_11()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.LBRACE))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.DEFAULTVALUE))
                return true;
            return false;
        }

        private bool jj_3_25()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.TEMPORAL))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.LBRACE))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.RELATIVETIME))
                return true;
            return false;
        }

        private bool jj_3_12()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.STRING_LITERAL))
                return true;
            return false;
        }

        private bool jj_3_33()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.TILDA))
                return true;
            Token xsp;
            xsp = jj_scanpos;
            if (jj_scan_token(14))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(11))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(12))
                        return true;
                }
            }
            if (jj_scan_token(CLIPSParserConstants_Fields.AND2))
                return true;
            return false;
        }

        private bool jj_3_10()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.LBRACE))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.TYPEDEF))
                return true;
            return false;
        }

        private bool jj_3_22()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.LBRACE))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.TEMPORALACTIVATION))
                return true;
            return false;
        }

        private bool jj_3_32()
        {
            Token xsp;
            xsp = jj_scanpos;
            if (jj_scan_token(14))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(11))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(12))
                        return true;
                }
            }
            if (jj_scan_token(CLIPSParserConstants_Fields.AND2))
                return true;
            return false;
        }

        private bool jj_3_38()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.TILDA))
                return true;
            Token xsp;
            xsp = jj_scanpos;
            if (jj_scan_token(14))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(11))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(12))
                        return true;
                }
            }
            return false;
        }

        private bool jj_3_13()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.LBRACE))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.DECLARE))
                return true;
            return false;
        }

        private bool jj_3_21()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.LBRACE))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.NOAGENDA))
                return true;
            return false;
        }

        private bool jj_3_20()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.LBRACE))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.CHAININGDIRECTION))
                return true;
            return false;
        }

        private bool jj_3_37()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.IDENTIFIER))
                return true;
            return false;
        }

        private bool jj_3_24()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.NOTCE))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.LBRACE))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.IDENTIFIER))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.LBRACE))
                return true;
            return false;
        }

        private bool jj_3_9()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.LBRACE))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.MULTISLOT))
                return true;
            return false;
        }

        private bool jj_3_19()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.LBRACE))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.EXPIRATION))
                return true;
            return false;
        }

        private bool jj_3_31()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.TILDA))
                return true;
            Token xsp;
            xsp = jj_scanpos;
            if (jj_scan_token(14))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(11))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(12))
                        return true;
                }
            }
            if (jj_scan_token(CLIPSParserConstants_Fields.OR2))
                return true;
            return false;
        }

        private bool jj_3_18()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.LBRACE))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.EFFECTIVE))
                return true;
            return false;
        }

        private bool jj_3_8()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.LBRACE))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.SLOT))
                return true;
            return false;
        }

        private bool jj_3_17()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.LBRACE))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.REMEMBERMATCH))
                return true;
            return false;
        }

        private bool jj_3_30()
        {
            Token xsp;
            xsp = jj_scanpos;
            if (jj_scan_token(14))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(11))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(12))
                        return true;
                }
            }
            if (jj_scan_token(CLIPSParserConstants_Fields.OR2))
                return true;
            return false;
        }

        private bool jj_3_16()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.LBRACE))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.RULEVERSION))
                return true;
            return false;
        }

        private bool jj_3_15()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.LBRACE))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.AUTOFOCUS))
                return true;
            return false;
        }

        private bool jj_3_23()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.BIND))
                return true;
            return false;
        }

        private bool jj_3_29()
        {
            if (jj_scan_token(CLIPSParserConstants_Fields.TILDA))
                return true;
            if (jj_scan_token(CLIPSParserConstants_Fields.BIND))
                return true;
            return false;
        }

        private static void jj_la1_0()
        {
            jj_la1_0_Renamed_Field = new int[] {0x68201, 0x200, 0x5800, 0x200, 0x200, 0x8800, 0x6da00, 0x6da00, 0x68000, 0x68000, (int) SupportClass.Identity(0xa0c80000), 0x6da00, 0x0, 0x6da00, 0x6da00, 0x6da00, (int) SupportClass.Identity(0xa0c80000), 0x6d800, 0x68000, 0x200, 0x6d800, 0x2d800, 0x2d800, 0x2d800, 0x2d800, 0x2d800, 0x2d800, 0x6d800, 0x6d800, 0x2d800, 0x200, 0x100000, 0x8200, 0x8200, 0x1800, 0x0, 0x200, 0x200, 0x200, 0x200, 0x200, 0x200, 0x200, 0x200, 0x200, 0x200, 0x200, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5800, 0x5800, 0x5800, 0x0, 0x0, 0x200, 0x200, 0xd800};
        }

        private static void jj_la1_1()
        {
            jj_la1_1_Renamed_Field = new int[] {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2040070, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2040070, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4002c200, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x800000, 0x400, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
        }

        private static void jj_la1_2()
        {
            jj_la1_2_Renamed_Field = new int[] {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x360, 0x360, 0x0, 0x0, 0xfffc000, 0x360, 0xfffc000, 0x360, 0x360, 0x360, 0xfffc000, 0x360, 0x0, 0x0, 0x360, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x360, 0x360, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x360, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40000018, 0x0, 0x0, (int) SupportClass.Identity(0x80000000), (int) SupportClass.Identity(0x80000000), 0x360, 0x0, 0x0, 0xfffc000, 0xfffc000, 0x0, 0x0, 0x0};
        }

        private static void jj_la1_3()
        {
            jj_la1_3_Renamed_Field = new int[] {0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x48, 0x48, 0x0, 0x0, 0x8, 0x48, 0x0, 0x48, 0x48, 0x48, 0x8, 0x48, 0x0, 0x0, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x2, 0x2, 0x0, 0x0, 0x40, 0x40, 0x40, 0x0, 0x8, 0x0, 0x0, 0x48};
        }

        //UPGRADE_NOTE: Final was removed from the declaration of 'jj_2_rtns '. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1003"'
        //UPGRADE_NOTE: The initialization of  'jj_2_rtns' was moved to method 'InitBlock'. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1005"'

        public virtual void ReInit(Stream stream)
        {
            jj_input_stream.ReInit(stream, 1, 1);
            token_source.ReInit(jj_input_stream);
            token = new Token();
            jj_ntk_Renamed_Field = - 1;
            jj_gen = 0;
            for (int i = 0; i < 61; i++)
                jj_la1[i] = - 1;
            for (int i = 0; i < jj_2_rtns.Length; i++)
                jj_2_rtns[i] = new JJCalls();
        }

        public virtual void ReInit(StreamReader stream)
        {
            jj_input_stream.ReInit(stream, 1, 1);
            token_source.ReInit(jj_input_stream);
            token = new Token();
            jj_ntk_Renamed_Field = - 1;
            jj_gen = 0;
            for (int i = 0; i < 61; i++)
                jj_la1[i] = - 1;
            for (int i = 0; i < jj_2_rtns.Length; i++)
                jj_2_rtns[i] = new JJCalls();
        }

        public virtual void ReInit(CLIPSParserTokenManager tm)
        {
            token_source = tm;
            token = new Token();
            jj_ntk_Renamed_Field = - 1;
            jj_gen = 0;
            for (int i = 0; i < 61; i++)
                jj_la1[i] = - 1;
            for (int i = 0; i < jj_2_rtns.Length; i++)
                jj_2_rtns[i] = new JJCalls();
        }

        private Token jj_consume_token(int kind)
        {
            Token oldToken;
            if ((oldToken = token).next != null)
                token = token.next;
            else
                token = token.next = token_source.NextToken;
            jj_ntk_Renamed_Field = - 1;
            if (token.kind == kind)
            {
                jj_gen++;
                if (++jj_gc > 100)
                {
                    jj_gc = 0;
                    for (int i = 0; i < jj_2_rtns.Length; i++)
                    {
                        JJCalls c = jj_2_rtns[i];
                        while (c != null)
                        {
                            if (c.gen < jj_gen)
                                c.first = null;
                            c = c.next;
                        }
                    }
                }
                return token;
            }
            token = oldToken;
            jj_kind = kind;
            throw generateParseException();
        }

        private bool jj_scan_token(int kind)
        {
            if (jj_scanpos == jj_lastpos)
            {
                jj_la--;
                if (jj_scanpos.next == null)
                {
                    jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.NextToken;
                }
                else
                {
                    jj_lastpos = jj_scanpos = jj_scanpos.next;
                }
            }
            else
            {
                jj_scanpos = jj_scanpos.next;
            }
            if (jj_rescan)
            {
                int i = 0;
                Token tok = token;
                while (tok != null && tok != jj_scanpos)
                {
                    i++;
                    tok = tok.next;
                }
                if (tok != null)
                    jj_add_error_token(kind, i);
            }
            if (jj_scanpos.kind != kind)
                return true;
            if (jj_la == 0 && jj_scanpos == jj_lastpos)
                throw jj_ls;
            return false;
        }


        public Token getToken(int index)
        {
            Token t = lookingAhead ? jj_scanpos : token;
            for (int i = 0; i < index; i++)
            {
                if (t.next != null)
                    t = t.next;
                else
                    t = t.next = token_source.NextToken;
            }
            return t;
        }

        private int jj_ntk()
        {
            if ((jj_nt = token.next) == null)
                return (jj_ntk_Renamed_Field = (token.next = token_source.NextToken).kind);
            else
                return (jj_ntk_Renamed_Field = jj_nt.kind);
        }

        //UPGRADE_NOTE: The initialization of  'jj_expentries' was moved to method 'InitBlock'. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1005"'

        private void jj_add_error_token(int kind, int pos)
        {
            if (pos >= 100)
                return;
            if (pos == jj_endpos + 1)
            {
                jj_lasttokens[jj_endpos++] = kind;
            }
            else if (jj_endpos != 0)
            {
                jj_expentry = new int[jj_endpos];
                for (int i = 0; i < jj_endpos; i++)
                {
                    jj_expentry[i] = jj_lasttokens[i];
                }
                bool exists = false;
                //UPGRADE_TODO: Method 'java.util.Enumeration.hasMoreElements' was converted to 'System.Collections.IEnumerator.MoveNext' which has a different behavior. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1073"'
                for (System.Collections.IEnumerator e = jj_expentries.GetEnumerator(); e.MoveNext();)
                {
                    //UPGRADE_TODO: Method 'java.util.Enumeration.nextElement' was converted to 'System.Collections.IEnumerator.Current' which has a different behavior. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1073"'
                    int[] oldentry = (int[]) (e.Current);
                    if (oldentry.Length == jj_expentry.Length)
                    {
                        exists = true;
                        for (int i = 0; i < jj_expentry.Length; i++)
                        {
                            if (oldentry[i] != jj_expentry[i])
                            {
                                exists = false;
                                break;
                            }
                        }
                        if (exists)
                            break;
                    }
                }
                if (!exists)
                    jj_expentries.Add(jj_expentry);
                if (pos != 0)
                    jj_lasttokens[(jj_endpos = pos) - 1] = kind;
            }
        }

        public virtual ParseException generateParseException()
        {
            ArrayList temp_arraylist;
            temp_arraylist = jj_expentries;
            temp_arraylist.RemoveRange(0, temp_arraylist.Count);
            bool[] la1tokens = new bool[103];
            for (int i = 0; i < 103; i++)
            {
                la1tokens[i] = false;
            }
            if (jj_kind >= 0)
            {
                la1tokens[jj_kind] = true;
                jj_kind = - 1;
            }
            for (int i = 0; i < 61; i++)
            {
                if (jj_la1[i] == jj_gen)
                {
                    for (int j = 0; j < 32; j++)
                    {
                        if ((jj_la1_0_Renamed_Field[i] & (1 << j)) != 0)
                        {
                            la1tokens[j] = true;
                        }
                        if ((jj_la1_1_Renamed_Field[i] & (1 << j)) != 0)
                        {
                            la1tokens[32 + j] = true;
                        }
                        if ((jj_la1_2_Renamed_Field[i] & (1 << j)) != 0)
                        {
                            la1tokens[64 + j] = true;
                        }
                        if ((jj_la1_3_Renamed_Field[i] & (1 << j)) != 0)
                        {
                            la1tokens[96 + j] = true;
                        }
                    }
                }
            }
            for (int i = 0; i < 103; i++)
            {
                if (la1tokens[i])
                {
                    jj_expentry = new int[1];
                    jj_expentry[0] = i;
                    jj_expentries.Add(jj_expentry);
                }
            }
            jj_endpos = 0;
            jj_rescan_token();
            jj_add_error_token(0, 0);
            int[][] exptokseq = new int[jj_expentries.Count][];
            for (int i = 0; i < jj_expentries.Count; i++)
            {
                exptokseq[i] = (int[]) jj_expentries[i];
            }
            return new ParseException(token, exptokseq, CLIPSParserConstants_Fields.tokenImage);
        }

        public void enable_tracing()
        {
        }

        public void disable_tracing()
        {
        }

        private void jj_rescan_token()
        {
            jj_rescan = true;
            for (int i = 0; i < 40; i++)
            {
                JJCalls p = jj_2_rtns[i];
                do
                {
                    if (p.gen > jj_gen)
                    {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i)
                        {
                            case 0:
                                jj_3_1();
                                break;

                            case 1:
                                jj_3_2();
                                break;

                            case 2:
                                jj_3_3();
                                break;

                            case 3:
                                jj_3_4();
                                break;

                            case 4:
                                jj_3_5();
                                break;

                            case 5:
                                jj_3_6();
                                break;

                            case 6:
                                jj_3_7();
                                break;

                            case 7:
                                jj_3_8();
                                break;

                            case 8:
                                jj_3_9();
                                break;

                            case 9:
                                jj_3_10();
                                break;

                            case 10:
                                jj_3_11();
                                break;

                            case 11:
                                jj_3_12();
                                break;

                            case 12:
                                jj_3_13();
                                break;

                            case 13:
                                jj_3_14();
                                break;

                            case 14:
                                jj_3_15();
                                break;

                            case 15:
                                jj_3_16();
                                break;

                            case 16:
                                jj_3_17();
                                break;

                            case 17:
                                jj_3_18();
                                break;

                            case 18:
                                jj_3_19();
                                break;

                            case 19:
                                jj_3_20();
                                break;

                            case 20:
                                jj_3_21();
                                break;

                            case 21:
                                jj_3_22();
                                break;

                            case 22:
                                jj_3_23();
                                break;

                            case 23:
                                jj_3_24();
                                break;

                            case 24:
                                jj_3_25();
                                break;

                            case 25:
                                jj_3_26();
                                break;

                            case 26:
                                jj_3_27();
                                break;

                            case 27:
                                jj_3_28();
                                break;

                            case 28:
                                jj_3_29();
                                break;

                            case 29:
                                jj_3_30();
                                break;

                            case 30:
                                jj_3_31();
                                break;

                            case 31:
                                jj_3_32();
                                break;

                            case 32:
                                jj_3_33();
                                break;

                            case 33:
                                jj_3_34();
                                break;

                            case 34:
                                jj_3_35();
                                break;

                            case 35:
                                jj_3_36();
                                break;

                            case 36:
                                jj_3_37();
                                break;

                            case 37:
                                jj_3_38();
                                break;

                            case 38:
                                jj_3_39();
                                break;

                            case 39:
                                jj_3_40();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            }
            jj_rescan = false;
        }

        private void jj_save(int index, int xla)
        {
            JJCalls p = jj_2_rtns[index];
            while (p.gen > jj_gen)
            {
                if (p.next == null)
                {
                    p = p.next = new JJCalls();
                    break;
                }
                p = p.next;
            }
            p.gen = jj_gen + xla - jj_la;
            p.first = token;
            p.arg = xla;
        }

        #region Nested type: JJCalls

        private sealed class JJCalls
        {
            internal int arg;
            internal Token first;
            internal int gen;
            internal JJCalls next;
        }

        #endregion

        #region Nested type: LookaheadSuccess

        private sealed class LookaheadSuccess : ApplicationException
        {
        }

        #endregion
    }
}