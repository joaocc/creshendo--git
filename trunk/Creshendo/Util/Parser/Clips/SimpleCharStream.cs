/* Generated By:JavaCC: Do not edit this line. SimpleCharStream.java Version 3.0 */
using System;
using System.IO;

namespace Creshendo.Util.Parser.Clips
{
    /// <summary> An implementation of interface CharStream, where the stream is assumed to
    /// contain only ASCII characters (without unicode processing).
    /// </summary>
    public class SimpleCharStream
    {
        public const bool staticFlag = false;
        internal int available;
        protected internal int[] bufcolumn;
        protected internal char[] buffer;
        protected internal int[] bufline;
        public int bufpos = - 1;
        internal int bufsize;

        protected internal int column = 0;
        protected internal int inBuf = 0;
        protected internal StreamReader inputStream;
        protected internal int line = 1;
        protected internal int maxNextCharInd = 0;

        protected internal bool prevCharIsCR = false;
        protected internal bool prevCharIsLF = false;
        internal int tokenBegin;

        public SimpleCharStream(StreamReader dstream, int startline, int startcolumn, int buffersize)
        {
            inputStream = dstream;
            line = startline;
            column = startcolumn - 1;

            available = bufsize = buffersize;
            buffer = new char[buffersize];
            bufline = new int[buffersize];
            bufcolumn = new int[buffersize];
        }

        public SimpleCharStream(StreamReader dstream, int startline, int startcolumn) : this(dstream, startline, startcolumn, 4096)
        {
        }

        public SimpleCharStream(StreamReader dstream) : this(dstream, 1, 1, 4096)
        {
        }

        public SimpleCharStream(Stream dstream, int startline, int startcolumn, int buffersize) : this(new StreamReader(dstream), startline, startcolumn, 4096)
        {
        }

        public SimpleCharStream(Stream dstream, int startline, int startcolumn) : this(dstream, startline, startcolumn, 4096)
        {
        }

        public SimpleCharStream(Stream dstream) : this(dstream, 1, 1, 4096)
        {
        }

        /// <deprecated> 
        /// </deprecated>
        public virtual int Column
        {
            get { return bufcolumn[bufpos]; }
        }

        /// <deprecated> 
        /// </deprecated>
       
        public virtual int Line
        {
            get { return bufline[bufpos]; }
        }

        public virtual int EndColumn
        {
            get { return bufcolumn[bufpos]; }
        }

        public virtual int EndLine
        {
            get { return bufline[bufpos]; }
        }

        public virtual int BeginColumn
        {
            get { return bufcolumn[tokenBegin]; }
        }

        public virtual int BeginLine
        {
            get { return bufline[tokenBegin]; }
        }

        protected internal virtual void ExpandBuff(bool wrapAround)
        {
            char[] newbuffer = new char[bufsize + 2048];
            int[] newbufline = new int[bufsize + 2048];
            int[] newbufcolumn = new int[bufsize + 2048];

            //UPGRADE_NOTE: Exception 'java.lang.Throwable' was converted to 'System.Exception' which has different behavior. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1100"'
            try
            {
                if (wrapAround)
                {
                    Array.Copy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
                    Array.Copy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
                    buffer = newbuffer;

                    Array.Copy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
                    Array.Copy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
                    bufline = newbufline;

                    Array.Copy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
                    Array.Copy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
                    bufcolumn = newbufcolumn;

                    maxNextCharInd = (bufpos += (bufsize - tokenBegin));
                }
                else
                {
                    Array.Copy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
                    buffer = newbuffer;

                    Array.Copy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
                    bufline = newbufline;

                    Array.Copy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
                    bufcolumn = newbufcolumn;

                    maxNextCharInd = (bufpos -= tokenBegin);
                }
            }
            catch (Exception t)
            {
                //UPGRADE_TODO: The equivalent in .NET for method 'java.lang.Throwable.getMessage' may return a different value. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1043"'
                throw new ApplicationException(t.Message);
            }


            bufsize += 2048;
            available = bufsize;
            tokenBegin = 0;
        }

        protected internal virtual void FillBuff()
        {
            if (maxNextCharInd == available)
            {
                if (available == bufsize)
                {
                    if (tokenBegin > 2048)
                    {
                        bufpos = maxNextCharInd = 0;
                        available = tokenBegin;
                    }
                    else if (tokenBegin < 0)
                        bufpos = maxNextCharInd = 0;
                    else
                        ExpandBuff(false);
                }
                else if (available > tokenBegin)
                    available = bufsize;
                else if ((tokenBegin - available) < 2048)
                    ExpandBuff(true);
                else
                    available = tokenBegin;
            }

            int i;
            try
            {
                //UPGRADE_TODO: Method 'java.io.Reader.read' was converted to 'System.IO.StreamReader.Read' which has a different behavior. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1073_javaioReaderread_char[]_int_int"'
                if ((i = inputStream.Read(buffer, maxNextCharInd, available - maxNextCharInd)) == - 1)
                {
                    inputStream.Close();
                    throw new IOException();
                }
                else
                    maxNextCharInd += i;
                return;
            }
            catch (IOException e)
            {
                --bufpos;
                backup(0);
                if (tokenBegin == - 1)
                    tokenBegin = bufpos;
                throw e;
            }
        }

        public virtual char BeginToken()
        {
            tokenBegin = - 1;
            char c = readChar();
            tokenBegin = bufpos;

            return c;
        }

        protected internal virtual void UpdateLineColumn(char c)
        {
            column++;

            if (prevCharIsLF)
            {
                prevCharIsLF = false;
                line += (column = 1);
            }
            else if (prevCharIsCR)
            {
                prevCharIsCR = false;
                if (c == '\n')
                {
                    prevCharIsLF = true;
                }
                else
                    line += (column = 1);
            }

            switch (c)
            {
                case '\r':
                    prevCharIsCR = true;
                    break;

                case '\n':
                    prevCharIsLF = true;
                    break;

                case '\t':
                    column--;
                    column += (8 - (column & 7));
                    break;

                default:
                    break;
            }

            bufline[bufpos] = line;
            bufcolumn[bufpos] = column;
        }

        public virtual char readChar()
        {
            if (inBuf > 0)
            {
                --inBuf;

                if (++bufpos == bufsize)
                    bufpos = 0;

                return buffer[bufpos];
            }

            if (++bufpos >= maxNextCharInd)
                FillBuff();

            char c = buffer[bufpos];

            UpdateLineColumn(c);
            return (c);
        }


        public virtual void backup(int amount)
        {
            inBuf += amount;
            if ((bufpos -= amount) < 0)
                bufpos += bufsize;
        }

        public virtual void ReInit(StreamReader dstream, int startline, int startcolumn, int buffersize)
        {
            inputStream = dstream;
            line = startline;
            column = startcolumn - 1;

            if (buffer == null || buffersize != buffer.Length)
            {
                available = bufsize = buffersize;
                buffer = new char[buffersize];
                bufline = new int[buffersize];
                bufcolumn = new int[buffersize];
            }
            prevCharIsLF = prevCharIsCR = false;
            tokenBegin = inBuf = maxNextCharInd = 0;
            bufpos = - 1;
        }

        public virtual void ReInit(StreamReader dstream, int startline, int startcolumn)
        {
            ReInit(dstream, startline, startcolumn, 4096);
        }

        public virtual void ReInit(StreamReader dstream)
        {
            ReInit(dstream, 1, 1, 4096);
        }

        public virtual void ReInit(Stream dstream, int startline, int startcolumn, int buffersize)
        {
            ReInit(new StreamReader(dstream), startline, startcolumn, 4096);
        }

        public virtual void ReInit(Stream dstream)
        {
            ReInit(dstream, 1, 1, 4096);
        }

        public virtual void ReInit(Stream dstream, int startline, int startcolumn)
        {
            ReInit(dstream, startline, startcolumn, 4096);
        }

        public virtual String GetImage()
        {
            if (bufpos >= tokenBegin)
                return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
            else
                return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
        }

        public virtual char[] GetSuffix(int len)
        {
            char[] ret = new char[len];

            if ((bufpos + 1) >= len)
                Array.Copy(buffer, bufpos - len + 1, ret, 0, len);
            else
            {
                Array.Copy(buffer, bufsize - (len - bufpos - 1), ret, 0, len - bufpos - 1);
                Array.Copy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
            }

            return ret;
        }

        public virtual void Done()
        {
            buffer = null;
            bufline = null;
            bufcolumn = null;
        }

        /// <summary> Method to adjust line and column numbers for the start of a token.
        /// </summary>
        public virtual void adjustBeginLineColumn(int newLine, int newCol)
        {
            int start = tokenBegin;
            int len;

            if (bufpos >= tokenBegin)
            {
                len = bufpos - tokenBegin + inBuf + 1;
            }
            else
            {
                len = bufsize - tokenBegin + bufpos + 1 + inBuf;
            }

            int i = 0, j = 0, k = 0;
            int nextColDiff = 0, columnDiff = 0;

            while (i < len && bufline[j = start%bufsize] == bufline[k = ++start%bufsize])
            {
                bufline[j] = newLine;
                nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];
                bufcolumn[j] = newCol + columnDiff;
                columnDiff = nextColDiff;
                i++;
            }

            if (i < len)
            {
                bufline[j] = newLine++;
                bufcolumn[j] = newCol + columnDiff;

                while (i++ < len)
                {
                    if (bufline[j = start%bufsize] != bufline[++start%bufsize])
                        bufline[j] = newLine++;
                    else
                        bufline[j] = newLine;
                }
            }

            line = bufline[j];
            column = bufcolumn[j];
        }
    }
}