/* Generated By:JavaCC: Do not edit this line. CLIPSParserTokenManager.java */
using System;
using System.IO;

namespace Creshendo.Util.Parser.Clips
{
    public class CLIPSParserTokenManager : CLIPSParserConstants
    {
        internal static readonly ulong[] jjbitVec0 = new ulong[] { 0xfffffffffffffffeu, 0xffffffffffffffffu, 0xffffffffffffffffu, 0xffffffffffffffffu };
        internal static readonly ulong[] jjbitVec10 = new ulong[] { 0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L };
        internal static readonly ulong[] jjbitVec11 = new ulong[] { 0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L };
        internal static readonly ulong[] jjbitVec12 = new ulong[] { 0x0L, 0xffc000000000L, 0x0L, 0xff8000000000L };
        internal static readonly ulong[] jjbitVec13 = new ulong[] { 0x0L, 0xffc000000000L, 0x0L, 0x0L };
        internal static readonly ulong[] jjbitVec14 = new ulong[] { 0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L };
        internal static readonly ulong[] jjbitVec15 = new ulong[] { 0x0L, 0x3ffL, 0x0L, 0x0L };
        internal static readonly ulong[] jjbitVec2 = new ulong[] { 0x0L, 0x0L, 0xffffffffffffffffu, 0xffffffffffffffffu };
        internal static readonly ulong[] jjbitVec3 = new ulong[] { 0x1ff00000fffffffeL, 0xffffffffffffc000u, 0xffffffffL, 0x600000000000000L };
        internal static readonly ulong[] jjbitVec4 = new ulong[] { 0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffu };
        internal static readonly ulong[] jjbitVec5 = new ulong[] { 0x0L, 0xffffffffffffffffu,0xffffffffffffffffu, 0xffffffffffffffffu };
        internal static readonly ulong[] jjbitVec6 = new ulong[] { 0xffffffffffffffffu, 0xffffffffffffffffu, 0xffffL, 0x0L };
        internal static readonly ulong[] jjbitVec7 = new ulong[] { 0xffffffffffffffffu, 0xffffffffffffffffu, 0x0L, 0x0L };
        internal static readonly ulong[] jjbitVec8 = new ulong[] { 0x3fffffffffffL, 0x0L, 0x0L, 0x0L };
        internal static readonly ulong[] jjbitVec9 = new ulong[] { 0x1600L, 0x0L, 0x0L, 0x0L };
        public static readonly int[] jjnewLexState = new int[] {- 1, - 1, - 1, - 1, - 1, 1, - 1, - 1, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1};
        internal static readonly int[] jjnextStates = new int[] {11, 12, 14, 6, 7, 9, 31, 32, 33, 38, 39, 3, 4, 16, 17, 36, 37, 40, 41, 44, 46};

        public static readonly String[] jjstrLiteralImages = new String[]
            {
                "", null, null, null, null, null, null, null, null, "\x0028", "\x0029", null, null, null, null, null, null, null, null, "\x0062\0142151\0142151156\0142151156144", "\x0042\0102117\0102117117\0102117117114\0102117117114105\0102117117114105101\0102117117114105101116", "\x0061\0141147\0141147147\0141147147162\0141147147162145\0141147147162145147\0141147147162145147141\0141147147162145147141164\0141147147162145147141164145", "\x0061\0141163\0141163163\0141163163145\0141163163145162\0141163163145162164", "\x0061\0141163\0141163163\0141163163145\0141163163145162\0141163163145162164\014116316314516216455\014116316314516216455164\014116316314516216455164145\014116316314516216455164145155\014116316314516216455164145155160\014116316314516216455164145155160157\014116316314516216455164145155160157162\014116316314516216455164145155160157162141\014116316314516216455164145155160157162141154", "\x0061\0141165\0141165164\0141165164157\014116516415755\014116516415755146\014116516415755146157\014116516415755146157143\014116516415755146157143165\014116516415755146157143165163", "\x0061\0141154\0141154154\0141154154157\0141154154157167\0141154154157167145\0141154154157167145144\014115415415716714514455\014115415415716714514455166\014115415415716714514455166141\014115415415716714514455166141154\014115415415716714514455166141154165\014115415415716714514455166141154165145\014115415415716714514455166141154165145163",
                "\x0063\0143150\0143150141\0143150141151\0143150141151156\0143150141151156151\0143150141151156151156\0143150141151156151156147\014315014115115615115614755\014315014115115615115614755144\014315014115115615115614755144151\014315014115115615115614755144151162\014315014115115615115614755144151162145\014315014115115615115614755144151162145143\014315014115115615115614755144151162145143164\014315014115115615115614755144151162145143164151\014315014115115615115614755144151162145143164151157\014315014115115615115614755144151162145143164151157156", "\x0063\0143157\0143157155\0143157155155\0143157155155141\0143157155155141156\0143157155155141156144", "\x0064\0144145\0144145143\0144145143154\0144145143154141\0144145143154141162\0144145143154141162145", "\x0064\0144145\0144145146\0144145146143\0144145146143154\0144145146143154141\0144145146143154141163\0144145146143154141163163", "\x0064\0144145\0144145146\0144145146146\0144145146146141\0144145146146141143\0144145146146141143164", "\x0064\0144145\0144145146\0144145146146\0144145146146165\0144145146146165156\0144145146146165156143\0144145146146165156143164\0144145146146165156143164151\0144145146146165156143164151157\0144145146146165156143164151157156", "\x0064\0144145\0144145146\0144145146147\0144145146147145\0144145146147145156\0144145146147145156145\0144145146147145156145162\0144145146147145156145162151\0144145146147145156145162151143", "\x0064\0144145\0144145146\0144145146147\0144145146147154\0144145146147154157\0144145146147154157142\0144145146147154157142141\0144145146147154157142141154", "\x0064\0144145\0144145146\0144145146151\0144145146151156\0144145146151156163\0144145146151156163164\0144145146151156163164141\0144145146151156163164141156\0144145146151156163164141156143\0144145146151156163164141156143145", "\x0064\0144145\0144145146\0144145146155\0144145146155145\0144145146155145164\0144145146155145164150\0144145146155145164150157\0144145146155145164150157144",
                "\x0064\0144145\0144145146\0144145146155\0144145146155157\0144145146155157144\0144145146155157144165\0144145146155157144165154\0144145146155157144165154145", "\x0064\0144145\0144145146\0144145146162\0144145146162165\0144145146162165154\0144145146162165154145", "\x0064\0144145\0144145146\0144145146164\0144145146164145\0144145146164145155\0144145146164145155160\0144145146164145155160154\0144145146164145155160154141\0144145146164145155160154141164\0144145146164145155160154141164145", "\x0064\0144145\0144145163\0144145163143\0144145163143162\0144145163143162151\0144145163143162151142\0144145163143162151142145\014414516314316215114214555\014414516314316215114214555143\014414516314316215114214555143154\014414516314316215114214555143154141\014414516314316215114214555143154141163\014414516314316215114214555143154141163163", "\x0064\0144145\0144145146\0144145146141\0144145146141165\0144145146141165154\0144145146141165154164", "\x0044\0104117\0104117125\0104117125102\0104117125102114\0104117125102114105", "\x0065\0145170\0145170151\0145170151163\0145170151163164\0145170151163164163", "\x0065\0145146\0145146146\0145146146145\0145146146145143\0145146146145143164\0145146146145143164151\0145146146145143164151166\0145146146145143164151166145\014514614614514316415116614555\014514614614514316415116614555144\014514614614514316415116614555144141\014514614614514316415116614555144141164\014514614614514316415116614555144141164145", "\x0065\0145170\0145170160\0145170160151\0145170160151162\0145170160151162141\0145170160151162141164\0145170160151162141164151\0145170160151162141164151157\0145170160151162141164151157156\014517016015116214116415115715655\014517016015116214116415115715655144\014517016015116214116415115715655144141\014517016015116214116415115715655144141164\014517016015116214116415115715655144141164145", "\x0066\0146141\0146141143\0146141143164\014614114316455\014614114316455151\014614114316455151156\014614114316455151156144\014614114316455151156144145\014614114316455151156144145170",
                "\x0046\0106114\0106114117\0106114117101\0106114117101124", "\x0049\0111116\0111116124\0111116124105\0111116124105107\0111116124105107105\0111116124105107105122", "\x006C\0154157\0154157147\0154157147151\0154157147151143\0154157147151143141\0154157147151143141154", "\x004C\0114117\0114117116\0114117116107", "\x006D\0155157\0155157144\0155157144151\0155157144151146\0155157144151146171", "\x006D\0155165\0155165154\0155165154164\0155165154164151\0155165154164151163\0155165154164151163154\0155165154164151163154157\0155165154164151163154157164", "\x006E\0156157\015615755\015615755141\015615755141147\015615755141147145\015615755141147145156\015615755141147145156144\015615755141147145156144141", "\x006E\0156157\015615755\015615755154\015615755154157\015615755154157157\015615755154157157160", "\x004E\0116125\0116125115\0116125115102\0116125115102105\0116125115102105122", "\x006E\0156157\0156157164", "\x0072\0162145\0162145155\0162145155145\0162145155145155\0162145155145155142\0162145155145155142145\0162145155145155142145162\016214515514515514214516255\016214515514515514214516255155\016214515514515514214516255155141\016214515514515514214516255155141164\016214515514515514214516255155141164143\016214515514515514214516255155141164143150", "\x0072\0162145\0162145164\0162145164162\0162145164162141\0162145164162141143\0162145164162141143164", "\x0072\0162165\0162165154\0162165154145\016216515414555\016216515414555166\016216515414555166145\016216515414555166145162\016216515414555166145162163\016216515414555166145162163151\016216515414555166145162163151157\016216515414555166145162163151157156", "\x0072\0162145\0162145154\0162145154141\0162145154141164\0162145154141164151\0162145154141164151166\0162145154141164151166145\016214515414116415116614555\016214515414116415116614555164\016214515414116415116614555164151\016214515414116415116614555164151155\016214515414116415116614555164151155145", "\x0073\0163141\0163141154\0163141154151\0163141154151145\0163141154151145156\0163141154151145156143\0163141154151145156143145"
                , "\x0073\0163145\0163145156\0163145156144", "\x0053\0123110\0123110117\0123110117122\0123110117122124", "\x0073\0163154\0163154157\0163154157164", "\x0053\0123124\0123124122\0123124122111\0123124122111116\0123124122111116107", "\x0073\0163171\0163171155\0163171155142\0163171155142157\0163171155142157154", "\x0074\0164145\0164145155\0164145155160\0164145155160157\0164145155160157162\0164145155160157162141\0164145155160157162141154\016414515516015716214115455\016414515516015716214115455141\016414515516015716214115455141143\016414515516015716214115455141143164\016414515516015716214115455141143164151\016414515516015716214115455141143164151166\016414515516015716214115455141143164151166141\016414515516015716214115455141143164151166141164\016414515516015716214115455141143164151166141164151\016414515516015716214115455141143164151166141164151157\016414515516015716214115455141143164151166141164151157156", "\x0074\0164145\0164145155\0164145155160\0164145155160157\0164145155160157162\0164145155160157162141\0164145155160157162141154", "\x0074\0164145\0164145163\0164145163164", "\x0054\0124122\0124122125\0124122125105", "\x0074\0164162\0164162165\0164162165145", "\x0074\0164171\0164171160\0164171160145", "\x0046\0106101\0106101114\0106101114123\0106101114123105", "\x0066\0146141\0146141154\0146141154163\0146141154163145", "\x006E\0156151\0156151154", "\x003D\07576", "\x003C\07455", "\x003B", "\x002B", "\x002D", "\x002A", "\x002F", "\x003E", "\x0067\0147164", "\x003C", "\x006C\0154164", "\x003D\07575", "\x0065\0145161", "\x003C\07475", "\x006C\0154145", "\x003E\07675", "\x0067\0147145", "\x0021\04175", "\x006E\0156145", "\x0061\0141156\0141156144", "\x0026", "\x006F\0157162", "\x007C", "\x007E", null, null, null, null
            };

        internal static readonly ulong[] jjtoMore = new ulong[] {0xc0L, 0x0L};
        internal static readonly ulong[] jjtoSkip = new ulong[] {0x13eL, 0x0L};
        internal static readonly ulong[] jjtoToken = new ulong[] {0xffffffffffffde01u, 0x7fffffffffL};
        public static readonly String[] lexStateNames = new String[] {"DEFAULT", "IN_COMMENT"};
        protected internal char curChar;
        internal int curLexState = 0;
        public StreamWriter debugStream;
        internal int defaultLexState = 0;
        protected internal SimpleCharStream input_stream;
        internal int jjmatchedKind;
        internal int jjmatchedPos;
        internal int jjnewStateCnt;
        internal int jjround;
        private int[] jjrounds;
        //UPGRADE_NOTE: Final was removed from the declaration of 'jjstateSet '. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1003"'
        //UPGRADE_NOTE: The initialization of  'jjstateSet' was moved to method 'InitBlock'. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1005"'
        private int[] jjstateSet;

        public CLIPSParserTokenManager(SimpleCharStream stream)
        {
            InitBlock();
            if (SimpleCharStream.staticFlag)
                throw new ApplicationException("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
            input_stream = stream;
        }

        public CLIPSParserTokenManager(SimpleCharStream stream, int lexState) : this(stream)
        {
            InitBlock();
            SwitchTo(lexState);
        }

        public virtual StreamWriter DebugStream
        {
            set { debugStream = value; }
        }

        public virtual Token NextToken
        {
            get
            {
                int kind;
                Token specialToken = null;
                Token matchedToken;
                int curPos = 0;

                //UPGRADE_NOTE: Label 'EOFLoop' was moved. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1014"'
                for (;;)
                {
                    try
                    {
                        curChar = input_stream.BeginToken();
                    }
                    catch (IOException e)
                    {
                        jjmatchedKind = 0;
                        matchedToken = jjFillToken();
                        return matchedToken;
                    }

                    for (;;)
                    {
                        switch (curLexState)
                        {
                            case 0:
                                try
                                {
                                    input_stream.backup(0);
                                    while (curChar <= 32 && (0x100002600L & (1L << (int) curChar)) != 0L)
                                        curChar = input_stream.BeginToken();
                                }
                                catch (IOException e1)
                                {
                                    //UPGRADE_NOTE: Labeled continue statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1015"'
                                    goto EOFLoop;
                                }
                                jjmatchedKind = 0x7fffffff;
                                jjmatchedPos = 0;
                                curPos = jjMoveStringLiteralDfa0_0();
                                break;

                            case 1:
                                jjmatchedKind = 0x7fffffff;
                                jjmatchedPos = 0;
                                curPos = jjMoveStringLiteralDfa0_1();
                                if (jjmatchedPos == 0 && jjmatchedKind > 6)
                                {
                                    jjmatchedKind = 6;
                                }
                                break;
                        }
                        if (jjmatchedKind != 0x7fffffff)
                        {
                            if (jjmatchedPos + 1 < curPos)
                                input_stream.backup(curPos - jjmatchedPos - 1);
                            if ((jjtoToken[jjmatchedKind >> 6] & (1u << (jjmatchedKind & 63))) != 0L)
                            {
                                matchedToken = jjFillToken();
                                if (jjnewLexState[jjmatchedKind] != - 1)
                                    curLexState = jjnewLexState[jjmatchedKind];
                                return matchedToken;
                            }
                            else if ((jjtoSkip[jjmatchedKind >> 6] & (1u << (jjmatchedKind & 63))) != 0L)
                            {
                                if (jjnewLexState[jjmatchedKind] != - 1)
                                    curLexState = jjnewLexState[jjmatchedKind];
                                //UPGRADE_NOTE: Labeled continue statement was changed to a goto statement. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1015"'
                                goto EOFLoop;
                            }
                            if (jjnewLexState[jjmatchedKind] != - 1)
                                curLexState = jjnewLexState[jjmatchedKind];
                            curPos = 0;
                            jjmatchedKind = 0x7fffffff;
                            try
                            {
                                curChar = input_stream.readChar();
                                continue;
                            }
                            catch (IOException e1)
                            {
                            }
                        }
                        int error_line = input_stream.EndLine;
                        int error_column = input_stream.EndColumn;
                        String error_after = null;
                        bool EOFSeen = false;
                        try
                        {
                            input_stream.readChar();
                            input_stream.backup(1);
                        }
                        catch (IOException e1)
                        {
                            EOFSeen = true;
                            error_after = curPos <= 1 ? "" : input_stream.GetImage();
                            if (curChar == '\n' || curChar == '\r')
                            {
                                error_line++;
                                error_column = 0;
                            }
                            else
                                error_column++;
                        }
                        if (!EOFSeen)
                        {
                            input_stream.backup(1);
                            error_after = curPos <= 1 ? "" : input_stream.GetImage();
                        }
                        throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
                    }
                    //UPGRADE_NOTE: Label 'EOFLoop' was moved. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1014"'
                    EOFLoop:
                    ;
                }
            }
        }

        private void InitBlock()
        {
            jjstateSet = new int[94];
            jjrounds = new int[47];
            //debugStream = System.Console.Out;
        }

        //UPGRADE_NOTE: The initialization of  'debugStream' was moved to method 'InitBlock'. 'ms-help://MS.VSCC.2003/commoner/redir/redirect.htm?keyword="jlca1005"'
        private int jjStopStringLiteralDfa_0(int pos, ulong active0, ulong active1)
        {
            switch (pos)
            {
                case 0:
                    if ((active1 & 0xdcL) != 0L)
                    {
                        jjmatchedKind = 99;
                        return 25;
                    }
                    if ((active0 & (uint) SupportClass.Identity(0xfffffffffff80000L)) != 0L || (active1 & 0x16aa80723L) != 0L)
                    {
                        jjmatchedKind = 99;
                        return 47;
                    }
                    if ((active1 & 0x28000L) != 0L)
                        return 47;
                    if ((active1 & 0x400000000L) != 0L)
                        return 48;
                    return - 1;

                case 1:
                    if ((active1 & 0x80L) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 1;
                        return 24;
                    }
                    if ((active0 & (uint) SupportClass.Identity(0xfffffffffff80000L)) != 0L || (active1 & 0x4000077fL) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 1;
                        return 47;
                    }
                    if ((active1 & 0x280000L) != 0L)
                        return 25;
                    if ((active1 & 0x12a800000L) != 0L)
                        return 47;
                    return - 1;

                case 2:
                    if ((active1 & 0x80L) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 2;
                        return 23;
                    }
                    if ((active0 & (uint) SupportClass.Identity(0xfd7ffffffef80000u)) != 0L || (active1 & 0x37fL) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 2;
                        return 47;
                    }
                    if ((active0 & (uint) SupportClass.Identity(0x80000000000000L)) != 0L)
                        return 25;
                    if ((active1 & 0x40000400L) != 0L)
                        return 47;
                    if ((active0 & 0x200000001000000L) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 2;
                        return 25;
                    }
                    return - 1;

                case 3:
                    if ((active0 & 0x5f75dfbffff00000L) != 0L || (active1 & 0x30fL) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 3;
                        return 47;
                    }
                    if ((active0 & (uint) SupportClass.Identity(0x8000000000000000L)) != 0L || (active1 & 0x10L) != 0L)
                        return 25;
                    if ((active0 & (uint) SupportClass.Identity(0x8204000000000L)) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 3;
                        return 25;
                    }
                    if ((active0 & 0x2002000000080000L) != 0L || (active1 & 0xe0L) != 0L)
                        return 47;
                    return - 1;

                case 4:
                    if ((active0 & (uint) SupportClass.Identity(0x800040000000000L)) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 4;
                        return 25;
                    }
                    if ((active0 & 0x177dbbfffff00000L) != 0L || (active1 & 0xfL) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 4;
                        return 47;
                    }
                    if ((active0 & 0x4000400000000000L) != 0L || (active1 & 0x300L) != 0L)
                        return 47;
                    return - 1;

                case 5:
                    if ((active0 & (uint) SupportClass.Identity(0x80800000000L)) != 0L)
                    {
                        if (jjmatchedPos != 5)
                        {
                            jjmatchedKind = 99;
                            jjmatchedPos = 5;
                        }
                        return 25;
                    }
                    if ((active0 & 0xc00000L) != 0L)
                        return 25;
                    if ((active0 & 0x1f39b1f7ff300000L) != 0L || (active1 & 0xcL) != 0L)
                    {
                        if (jjmatchedPos != 5)
                        {
                            jjmatchedKind = 99;
                            jjmatchedPos = 5;
                        }
                        return 47;
                    }
                    if ((active0 & 0x44060000000000L) != 0L || (active1 & 0x3L) != 0L)
                        return 47;
                    return - 1;

                case 6:
                    if ((active0 & 0x1d1828dba7a00000L) != 0L || (active1 & 0xcL) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 6;
                        return 47;
                    }
                    if ((active0 & 0x200010040000000L) != 0L)
                        return 25;
                    if ((active0 & 0x100400000000L) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 6;
                        return 25;
                    }
                    if ((active0 & 0x21802018100000L) != 0L)
                        return 47;
                    return - 1;

                case 7:
                    if ((active0 & (uint) SupportClass.Identity(0x80a00000L)) != 0L)
                    {
                        if (jjmatchedPos != 7)
                        {
                            jjmatchedKind = 99;
                            jjmatchedPos = 7;
                        }
                        return 25;
                    }
                    if ((active0 & (uint) SupportClass.Identity(0xd1838df07000000L)) != 0L)
                    {
                        if (jjmatchedPos != 7)
                        {
                            jjmatchedKind = 99;
                            jjmatchedPos = 7;
                        }
                        return 47;
                    }
                    if ((active0 & 0x1000000020000000L) != 0L || (active1 & 0xcL) != 0L)
                        return 47;
                    return - 1;

                case 8:
                    if ((active0 & (uint) SupportClass.Identity(0xd0038c587800000L)) != 0L || (active1 & 0x4L) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 8;
                        return 47;
                    }
                    if ((active0 & (uint) SupportClass.Identity(0x8000000000000L)) != 0L)
                        return 25;
                    if ((active0 & 0x10001a00200000L) != 0L)
                        return 47;
                    return - 1;

                case 9:
                    if ((active0 & (uint) SupportClass.Identity(0x800004000000000L)) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 9;
                        return 25;
                    }
                    if ((active0 & 0x500188486800000L) != 0L || (active1 & 0x4L) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 9;
                        return 47;
                    }
                    if ((active0 & 0x200101000000L) != 0L)
                        return 47;
                    return - 1;

                case 10:
                    if ((active0 & 0x4480000000L) != 0L)
                        return 47;
                    if ((active0 & (uint) SupportClass.Identity(0xd00188006800000L)) != 0L || (active1 & 0x4L) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 10;
                        return 47;
                    }
                    return - 1;

                case 11:
                    if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x4L) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 11;
                        return 25;
                    }
                    if ((active0 & 0x400000000000000L) != 0L)
                        return 47;
                    if ((active0 & (uint) SupportClass.Identity(0x800188006800000L)) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 11;
                        return 47;
                    }
                    return - 1;

                case 12:
                    if ((active0 & (uint) SupportClass.Identity(0x800000000000000L)) != 0L)
                        return 47;
                    if ((active0 & (uint) SupportClass.Identity(0x80000000000L)) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 12;
                        return 25;
                    }
                    if ((active0 & 0x100108006800000L) != 0L || (active1 & 0x4L) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 12;
                        return 47;
                    }
                    return - 1;

                case 13:
                    if ((active0 & 0x4800000L) != 0L || (active1 & 0x4L) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 13;
                        return 47;
                    }
                    if ((active0 & 0x100000000000L) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 13;
                        return 25;
                    }
                    if ((active0 & 0x100088002000000L) != 0L)
                        return 47;
                    return - 1;

                case 14:
                    if ((active0 & 0x4000000L) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 14;
                        return 25;
                    }
                    if ((active0 & 0x100000800000L) != 0L)
                        return 47;
                    if ((active1 & 0x4L) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 14;
                        return 47;
                    }
                    return - 1;

                case 15:
                    if ((active0 & 0x4000000L) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 15;
                        return 47;
                    }
                    if ((active1 & 0x4L) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 15;
                        return 25;
                    }
                    return - 1;

                case 16:
                    if ((active0 & 0x4000000L) != 0L || (active1 & 0x4L) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 16;
                        return 47;
                    }
                    return - 1;

                case 17:
                    if ((active1 & 0x4L) != 0L)
                    {
                        jjmatchedKind = 99;
                        jjmatchedPos = 17;
                        return 47;
                    }
                    if ((active0 & 0x4000000L) != 0L)
                        return 47;
                    return - 1;

                default:
                    return - 1;
            }
        }

        private int jjStartNfa_0(int pos, ulong active0, ulong active1)
        {
            return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
        }

        private int jjStopAtPos(int pos, int kind)
        {
            jjmatchedKind = kind;
            jjmatchedPos = pos;
            return pos + 1;
        }

        private int jjStartNfaWithStates_0(int pos, int kind, int state)
        {
            jjmatchedKind = kind;
            jjmatchedPos = pos;
            try
            {
                curChar = input_stream.readChar();
            }
            catch (IOException e)
            {
                return pos + 1;
            }
            return jjMoveNfa_0(state, pos + 1);
        }

        private int jjMoveStringLiteralDfa0_0()
        {
            switch (curChar)
            {
                case (char) (33):
                    return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);

                case (char) (38):
                    return jjStopAtPos(0, 95);

                case (char) (40):
                    return jjStopAtPos(0, 9);

                case (char) (41):
                    return jjStopAtPos(0, 10);

                case (char) (42):
                    return jjStopAtPos(0, 80);

                case (char) (43):
                    return jjStopAtPos(0, 78);

                case (char) (45):
                    return jjStartNfaWithStates_0(0, 79, 47);

                case (char) (47):
                    return jjStartNfaWithStates_0(0, 81, 47);

                case (char) (59):
                    jjmatchedKind = 77;
                    return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);

                case (char) (60):
                    jjmatchedKind = 84;
                    return jjMoveStringLiteralDfa1_0(0x0L, 0x1001000L);

                case (char) (61):
                    return jjMoveStringLiteralDfa1_0(0x0L, 0x400800L);

                case (char) (62):
                    jjmatchedKind = 82;
                    return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000L);

                case (char) (66):
                    return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);

                case (char) (68):
                    return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);

                case (char) (70):
                    return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x100L);

                case (char) (73):
                    return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);

                case (char) (76):
                    return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);

                case (char) (78):
                    return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);

                case (char) (83):
                    return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x1L);

                case (char) (84):
                    return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);

                case (char) (97):
                    return jjMoveStringLiteralDfa1_0(0x3e00000L, 0x40000000L);

                case (char) (98):
                    return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);

                case (char) (99):
                    return jjMoveStringLiteralDfa1_0(0xc000000L, 0x0L);

                case (char) (100):
                    return jjMoveStringLiteralDfa1_0(0x1fff0000000L, 0x0L);

                case (char) (101):
                    return jjMoveStringLiteralDfa1_0(0x1c0000000000L, 0x800000L);

                case (char) (102):
                    return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x200L);

                case (char) (103):
                    return jjMoveStringLiteralDfa1_0(0x0L, 0x8080000L);

                case (char) (108):
                    return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x2200000L);

                case (char) (109):
                    return jjMoveStringLiteralDfa1_0(0xc000000000000L, 0x0L);

                case (char) (110):
                    return jjMoveStringLiteralDfa1_0(0xb0000000000000L, 0x20000400L);

                case (char) (111):
                    return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L);

                case (char) (114):
                    return jjMoveStringLiteralDfa1_0(0xf00000000000000L, 0x0L);

                case (char) (115):
                    return jjMoveStringLiteralDfa1_0(0xb000000000000000u, 0x2L);

                case (char) (116):
                    return jjMoveStringLiteralDfa1_0(0x0L, 0xdcL);

                case (char) (124):
                    return jjStopAtPos(0, 97);

                case (char) (126):
                    return jjStartNfaWithStates_0(0, 98, 48);

                default:
                    return jjMoveNfa_0(0, 0);
            }
        }

        private int jjMoveStringLiteralDfa1_0(ulong active0, ulong active1)
        {
            try
            {
                curChar = input_stream.readChar();
            }
            catch (IOException e)
            {
                jjStopStringLiteralDfa_0(0, active0, active1);
                return 1;
            }
            switch (curChar)
            {
                case (char) (45):
                    if ((active1 & 0x1000L) != 0L)
                        return jjStopAtPos(1, 76);
                    break;

                case (char) (59):
                    if ((active0 & 0x20L) != 0L)
                        return jjStopAtPos(1, 5);
                    break;

                case (char) (61):
                    if ((active1 & 0x400000L) != 0L)
                        return jjStopAtPos(1, 86);
                    else if ((active1 & 0x1000000L) != 0L)
                        return jjStopAtPos(1, 88);
                    else if ((active1 & 0x4000000L) != 0L)
                        return jjStopAtPos(1, 90);
                    else if ((active1 & 0x10000000L) != 0L)
                        return jjStopAtPos(1, 92);
                    break;

                case (char) (62):
                    if ((active1 & 0x800L) != 0L)
                        return jjStopAtPos(1, 75);
                    break;

                case (char) (65):
                    return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L);

                case (char) (72):
                    return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);

                case (char) (76):
                    return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);

                case (char) (78):
                    return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L);

                case (char) (79):
                    return jjMoveStringLiteralDfa2_0(active0, 0x2020000100000L, active1, 0L);

                case (char) (82):
                    return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L);

                case (char) (84):
                    return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);

                case (char) (85):
                    return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L);

                case (char) (97):
                    return jjMoveStringLiteralDfa2_0(active0, 0x1000200000000000L, active1, 0x200L);

                case (char) (101):
                    if ((active1 & 0x2000000L) != 0L)
                        return jjStartNfaWithStates_0(1, 89, 47);
                    else if ((active1 & (uint) SupportClass.Identity(0x8000000L)) != 0L)
                        return jjStartNfaWithStates_0(1, 91, 47);
                    else if ((active1 & 0x20000000L) != 0L)
                        return jjStartNfaWithStates_0(1, 93, 47);
                    return jjMoveStringLiteralDfa2_0(active0, 0x2b0001fff0000000L, active1, 0x1cL);

                case (char) (102):
                    return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);

                case (char) (103):
                    return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);

                case (char) (104):
                    return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);

                case (char) (105):
                    return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0x400L);

                case (char) (108):
                    return jjMoveStringLiteralDfa2_0(active0, 0x8000000002000000u, active1, 0L);

                case (char) (110):
                    return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000L);

                case (char) (111):
                    return jjMoveStringLiteralDfa2_0(active0, 0xb5000008000000L, active1, 0L);

                case (char) (113):
                    if ((active1 & 0x800000L) != 0L)
                        return jjStartNfaWithStates_0(1, 87, 47);
                    break;

                case (char) (114):
                    if ((active1 & 0x100000000L) != 0L)
                        return jjStartNfaWithStates_0(1, 96, 47);
                    return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L);

                case (char) (115):
                    return jjMoveStringLiteralDfa2_0(active0, 0xc00000L, active1, 0L);

                case (char) (116):
                    if ((active1 & 0x80000L) != 0L)
                        return jjStartNfaWithStates_0(1, 83, 25);
                    else if ((active1 & 0x200000L) != 0L)
                        return jjStartNfaWithStates_0(1, 85, 25);
                    break;

                case (char) (117):
                    return jjMoveStringLiteralDfa2_0(active0, 0x408000001000000L, active1, 0L);

                case (char) (120):
                    return jjMoveStringLiteralDfa2_0(active0, 0x140000000000L, active1, 0L);

                case (char) (121):
                    return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x82L);

                default:
                    break;
            }
            return jjStartNfa_0(0, active0, active1);
        }

        private int jjMoveStringLiteralDfa2_0(ulong old0, ulong active0, ulong old1, ulong active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return jjStartNfa_0(0, old0, old1);
            try
            {
                curChar = input_stream.readChar();
            }
            catch (IOException e)
            {
                jjStopStringLiteralDfa_0(1, active0, active1);
                return 2;
            }
            switch (curChar)
            {
                case (char) (45):
                    return jjMoveStringLiteralDfa3_0(active0, 0x30000000000000L, active1, 0L);

                case (char) (76):
                    return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L);

                case (char) (77):
                    return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L);

                case (char) (78):
                    return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L);

                case (char) (79):
                    return jjMoveStringLiteralDfa3_0(active0, 0x4000400000100000L, active1, 0L);

                case (char) (82):
                    return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);

                case (char) (84):
                    return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L);

                case (char) (85):
                    return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0x20L);

                case (char) (97):
                    return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L);

                case (char) (99):
                    return jjMoveStringLiteralDfa3_0(active0, 0x200010000000L, active1, 0L);

                case (char) (100):
                    if ((active1 & 0x40000000L) != 0L)
                        return jjStartNfaWithStates_0(2, 94, 47);
                    return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L);

                case (char) (102):
                    return jjMoveStringLiteralDfa3_0(active0, 0x97fe0000000L, active1, 0L);

                case (char) (103):
                    return jjMoveStringLiteralDfa3_0(active0, 0x1000000200000L, active1, 0L);

                case (char) (105):
                    return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L);

                case (char) (108):
                    if ((active1 & 0x400L) != 0L)
                        return jjStartNfaWithStates_0(2, 74, 47);
                    return jjMoveStringLiteralDfa3_0(active0, 0x1c08000002000000L, active1, 0x200L);

                case (char) (109):
                    return jjMoveStringLiteralDfa3_0(active0, 0x100000008000000L, active1, 0xeL);

                case (char) (110):
                    return jjMoveStringLiteralDfa3_0(active0, 0x2000000000080000L, active1, 0L);

                case (char) (111):
                    return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000u, active1, 0L);

                case (char) (112):
                    return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0x80L);

                case (char) (115):
                    return jjMoveStringLiteralDfa3_0(active0, 0x8000c00000L, active1, 0x10L);

                case (char) (116):
                    if ((active0 & (uint) SupportClass.Identity(0x80000000000000L)) != 0L)
                        return jjStartNfaWithStates_0(2, 55, 25);
                    return jjMoveStringLiteralDfa3_0(active0, 0x200000001000000L, active1, 0L);

                case (char) (117):
                    return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40L);

                default:
                    break;
            }
            return jjStartNfa_0(1, active0, active1);
        }

        private int jjMoveStringLiteralDfa3_0(ulong old0, ulong active0, ulong old1, ulong active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return jjStartNfa_0(1, old0, old1);
            try
            {
                curChar = input_stream.readChar();
            }
            catch (IOException e)
            {
                jjStopStringLiteralDfa_0(2, active0, active1);
                return 3;
            }
            switch (curChar)
            {
                case (char) (65):
                    return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L);

                case (char) (66):
                    return jjMoveStringLiteralDfa4_0(active0, 0x40020000000000L, active1, 0L);

                case (char) (69):
                    if ((active1 & 0x20L) != 0L)
                        return jjStartNfaWithStates_0(3, 69, 47);
                    return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L);

                case (char) (71):
                    if ((active0 & 0x2000000000000L) != 0L)
                        return jjStartNfaWithStates_0(3, 49, 47);
                    break;

                case (char) (73):
                    return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1L);

                case (char) (76):
                    return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0L);

                case (char) (82):
                    return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L);

                case (char) (83):
                    return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L);

                case (char) (97):
                    return jjMoveStringLiteralDfa4_0(active0, 0x810010000000000L, active1, 0L);

                case (char) (98):
                    return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2L);

                case (char) (99):
                    return jjMoveStringLiteralDfa4_0(active0, 0x8020000000L, active1, 0L);

                case (char) (100):
                    if ((active0 & 0x80000L) != 0L)
                        return jjStartNfaWithStates_0(3, 19, 47);
                    else if ((active0 & 0x2000000000000000L) != 0L)
                        return jjStartNfaWithStates_0(3, 61, 47);
                    break;

                case (char) (101):
                    if ((active1 & 0x40L) != 0L)
                        return jjStartNfaWithStates_0(3, 70, 47);
                    else if ((active1 & 0x80L) != 0L)
                        return jjStartNfaWithStates_0(3, 71, 47);
                    return jjMoveStringLiteralDfa4_0(active0, 0x500080000c00000L, active1, 0L);

                case (char) (102):
                    return jjMoveStringLiteralDfa4_0(active0, 0xc0000000L, active1, 0L);

                case (char) (103):
                    return jjMoveStringLiteralDfa4_0(active0, 0x300000000L, active1, 0L);

                case (char) (105):
                    return jjMoveStringLiteralDfa4_0(active0, 0x1005100404000000L, active1, 0L);

                case (char) (108):
                    return jjMoveStringLiteralDfa4_0(active0, 0x20000010000000L, active1, 0L);

                case (char) (109):
                    return jjMoveStringLiteralDfa4_0(active0, 0x1808000000L, active1, 0L);

                case (char) (111):
                    return jjMoveStringLiteralDfa4_0(active0, 0x3000000L, active1, 0L);

                case (char) (112):
                    return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xcL);

                case (char) (114):
                    return jjMoveStringLiteralDfa4_0(active0, 0x200002000200000L, active1, 0L);

                case (char) (115):
                    return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0x200L);

                case (char) (116):
                    if ((active0 & (uint) SupportClass.Identity(0x8000000000000000u)) != 0L)
                        return jjStartNfaWithStates_0(3, 63, 25);
                    else if ((active1 & 0x10L) != 0L)
                        return jjStartNfaWithStates_0(3, 68, 25);
                    return jjMoveStringLiteralDfa4_0(active0, 0x8204000000000L, active1, 0L);

                default:
                    break;
            }
            return jjStartNfa_0(2, active0, active1);
        }

        private int jjMoveStringLiteralDfa4_0(ulong old0, ulong active0, ulong old1, ulong active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return jjStartNfa_0(2, old0, old1);
            try
            {
                curChar = input_stream.readChar();
            }
            catch (IOException e)
            {
                jjStopStringLiteralDfa_0(3, active0, active1);
                return 4;
            }
            switch (curChar)
            {
                case (char) (45):
                    return jjMoveStringLiteralDfa5_0(active0, 0x400200001000000L, active1, 0L);

                case (char) (69):
                    if ((active1 & 0x100L) != 0L)
                        return jjStartNfaWithStates_0(4, 72, 47);
                    return jjMoveStringLiteralDfa5_0(active0, 0x40000000100000L, active1, 0L);

                case (char) (71):
                    return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L);

                case (char) (76):
                    return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0L);

                case (char) (78):
                    return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L);

                case (char) (84):
                    if ((active0 & 0x400000000000L) != 0L)
                        return jjStartNfaWithStates_0(4, 46, 47);
                    else if ((active0 & 0x4000000000000000L) != 0L)
                        return jjStartNfaWithStates_0(4, 62, 47);
                    break;

                case (char) (97):
                    return jjMoveStringLiteralDfa5_0(active0, 0x200000058000000L, active1, 0L);

                case (char) (99):
                    return jjMoveStringLiteralDfa5_0(active0, 0x1080000000000L, active1, 0L);

                case (char) (101):
                    if ((active1 & 0x200L) != 0L)
                        return jjStartNfaWithStates_0(4, 73, 47);
                    return jjMoveStringLiteralDfa5_0(active0, 0x1000004900200000L, active1, 0L);

                case (char) (102):
                    return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0L);

                case (char) (103):
                    return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L);

                case (char) (105):
                    return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0L);

                case (char) (108):
                    return jjMoveStringLiteralDfa5_0(active0, 0x220000000L, active1, 0L);

                case (char) (109):
                    return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0L);

                case (char) (110):
                    return jjMoveStringLiteralDfa5_0(active0, 0x404000000L, active1, 0L);

                case (char) (111):
                    return jjMoveStringLiteralDfa5_0(active0, 0x20001000000000L, active1, 0xeL);

                case (char) (114):
                    return jjMoveStringLiteralDfa5_0(active0, 0x108000c00000L, active1, 0L);

                case (char) (116):
                    return jjMoveStringLiteralDfa5_0(active0, 0x800040000000000L, active1, 0L);

                case (char) (117):
                    return jjMoveStringLiteralDfa5_0(active0, 0x12080000000L, active1, 0L);

                case (char) (119):
                    return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0L);

                default:
                    break;
            }
            return jjStartNfa_0(3, active0, active1);
        }

        private int jjMoveStringLiteralDfa5_0(ulong old0, ulong active0, ulong old1, ulong active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return jjStartNfa_0(3, old0, old1);
            try
            {
                curChar = input_stream.readChar();
            }
            catch (IOException e)
            {
                jjStopStringLiteralDfa_0(4, active0, active1);
                return 5;
            }
            switch (curChar)
            {
                case (char) (65):
                    return jjMoveStringLiteralDfa6_0(active0, 0x100000L, active1, 0L);

                case (char) (69):
                    if ((active0 & 0x20000000000L) != 0L)
                        return jjStartNfaWithStates_0(5, 41, 47);
                    return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L);

                case (char) (71):
                    if ((active1 & 0x1L) != 0L)
                        return jjStartNfaWithStates_0(5, 64, 47);
                    break;

                case (char) (82):
                    if ((active0 & 0x40000000000000L) != 0L)
                        return jjStartNfaWithStates_0(5, 54, 47);
                    break;

                case (char) (97):
                    return jjMoveStringLiteralDfa6_0(active0, 0x1100020000000L, active1, 0L);

                case (char) (98):
                    return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0L);

                case (char) (99):
                    return jjMoveStringLiteralDfa6_0(active0, 0x200000040000000L, active1, 0L);

                case (char) (100):
                    return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L);

                case (char) (101):
                    return jjMoveStringLiteralDfa6_0(active0, 0x10000002000000L, active1, 0L);

                case (char) (102):
                    return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0L);

                case (char) (103):
                    return jjMoveStringLiteralDfa6_0(active0, 0x200000L, active1, 0L);

                case (char) (105):
                    return jjMoveStringLiteralDfa6_0(active0, 0x800208004000000L, active1, 0L);

                case (char) (108):
                    if ((active1 & 0x2L) != 0L)
                        return jjStartNfaWithStates_0(5, 65, 47);
                    return jjMoveStringLiteralDfa6_0(active0, 0x12000000000L, active1, 0L);

                case (char) (109):
                    return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0L);

                case (char) (110):
                    return jjMoveStringLiteralDfa6_0(active0, 0x1000000188000000L, active1, 0L);

                case (char) (111):
                    return jjMoveStringLiteralDfa6_0(active0, 0x20000200000000L, active1, 0L);

                case (char) (114):
                    return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0xcL);

                case (char) (115):
                    if ((active0 & 0x40000000000L) != 0L)
                        return jjStartNfaWithStates_0(5, 42, 47);
                    return jjMoveStringLiteralDfa6_0(active0, 0x8000400000000L, active1, 0L);

                case (char) (116):
                    if ((active0 & 0x400000L) != 0L)
                    {
                        jjmatchedKind = 22;
                        jjmatchedPos = 5;
                    }
                    return jjMoveStringLiteralDfa6_0(active0, 0x80800800000L, active1, 0L);

                case (char) (118):
                    return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0L);

                case (char) (121):
                    if ((active0 & 0x4000000000000L) != 0L)
                        return jjStartNfaWithStates_0(5, 50, 47);
                    break;

                default:
                    break;
            }
            return jjStartNfa_0(4, active0, active1);
        }

        private int jjMoveStringLiteralDfa6_0(ulong old0, ulong active0, ulong old1, ulong active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return jjStartNfa_0(4, old0, old1);
            try
            {
                curChar = input_stream.readChar();
            }
            catch (IOException e)
            {
                jjStopStringLiteralDfa_0(5, active0, active1);
                return 6;
            }
            switch (curChar)
            {
                case (char) (45):
                    return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active1, 0L);

                case (char) (78):
                    if ((active0 & 0x100000L) != 0L)
                        return jjStartNfaWithStates_0(6, 20, 47);
                    break;

                case (char) (82):
                    if ((active0 & (uint) SupportClass.Identity(0x800000000000L)) != 0L)
                        return jjStartNfaWithStates_0(6, 47, 47);
                    break;

                case (char) (97):
                    return jjMoveStringLiteralDfa7_0(active0, 0x200000L, active1, 0xcL);

                case (char) (98):
                    return jjMoveStringLiteralDfa7_0(active0, 0x8200000000L, active1, 0L);

                case (char) (99):
                    return jjMoveStringLiteralDfa7_0(active0, 0x1000000080000000L, active1, 0L);

                case (char) (100):
                    if ((active0 & (uint) SupportClass.Identity(0x8000000L)) != 0L)
                        return jjStartNfaWithStates_0(6, 27, 47);
                    return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L);

                case (char) (101):
                    if ((active0 & 0x10000000L) != 0L)
                        return jjStartNfaWithStates_0(6, 28, 47);
                    else if ((active0 & 0x2000000000L) != 0L)
                        return jjStartNfaWithStates_0(6, 37, 47);
                    return jjMoveStringLiteralDfa7_0(active0, 0x500000100000000L, active1, 0L);

                case (char) (104):
                    return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0L);

                case (char) (105):
                    return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0L);

                case (char) (108):
                    if ((active0 & 0x1000000000000L) != 0L)
                        return jjStartNfaWithStates_0(6, 48, 47);
                    return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0L);

                case (char) (110):
                    return jjMoveStringLiteralDfa7_0(active0, 0x10200004000000L, active1, 0L);

                case (char) (111):
                    return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0L);

                case (char) (112):
                    if ((active0 & 0x20000000000000L) != 0L)
                        return jjStartNfaWithStates_0(6, 53, 47);
                    return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L, active1, 0L);

                case (char) (115):
                    return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0L);

                case (char) (116):
                    if ((active0 & 0x40000000L) != 0L)
                        return jjStartNfaWithStates_0(6, 30, 25);
                    else if ((active0 & 0x10000000000L) != 0L)
                        return jjStartNfaWithStates_0(6, 40, 25);
                    else if ((active0 & 0x200000000000000L) != 0L)
                        return jjStartNfaWithStates_0(6, 57, 25);
                    return jjMoveStringLiteralDfa7_0(active0, 0x100400000000L, active1, 0L);

                case (char) (117):
                    return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L);

                case (char) (118):
                    return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0L);

                default:
                    break;
            }
            return jjStartNfa_0(5, active0, active1);
        }

        private int jjMoveStringLiteralDfa7_0(ulong old0, ulong active0, ulong old1, ulong active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return jjStartNfa_0(5, old0, old1);
            try
            {
                curChar = input_stream.readChar();
            }
            catch (IOException e)
            {
                jjStopStringLiteralDfa_0(6, active0, active1);
                return 7;
            }
            switch (curChar)
            {
                case (char) (45):
                    return jjMoveStringLiteralDfa8_0(active0, 0x2000000L, active1, 0L);

                case (char) (97):
                    return jjMoveStringLiteralDfa8_0(active0, 0x600000000L, active1, 0L);

                case (char) (99):
                    return jjMoveStringLiteralDfa8_0(active0, 0x1000000L, active1, 0L);

                case (char) (100):
                    return jjMoveStringLiteralDfa8_0(active0, 0x10200000000000L, active1, 0L);

                case (char) (101):
                    if ((active0 & 0x1000000000000000L) != 0L)
                        return jjStartNfaWithStates_0(7, 60, 47);
                    return jjMoveStringLiteralDfa8_0(active0, 0x800008000000000L, active1, 0L);

                case (char) (103):
                    return jjMoveStringLiteralDfa8_0(active0, 0x4000000L, active1, 0L);

                case (char) (105):
                    return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L, active1, 0L);

                case (char) (108):
                    if ((active1 & 0x8L) != 0L)
                    {
                        jjmatchedKind = 67;
                        jjmatchedPos = 7;
                    }
                    return jjMoveStringLiteralDfa8_0(active0, 0x5000000000L, active1, 0x4L);

                case (char) (111):
                    return jjMoveStringLiteralDfa8_0(active0, 0x8000800000000L, active1, 0L);

                case (char) (114):
                    return jjMoveStringLiteralDfa8_0(active0, 0x500000100000000L, active1, 0L);

                case (char) (115):
                    if ((active0 & 0x20000000L) != 0L)
                        return jjStartNfaWithStates_0(7, 29, 47);
                    break;

                case (char) (116):
                    return jjMoveStringLiteralDfa8_0(active0, 0x80a00000L, active1, 0L);

                case (char) (118):
                    return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L, active1, 0L);

                default:
                    break;
            }
            return jjStartNfa_0(6, active0, active1);
        }

        private int jjMoveStringLiteralDfa8_0(ulong old0, ulong active0, ulong old1, ulong active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return jjStartNfa_0(6, old0, old1);
            try
            {
                curChar = input_stream.readChar();
            }
            catch (IOException e)
            {
                jjStopStringLiteralDfa_0(7, active0, active1);
                return 8;
            }
            switch (curChar)
            {
                case (char) (45):
                    return jjMoveStringLiteralDfa9_0(active0, 0x900008004000000L, active1, 0x4L);

                case (char) (97):
                    if ((active0 & 0x10000000000000L) != 0L)
                        return jjStartNfaWithStates_0(8, 52, 47);
                    return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L, active1, 0L);

                case (char) (100):
                    if ((active0 & (uint) SupportClass.Identity(0x800000000L)) != 0L)
                        return jjStartNfaWithStates_0(8, 35, 47);
                    break;

                case (char) (101):
                    if ((active0 & 0x200000L) != 0L)
                        return jjStartNfaWithStates_0(8, 21, 47);
                    else if ((active0 & 0x1000000000L) != 0L)
                        return jjStartNfaWithStates_0(8, 36, 47);
                    return jjMoveStringLiteralDfa9_0(active0, 0x280000800000L, active1, 0L);

                case (char) (105):
                    return jjMoveStringLiteralDfa9_0(active0, 0x180000000L, active1, 0L);

                case (char) (108):
                    if ((active0 & 0x200000000L) != 0L)
                        return jjStartNfaWithStates_0(8, 33, 47);
                    break;

                case (char) (110):
                    return jjMoveStringLiteralDfa9_0(active0, 0x400000000L, active1, 0L);

                case (char) (111):
                    return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L, active1, 0L);

                case (char) (115):
                    return jjMoveStringLiteralDfa9_0(active0, 0x400000000000000L, active1, 0L);

                case (char) (116):
                    if ((active0 & (uint) SupportClass.Identity(0x8000000000000L)) != 0L)
                        return jjStartNfaWithStates_0(8, 51, 25);
                    break;

                case (char) (117):
                    return jjMoveStringLiteralDfa9_0(active0, 0x1000000L, active1, 0L);

                case (char) (118):
                    return jjMoveStringLiteralDfa9_0(active0, 0x2000000L, active1, 0L);

                default:
                    break;
            }
            return jjStartNfa_0(7, active0, active1);
        }

        private int jjMoveStringLiteralDfa9_0(ulong old0, ulong active0, ulong old1, ulong active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return jjStartNfa_0(7, old0, old1);
            try
            {
                curChar = input_stream.readChar();
            }
            catch (IOException e)
            {
                jjStopStringLiteralDfa_0(8, active0, active1);
                return 9;
            }
            switch (curChar)
            {
                case (char) (45):
                    return jjMoveStringLiteralDfa10_0(active0, 0x80000000000L, active1, 0L);

                case (char) (97):
                    return jjMoveStringLiteralDfa10_0(active0, 0x2000000L, active1, 0x4L);

                case (char) (99):
                    if ((active0 & 0x100000000L) != 0L)
                        return jjStartNfaWithStates_0(9, 32, 47);
                    return jjMoveStringLiteralDfa10_0(active0, 0x8400000000L, active1, 0L);

                case (char) (100):
                    return jjMoveStringLiteralDfa10_0(active0, 0x4000000L, active1, 0L);

                case (char) (105):
                    return jjMoveStringLiteralDfa10_0(active0, 0x400000000000000L, active1, 0L);

                case (char) (109):
                    return jjMoveStringLiteralDfa10_0(active0, 0x100000000800000L, active1, 0L);

                case (char) (110):
                    return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L, active1, 0L);

                case (char) (111):
                    return jjMoveStringLiteralDfa10_0(active0, 0x80000000L, active1, 0L);

                case (char) (115):
                    if ((active0 & 0x1000000L) != 0L)
                        return jjStartNfaWithStates_0(9, 24, 47);
                    break;

                case (char) (116):
                    return jjMoveStringLiteralDfa10_0(active0, 0x800004000000000L, active1, 0L);

                case (char) (120):
                    if ((active0 & 0x200000000000L) != 0L)
                        return jjStartNfaWithStates_0(9, 45, 47);
                    break;

                default:
                    break;
            }
            return jjStartNfa_0(8, active0, active1);
        }

        private int jjMoveStringLiteralDfa10_0(ulong old0, ulong active0, ulong old1, ulong active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return jjStartNfa_0(8, old0, old1);
            try
            {
                curChar = input_stream.readChar();
            }
            catch (IOException e)
            {
                jjStopStringLiteralDfa_0(9, active0, active1);
                return 10;
            }
            switch (curChar)
            {
                case (char) (45):
                    return jjMoveStringLiteralDfa11_0(active0, 0x100000000000L, active1, 0L);

                case (char) (97):
                    return jjMoveStringLiteralDfa11_0(active0, 0x100000000000000L, active1, 0L);

                case (char) (99):
                    return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4L);

                case (char) (100):
                    return jjMoveStringLiteralDfa11_0(active0, 0x80000000000L, active1, 0L);

                case (char) (101):
                    if ((active0 & 0x400000000L) != 0L)
                        return jjStartNfaWithStates_0(10, 34, 47);
                    else if ((active0 & 0x4000000000L) != 0L)
                        return jjStartNfaWithStates_0(10, 38, 47);
                    break;

                case (char) (105):
                    return jjMoveStringLiteralDfa11_0(active0, 0x800000004000000L, active1, 0L);

                case (char) (108):
                    return jjMoveStringLiteralDfa11_0(active0, 0x8002000000L, active1, 0L);

                case (char) (110):
                    if ((active0 & (uint) SupportClass.Identity(0x80000000L)) != 0L)
                        return jjStartNfaWithStates_0(10, 31, 47);
                    break;

                case (char) (111):
                    return jjMoveStringLiteralDfa11_0(active0, 0x400000000000000L, active1, 0L);

                case (char) (112):
                    return jjMoveStringLiteralDfa11_0(active0, 0x800000L, active1, 0L);

                default:
                    break;
            }
            return jjStartNfa_0(9, active0, active1);
        }

        private int jjMoveStringLiteralDfa11_0(ulong old0, ulong active0, ulong old1, ulong active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return jjStartNfa_0(9, old0, old1);
            try
            {
                curChar = input_stream.readChar();
            }
            catch (IOException e)
            {
                jjStopStringLiteralDfa_0(10, active0, active1);
                return 11;
            }
            switch (curChar)
            {
                case (char) (97):
                    return jjMoveStringLiteralDfa12_0(active0, 0x88000000000L, active1, 0L);

                case (char) (100):
                    return jjMoveStringLiteralDfa12_0(active0, 0x100000000000L, active1, 0L);

                case (char) (109):
                    return jjMoveStringLiteralDfa12_0(active0, 0x800000000000000L, active1, 0L);

                case (char) (110):
                    if ((active0 & 0x400000000000000L) != 0L)
                        return jjStartNfaWithStates_0(11, 58, 47);
                    break;

                case (char) (111):
                    return jjMoveStringLiteralDfa12_0(active0, 0x800000L, active1, 0L);

                case (char) (114):
                    return jjMoveStringLiteralDfa12_0(active0, 0x4000000L, active1, 0L);

                case (char) (116):
                    return jjMoveStringLiteralDfa12_0(active0, 0x100000000000000L, active1, 0x4L);

                case (char) (117):
                    return jjMoveStringLiteralDfa12_0(active0, 0x2000000L, active1, 0L);

                default:
                    break;
            }
            return jjStartNfa_0(10, active0, active1);
        }

        private int jjMoveStringLiteralDfa12_0(ulong old0, ulong active0, ulong old1, ulong active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return jjStartNfa_0(10, old0, old1);
            try
            {
                curChar = input_stream.readChar();
            }
            catch (IOException e)
            {
                jjStopStringLiteralDfa_0(11, active0, active1);
                return 12;
            }
            switch (curChar)
            {
                case (char) (97):
                    return jjMoveStringLiteralDfa13_0(active0, 0x100000000000L, active1, 0L);

                case (char) (99):
                    return jjMoveStringLiteralDfa13_0(active0, 0x100000000000000L, active1, 0L);

                case (char) (101):
                    if ((active0 & (uint) SupportClass.Identity(0x800000000000000L)) != 0L)
                        return jjStartNfaWithStates_0(12, 59, 47);
                    return jjMoveStringLiteralDfa13_0(active0, 0x6000000L, active1, 0L);

                case (char) (105):
                    return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x4L);

                case (char) (114):
                    return jjMoveStringLiteralDfa13_0(active0, 0x800000L, active1, 0L);

                case (char) (115):
                    return jjMoveStringLiteralDfa13_0(active0, 0x8000000000L, active1, 0L);

                case (char) (116):
                    return jjMoveStringLiteralDfa13_0(active0, 0x80000000000L, active1, 0L);

                default:
                    break;
            }
            return jjStartNfa_0(11, active0, active1);
        }

        private int jjMoveStringLiteralDfa13_0(ulong old0, ulong active0, ulong old1, ulong active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return jjStartNfa_0(11, old0, old1);
            try
            {
                curChar = input_stream.readChar();
            }
            catch (IOException e)
            {
                jjStopStringLiteralDfa_0(12, active0, active1);
                return 13;
            }
            switch (curChar)
            {
                case (char) (97):
                    return jjMoveStringLiteralDfa14_0(active0, 0x800000L, active1, 0L);

                case (char) (99):
                    return jjMoveStringLiteralDfa14_0(active0, 0x4000000L, active1, 0L);

                case (char) (101):
                    if ((active0 & (uint) SupportClass.Identity(0x80000000000L)) != 0L)
                        return jjStartNfaWithStates_0(13, 43, 47);
                    break;

                case (char) (104):
                    if ((active0 & 0x100000000000000L) != 0L)
                        return jjStartNfaWithStates_0(13, 56, 47);
                    break;

                case (char) (115):
                    if ((active0 & 0x2000000L) != 0L)
                        return jjStartNfaWithStates_0(13, 25, 47);
                    else if ((active0 & (uint) SupportClass.Identity(0x8000000000L)) != 0L)
                        return jjStartNfaWithStates_0(13, 39, 47);
                    break;

                case (char) (116):
                    return jjMoveStringLiteralDfa14_0(active0, 0x100000000000L, active1, 0L);

                case (char) (118):
                    return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x4L);

                default:
                    break;
            }
            return jjStartNfa_0(12, active0, active1);
        }

        private int jjMoveStringLiteralDfa14_0(ulong old0, ulong active0, ulong old1, ulong active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return jjStartNfa_0(12, old0, old1);
            try
            {
                curChar = input_stream.readChar();
            }
            catch (IOException e)
            {
                jjStopStringLiteralDfa_0(13, active0, active1);
                return 14;
            }
            switch (curChar)
            {
                case (char) (97):
                    return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x4L);

                case (char) (101):
                    if ((active0 & 0x100000000000L) != 0L)
                        return jjStartNfaWithStates_0(14, 44, 47);
                    break;

                case (char) (108):
                    if ((active0 & 0x800000L) != 0L)
                        return jjStartNfaWithStates_0(14, 23, 47);
                    break;

                case (char) (116):
                    return jjMoveStringLiteralDfa15_0(active0, 0x4000000L, active1, 0L);

                default:
                    break;
            }
            return jjStartNfa_0(13, active0, active1);
        }

        private int jjMoveStringLiteralDfa15_0(ulong old0, ulong active0, ulong old1, ulong active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return jjStartNfa_0(13, old0, old1);
            try
            {
                curChar = input_stream.readChar();
            }
            catch (IOException e)
            {
                jjStopStringLiteralDfa_0(14, active0, active1);
                return 15;
            }
            switch (curChar)
            {
                case (char) (105):
                    return jjMoveStringLiteralDfa16_0(active0, 0x4000000L, active1, 0L);

                case (char) (116):
                    return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x4L);

                default:
                    break;
            }
            return jjStartNfa_0(14, active0, active1);
        }

        private int jjMoveStringLiteralDfa16_0(ulong old0, ulong active0, ulong old1, ulong active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return jjStartNfa_0(14, old0, old1);
            try
            {
                curChar = input_stream.readChar();
            }
            catch (IOException e)
            {
                jjStopStringLiteralDfa_0(15, active0, active1);
                return 16;
            }
            switch (curChar)
            {
                case (char) (105):
                    return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x4L);

                case (char) (111):
                    return jjMoveStringLiteralDfa17_0(active0, 0x4000000L, active1, 0L);

                default:
                    break;
            }
            return jjStartNfa_0(15, active0, active1);
        }

        private int jjMoveStringLiteralDfa17_0(ulong old0, ulong active0, ulong old1, ulong active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return jjStartNfa_0(15, old0, old1);
            try
            {
                curChar = input_stream.readChar();
            }
            catch (IOException e)
            {
                jjStopStringLiteralDfa_0(16, active0, active1);
                return 17;
            }
            switch (curChar)
            {
                case (char) (110):
                    if ((active0 & 0x4000000L) != 0L)
                        return jjStartNfaWithStates_0(17, 26, 47);
                    break;

                case (char) (111):
                    return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x4L);

                default:
                    break;
            }
            return jjStartNfa_0(16, active0, active1);
        }

        private int jjMoveStringLiteralDfa18_0(ulong old0, ulong active0, ulong old1, ulong active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return jjStartNfa_0(16, old0, old1);
            try
            {
                curChar = input_stream.readChar();
            }
            catch (IOException e)
            {
                jjStopStringLiteralDfa_0(17, 0L, active1);
                return 18;
            }
            switch (curChar)
            {
                case (char) (110):
                    if ((active1 & 0x4L) != 0L)
                        return jjStartNfaWithStates_0(18, 66, 47);
                    break;

                default:
                    break;
            }
            return jjStartNfa_0(17, 0L, active1);
        }

        private void jjCheckNAdd(int state)
        {
            if (jjrounds[state] != jjround)
            {
                jjstateSet[jjnewStateCnt++] = state;
                jjrounds[state] = jjround;
            }
        }

        private void jjAddStates(int start, int end)
        {
            do
            {
                jjstateSet[jjnewStateCnt++] = jjnextStates[start];
            } while (start++ != end);
        }

        private void jjCheckNAddTwoStates(int state1, int state2)
        {
            jjCheckNAdd(state1);
            jjCheckNAdd(state2);
        }

        private void jjCheckNAddStates(int start, int end)
        {
            do
            {
                jjCheckNAdd(jjnextStates[start]);
            } while (start++ != end);
        }

        private void jjCheckNAddStates(int start)
        {
            jjCheckNAdd(jjnextStates[start]);
            jjCheckNAdd(jjnextStates[start + 1]);
        }

        private int jjMoveNfa_0(int startState, int curPos)
        {
            int[] nextStates;
            int startsAt = 0;
            jjnewStateCnt = 47;
            int i = 1;
            jjstateSet[0] = startState;
            int j, kind = 0x7fffffff;
            for (;;)
            {
                if (++jjround == 0x7fffffff)
                    ReInitRounds();
                if (curChar < 64)
                {
                    ulong l = 1u << (int) curChar;
                    MatchLoop:
                    do
                    {
                        switch (jjstateSet[--i])
                        {
                            case 47:
                                if ((0x7ffe01000000000L & l) != 0L)
                                {
                                    if (kind > 102)
                                        kind = 102;
                                    jjCheckNAdd(29);
                                }
                                if ((0x7ffe01000000000L & l) != 0L)
                                {
                                    if (kind > 99)
                                        kind = 99;
                                    jjCheckNAddTwoStates(22, 26);
                                }
                                break;

                            case 48:
                            case 22:
                                if ((0x7ffe01000000000L & l) == 0L)
                                    break;
                                if (kind > 99)
                                    kind = 99;
                                jjCheckNAddTwoStates(22, 26);
                                break;

                            case 25:
                                if ((0x7ffe01000000000L & l) != 0L)
                                {
                                    if (kind > 102)
                                        kind = 102;
                                    jjCheckNAdd(29);
                                }
                                if ((0x7ffe01000000000L & l) != 0L)
                                {
                                    if (kind > 99)
                                        kind = 99;
                                    jjCheckNAddTwoStates(22, 26);
                                }
                                break;

                            case 24:
                                if ((0x7ffe01000000000L & l) != 0L)
                                {
                                    if (kind > 102)
                                        kind = 102;
                                    jjCheckNAdd(29);
                                }
                                if ((0x7ffe01000000000L & l) != 0L)
                                {
                                    if (kind > 99)
                                        kind = 99;
                                    jjCheckNAddTwoStates(22, 26);
                                }
                                break;

                            case 0:
                                if ((0x7ffe01000000000L & l) != 0L)
                                {
                                    if (kind > 102)
                                        kind = 102;
                                    jjCheckNAdd(29);
                                }
                                else if (curChar == 39)
                                    jjCheckNAddStates(0, 2);
                                else if (curChar == 34)
                                    jjCheckNAddStates(3, 5);
                                else if (curChar == 63)
                                    jjCheckNAddTwoStates(43, 44);
                                if ((0x7ffe01000000000L & l) != 0L)
                                {
                                    if (kind > 99)
                                        kind = 99;
                                    jjCheckNAddTwoStates(22, 26);
                                }
                                else if (curChar == 63)
                                    jjstateSet[jjnewStateCnt++] = 15;
                                if ((0x3ff000000000000L & l) != 0L)
                                {
                                    if (kind > 11)
                                        kind = 11;
                                    jjCheckNAddStates(6, 10);
                                }
                                else if (curChar == 36)
                                {
                                    if (kind > 100)
                                        kind = 100;
                                }
                                else if (curChar == 46)
                                    jjCheckNAdd(1);
                                if ((0x3ff000000000000L & l) != 0L)
                                {
                                    if (kind > 101)
                                        kind = 101;
                                }
                                else if (curChar == 36)
                                    jjstateSet[jjnewStateCnt++] = 19;
                                break;

                            case 23:
                                if ((0x7ffe01000000000L & l) != 0L)
                                {
                                    if (kind > 102)
                                        kind = 102;
                                    jjCheckNAdd(29);
                                }
                                if ((0x7ffe01000000000L & l) != 0L)
                                {
                                    if (kind > 99)
                                        kind = 99;
                                    jjCheckNAddTwoStates(22, 26);
                                }
                                break;

                            case 1:
                                if ((0x3ff000000000000L & l) == 0L)
                                    break;
                                if (kind > 12)
                                    kind = 12;
                                jjCheckNAddTwoStates(1, 2);
                                break;

                            case 3:
                                if ((0x280000000000L & l) != 0L)
                                    jjCheckNAdd(4);
                                break;

                            case 4:
                                if ((0x3ff000000000000L & l) == 0L)
                                    break;
                                if (kind > 12)
                                    kind = 12;
                                jjCheckNAdd(4);
                                break;

                            case 5:
                            case 8:
                                if (curChar == 34)
                                    jjCheckNAddStates(3, 5);
                                break;

                            case 6:
                                if (((uint) SupportClass.Identity(0xfffffffbffffffffL) & l) != 0L)
                                    jjCheckNAddStates(3, 5);
                                break;

                            case 9:
                                if (curChar == 34 && kind > 14)
                                    kind = 14;
                                break;

                            case 10:
                            case 13:
                                if (curChar == 39)
                                    jjCheckNAddStates(0, 2);
                                break;

                            case 11:
                                if (((uint) SupportClass.Identity(0xffffff7fffffffffL) & l) != 0L)
                                    jjCheckNAddStates(0, 2);
                                break;

                            case 14:
                                if (curChar == 39 && kind > 14)
                                    kind = 14;
                                break;

                            case 15:
                                if (curChar == 42)
                                    jjCheckNAdd(16);
                                break;

                            case 16:
                                if ((0x3ff001000000000L & l) != 0L)
                                    jjCheckNAddTwoStates(16, 17);
                                break;

                            case 17:
                                if (curChar == 42 && kind > 17)
                                    kind = 17;
                                break;

                            case 18:
                                if (curChar == 63)
                                    jjstateSet[jjnewStateCnt++] = 15;
                                break;

                            case 19:
                                if (curChar == 63)
                                    jjCheckNAdd(20);
                                break;

                            case 20:
                                if ((0x3ff001000000000L & l) == 0L)
                                    break;
                                if (kind > 18)
                                    kind = 18;
                                jjCheckNAdd(20);
                                break;

                            case 21:
                                if (curChar == 36)
                                    jjstateSet[jjnewStateCnt++] = 19;
                                break;

                            case 27:
                                if (curChar == 36 && kind > 100)
                                    kind = 100;
                                break;

                            case 28:
                                if ((0x3ff000000000000L & l) != 0L && kind > 101)
                                    kind = 101;
                                break;

                            case 29:
                                if ((0x7ffe01000000000L & l) == 0L)
                                    break;
                                if (kind > 102)
                                    kind = 102;
                                jjCheckNAdd(29);
                                break;

                            case 30:
                                if ((0x3ff000000000000L & l) == 0L)
                                    break;
                                if (kind > 11)
                                    kind = 11;
                                jjCheckNAddStates(6, 10);
                                break;

                            case 31:
                                if ((0x3ff000000000000L & l) == 0L)
                                    break;
                                if (kind > 11)
                                    kind = 11;
                                jjCheckNAdd(31);
                                break;

                            case 32:
                                if ((0x3ff000000000000L & l) != 0L)
                                    jjCheckNAddTwoStates(32, 33);
                                break;

                            case 33:
                                if (curChar != 46)
                                    break;
                                if (kind > 12)
                                    kind = 12;
                                jjCheckNAddTwoStates(34, 35);
                                break;

                            case 34:
                                if ((0x3ff000000000000L & l) == 0L)
                                    break;
                                if (kind > 12)
                                    kind = 12;
                                jjCheckNAddTwoStates(34, 35);
                                break;

                            case 36:
                                if ((0x280000000000L & l) != 0L)
                                    jjCheckNAdd(37);
                                break;

                            case 37:
                                if ((0x3ff000000000000L & l) == 0L)
                                    break;
                                if (kind > 12)
                                    kind = 12;
                                jjCheckNAdd(37);
                                break;

                            case 38:
                                if ((0x3ff000000000000L & l) != 0L)
                                    jjCheckNAddTwoStates(38, 39);
                                break;

                            case 40:
                                if ((0x280000000000L & l) != 0L)
                                    jjCheckNAdd(41);
                                break;

                            case 41:
                                if ((0x3ff000000000000L & l) == 0L)
                                    break;
                                if (kind > 12)
                                    kind = 12;
                                jjCheckNAdd(41);
                                break;

                            case 42:
                                if (curChar == 63)
                                    jjCheckNAddTwoStates(43, 44);
                                break;

                            case 43:
                                if ((0x3ff001000000000L & l) == 0L)
                                    break;
                                if (kind > 15)
                                    kind = 15;
                                jjCheckNAdd(43);
                                break;

                            case 44:
                                if ((0x3ff001000000000L & l) != 0L)
                                    jjCheckNAddTwoStates(44, 46);
                                break;

                            case 45:
                                if (curChar == 58 && kind > 16)
                                    kind = 16;
                                break;

                            case 46:
                                if (curChar == 38)
                                    jjstateSet[jjnewStateCnt++] = 45;
                                break;

                            default:
                                break;
                        }
                    } while (i != startsAt);
                }
                else if (curChar < 128)
                {
                    ulong l = 1u << (curChar & 63);
                    MatchLoop1:
                    do
                    {
                        switch (jjstateSet[--i])
                        {
                            case 47:
                                if ((0x47fffffe87ffffffL & l) != 0L)
                                {
                                    if (kind > 99)
                                        kind = 99;
                                    jjCheckNAddTwoStates(22, 26);
                                }
                                if ((0x7fffffe97fffffeL & l) != 0L)
                                {
                                    if (kind > 102)
                                        kind = 102;
                                    jjCheckNAdd(29);
                                }
                                if (curChar == 116)
                                    jjstateSet[jjnewStateCnt++] = 25;
                                break;

                            case 48:
                                if ((0x47fffffe87ffffffL & l) != 0L)
                                {
                                    if (kind > 99)
                                        kind = 99;
                                    jjCheckNAddTwoStates(22, 26);
                                }
                                if (curChar == 116)
                                    jjstateSet[jjnewStateCnt++] = 25;
                                break;

                            case 25:
                                if ((0x47fffffe87ffffffL & l) != 0L)
                                {
                                    if (kind > 99)
                                        kind = 99;
                                    jjCheckNAddTwoStates(22, 26);
                                }
                                if ((0x7fffffe97fffffeL & l) != 0L)
                                {
                                    if (kind > 102)
                                        kind = 102;
                                    jjCheckNAdd(29);
                                }
                                if (curChar == 121)
                                    jjstateSet[jjnewStateCnt++] = 24;
                                else if (curChar == 116)
                                    jjstateSet[jjnewStateCnt++] = 25;
                                break;

                            case 24:
                                if ((0x47fffffe87ffffffL & l) != 0L)
                                {
                                    if (kind > 99)
                                        kind = 99;
                                    jjCheckNAddTwoStates(22, 26);
                                }
                                if ((0x7fffffe97fffffeL & l) != 0L)
                                {
                                    if (kind > 102)
                                        kind = 102;
                                    jjCheckNAdd(29);
                                }
                                if (curChar == 112)
                                    jjstateSet[jjnewStateCnt++] = 23;
                                else if (curChar == 116)
                                    jjstateSet[jjnewStateCnt++] = 25;
                                break;

                            case 0:
                                if ((0x47fffffe87ffffffL & l) != 0L)
                                {
                                    if (kind > 99)
                                        kind = 99;
                                    jjCheckNAddTwoStates(22, 26);
                                }
                                if ((0x7fffffe97fffffeL & l) != 0L)
                                {
                                    if (kind > 102)
                                        kind = 102;
                                    jjCheckNAdd(29);
                                }
                                if ((0x7fffffe87fffffeL & l) != 0L)
                                {
                                    if (kind > 100)
                                        kind = 100;
                                }
                                if (curChar == 116)
                                    jjstateSet[jjnewStateCnt++] = 25;
                                break;

                            case 23:
                                if ((0x47fffffe87ffffffL & l) != 0L)
                                {
                                    if (kind > 99)
                                        kind = 99;
                                    jjCheckNAddTwoStates(22, 26);
                                }
                                if ((0x7fffffe97fffffeL & l) != 0L)
                                {
                                    if (kind > 102)
                                        kind = 102;
                                    jjCheckNAdd(29);
                                }
                                if (curChar == 101)
                                {
                                    if (kind > 99)
                                        kind = 99;
                                    jjCheckNAddTwoStates(22, 26);
                                }
                                else if (curChar == 116)
                                    jjstateSet[jjnewStateCnt++] = 25;
                                break;

                            case 2:
                                if ((0x2000000020L & l) != 0L)
                                    jjAddStates(11, 12);
                                break;

                            case 6:
                                if (((uint) SupportClass.Identity(0xffffffffefffffffL) & l) != 0L)
                                    jjCheckNAddStates(3, 5);
                                break;

                            case 7:
                                if (curChar == 92)
                                    jjstateSet[jjnewStateCnt++] = 8;
                                break;

                            case 8:
                                if (curChar == 92)
                                    jjCheckNAddStates(3, 5);
                                break;

                            case 11:
                                if (((uint) SupportClass.Identity(0xffffffffefffffffL) & l) != 0L)
                                    jjCheckNAddStates(0, 2);
                                break;

                            case 12:
                                if (curChar == 92)
                                    jjstateSet[jjnewStateCnt++] = 13;
                                break;

                            case 13:
                                if (curChar == 92)
                                    jjCheckNAddStates(0, 2);
                                break;

                            case 16:
                                if ((0x7fffffe87fffffeL & l) != 0L)
                                    jjAddStates(13, 14);
                                break;

                            case 20:
                                if ((0x7fffffe87fffffeL & l) == 0L)
                                    break;
                                if (kind > 18)
                                    kind = 18;
                                jjstateSet[jjnewStateCnt++] = 20;
                                break;

                            case 22:
                                if ((0x47fffffe87ffffffL & l) == 0L)
                                    break;
                                if (kind > 99)
                                    kind = 99;
                                jjCheckNAddTwoStates(22, 26);
                                break;

                            case 26:
                                if (curChar == 116)
                                    jjstateSet[jjnewStateCnt++] = 25;
                                break;

                            case 27:
                                if ((0x7fffffe87fffffeL & l) != 0L && kind > 100)
                                    kind = 100;
                                break;

                            case 29:
                                if ((0x7fffffe97fffffeL & l) == 0L)
                                    break;
                                if (kind > 102)
                                    kind = 102;
                                jjCheckNAdd(29);
                                break;

                            case 35:
                                if ((0x2000000020L & l) != 0L)
                                    jjAddStates(15, 16);
                                break;

                            case 39:
                                if ((0x2000000020L & l) != 0L)
                                    jjAddStates(17, 18);
                                break;

                            case 43:
                                if ((0x7fffffe87fffffeL & l) == 0L)
                                    break;
                                if (kind > 15)
                                    kind = 15;
                                jjstateSet[jjnewStateCnt++] = 43;
                                break;

                            case 44:
                                if ((0x7fffffe87fffffeL & l) != 0L)
                                    jjAddStates(19, 20);
                                break;

                            default:
                                break;
                        }
                    } while (i != startsAt);
                }
                else
                {
                    int hiByte = (int) (curChar >> 8);
                    int i1 = hiByte >> 6;
                    ulong l1 = 1u << (hiByte & 63);
                    int i2 = (curChar & 0xff) >> 6;
                    ulong l2 = 1u << (curChar & 63);
                    MatchLoop1:
                    do
                    {
                        switch (jjstateSet[--i])
                        {
                            case 47:
                                if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 99)
                                        kind = 99;
                                    jjCheckNAddTwoStates(22, 26);
                                }
                                if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 102)
                                        kind = 102;
                                    jjCheckNAdd(29);
                                }
                                break;

                            case 48:
                            case 22:
                                if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                                    break;
                                if (kind > 99)
                                    kind = 99;
                                jjCheckNAddTwoStates(22, 26);
                                break;

                            case 25:
                                if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 99)
                                        kind = 99;
                                    jjCheckNAddTwoStates(22, 26);
                                }
                                if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 102)
                                        kind = 102;
                                    jjCheckNAdd(29);
                                }
                                break;

                            case 24:
                                if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 99)
                                        kind = 99;
                                    jjCheckNAddTwoStates(22, 26);
                                }
                                if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 102)
                                        kind = 102;
                                    jjCheckNAdd(29);
                                }
                                break;

                            case 0:
                                if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 99)
                                        kind = 99;
                                    jjCheckNAddTwoStates(22, 26);
                                }
                                if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 100)
                                        kind = 100;
                                }
                                if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 101)
                                        kind = 101;
                                }
                                if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 102)
                                        kind = 102;
                                    jjCheckNAdd(29);
                                }
                                break;

                            case 23:
                                if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 99)
                                        kind = 99;
                                    jjCheckNAddTwoStates(22, 26);
                                }
                                if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 102)
                                        kind = 102;
                                    jjCheckNAdd(29);
                                }
                                break;

                            case 6:
                                if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                    jjAddStates(3, 5);
                                break;

                            case 11:
                                if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                    jjAddStates(0, 2);
                                break;

                            case 16:
                                if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                    jjAddStates(13, 14);
                                break;

                            case 20:
                                if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                                    break;
                                if (kind > 18)
                                    kind = 18;
                                jjstateSet[jjnewStateCnt++] = 20;
                                break;

                            case 27:
                                if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 100)
                                    kind = 100;
                                break;

                            case 28:
                                if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 101)
                                    kind = 101;
                                break;

                            case 29:
                                if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                                    break;
                                if (kind > 102)
                                    kind = 102;
                                jjCheckNAdd(29);
                                break;

                            case 43:
                                if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                                    break;
                                if (kind > 15)
                                    kind = 15;
                                jjstateSet[jjnewStateCnt++] = 43;
                                break;

                            case 44:
                                if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                    jjAddStates(19, 20);
                                break;

                            default:
                                break;
                        }
                    } while (i != startsAt);
                }
                if (kind != 0x7fffffff)
                {
                    jjmatchedKind = kind;
                    jjmatchedPos = curPos;
                    kind = 0x7fffffff;
                }
                ++curPos;
                if ((i = jjnewStateCnt) == (startsAt = 47 - (jjnewStateCnt = startsAt)))
                    return curPos;
                try
                {
                    curChar = input_stream.readChar();
                }
                catch (IOException e)
                {
                    return curPos;
                }
            }
        }

        private int jjMoveStringLiteralDfa0_1()
        {
            return jjMoveNfa_1(1, 0);
        }

        private int jjMoveNfa_1(int startState, int curPos)
        {
            int[] nextStates;
            int startsAt = 0;
            jjnewStateCnt = 4;
            int i = 1;
            jjstateSet[0] = startState;
            int j, kind = 0x7fffffff;
            for (;;)
            {
                if (++jjround == 0x7fffffff)
                    ReInitRounds();
                if (curChar < 64)
                {
                    ulong l = 1u << (int) curChar;
                    MatchLoop1:
                    do
                    {
                        switch (jjstateSet[--i])
                        {
                            case 1:
                                if ((0x3ff000000000000L & l) != 0L)
                                {
                                    if (kind > 7)
                                        kind = 7;
                                    jjCheckNAdd(0);
                                }
                                else if ((0x2400L & l) != 0L)
                                {
                                    if (kind > 8)
                                        kind = 8;
                                }
                                if (curChar == 13)
                                    jjstateSet[jjnewStateCnt++] = 2;
                                break;

                            case 0:
                                if ((0x3ff000000000000L & l) == 0L)
                                    break;
                                kind = 7;
                                jjCheckNAdd(0);
                                break;

                            case 2:
                                if (curChar == 10 && kind > 8)
                                    kind = 8;
                                break;

                            case 3:
                                if (curChar == 13)
                                    jjstateSet[jjnewStateCnt++] = 2;
                                break;

                            default:
                                break;
                        }
                    } while (i != startsAt);
                }
                else if (curChar < 128)
                {
                    ulong l = 1u << (curChar & 63);
                    MatchLoop1:
                    do
                    {
                        switch (jjstateSet[--i])
                        {
                            case 1:
                            case 0:
                                if ((0x7fffffe00000000L & l) == 0L)
                                    break;
                                kind = 7;
                                jjCheckNAdd(0);
                                break;

                            default:
                                break;
                        }
                    } while (i != startsAt);
                }
                else
                {
                    int hiByte = (int) (curChar >> 8);
                    int i1 = hiByte >> 6;
                    ulong l1 = 1u << (hiByte & 63);
                    int i2 = (curChar & 0xff) >> 6;
                    ulong l2 = 1u << (curChar & 63);
                    MatchLoop1:
                    do
                    {
                        switch (jjstateSet[--i])
                        {
                            default:
                                break;
                        }
                    } while (i != startsAt);
                }
                if (kind != 0x7fffffff)
                {
                    jjmatchedKind = kind;
                    jjmatchedPos = curPos;
                    kind = 0x7fffffff;
                }
                ++curPos;
                if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
                    return curPos;
                try
                {
                    curChar = input_stream.readChar();
                }
                catch (IOException e)
                {
                    return curPos;
                }
            }
        }

        private static bool jjCanMove_0(int hiByte, int i1, int i2, ulong l1, ulong l2)
        {
            switch (hiByte)
            {
                case 0:
                    return ((jjbitVec2[i2] & l2) != 0L);

                default:
                    if ((jjbitVec0[i1] & l1) != 0L)
                        return true;
                    return false;
            }
        }

        private static bool jjCanMove_1(int hiByte, int i1, int i2, ulong l1, ulong l2)
        {
            switch (hiByte)
            {
                case 0:
                    return ((jjbitVec4[i2] & l2) != 0L);

                case 48:
                    return ((jjbitVec5[i2] & l2) != 0L);

                case 49:
                    return ((jjbitVec6[i2] & l2) != 0L);

                case 51:
                    return ((jjbitVec7[i2] & l2) != 0L);

                case 61:
                    return ((jjbitVec8[i2] & l2) != 0L);

                default:
                    if ((jjbitVec3[i1] & l1) != 0L)
                        return true;
                    return false;
            }
        }

        private static bool jjCanMove_2(int hiByte, int i1, int i2, ulong l1, ulong l2)
        {
            switch (hiByte)
            {
                case 6:
                    return ((jjbitVec11[i2] & l2) != 0L);

                case 11:
                    return ((jjbitVec12[i2] & l2) != 0L);

                case 13:
                    return ((jjbitVec13[i2] & l2) != 0L);

                case 14:
                    return ((jjbitVec14[i2] & l2) != 0L);

                case 16:
                    return ((jjbitVec15[i2] & l2) != 0L);

                default:
                    if ((jjbitVec9[i1] & l1) != 0L)
                        if ((jjbitVec10[i2] & l2) == 0L)
                            return false;
                        else
                            return true;
                    return false;
            }
        }

        public virtual void ReInit(SimpleCharStream stream)
        {
            jjmatchedPos = jjnewStateCnt = 0;
            curLexState = defaultLexState;
            input_stream = stream;
            ReInitRounds();
        }

        private void ReInitRounds()
        {
            int i;
            jjround = (int) SupportClass.Identity(0x80000001);
            for (i = 47; i-- > 0;)
                jjrounds[i] = (int) SupportClass.Identity(0x80000000);
        }

        public virtual void ReInit(SimpleCharStream stream, int lexState)
        {
            ReInit(stream);
            SwitchTo(lexState);
        }

        public void SwitchTo(int lexState)
        {
            if (lexState >= 2 || lexState < 0)
                throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
            else
                curLexState = lexState;
        }

        protected internal virtual Token jjFillToken()
        {
            Token t = Token.newToken(jjmatchedKind);
            t.kind = jjmatchedKind;
            String im = jjstrLiteralImages[jjmatchedKind];
            t.image = (im == null) ? input_stream.GetImage() : im;
            t.beginLine = input_stream.BeginLine;
            t.beginColumn = input_stream.BeginColumn;
            t.endLine = input_stream.EndLine;
            t.endColumn = input_stream.EndColumn;
            return t;
        }
    }
}