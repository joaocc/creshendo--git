/* Generated By:MinosseCC: Do not edit this line. SimpleCharStream.cs Version 3.0 */
using System;
using System.Diagnostics;
using System.IO;

namespace Creshendo.Util.Parser.Clips2
{
    /// <summary>
    /// An implementation of interface CharStream, where the stream is assumed to
    /// contain only ASCII characters (without unicode processing).
    /// </summary>
    public class SimpleCharStream
    {
        public static readonly bool staticFlag = false;
        private int available;
        protected int[] bufcolumn;
        protected char[] buffer;
        protected int[] bufline;
        public int bufpos = -1;
        private int bufsize;

        protected int column = 0;
        protected int inBuf = 0;
        internal TextReader inputStream;
        protected int line = 1;
        protected int maxNextCharInd = 0;

        protected bool prevCharIsCR = false;
        protected bool prevCharIsLF = false;
        private int tokenBegin;

        public SimpleCharStream(TextReader dstream, int startline,
                                int startcolumn, int buffersize)
        {
            inputStream = dstream;
            line = startline;
            column = startcolumn - 1;

            available = bufsize = buffersize;
            buffer = new char[buffersize];
            bufline = new int[buffersize];
            bufcolumn = new int[buffersize];
        }

        public SimpleCharStream(TextReader dstream, int startline,
                                int startcolumn) :
                                    this(dstream, startline, startcolumn, 4096)
        {
        }

        public SimpleCharStream(TextReader dstream) :
            this(dstream, 1, 1, 4096)
        {
        }

        public SimpleCharStream(Stream dstream, int startline,
                                int startcolumn, int buffersize) :
                                    this(new StreamReader(dstream), startline, startcolumn, 4096)
        {
        }

        public SimpleCharStream(Stream dstream, int startline,
                                int startcolumn) :
                                    this(dstream, startline, startcolumn, 4096)
        {
        }

        public SimpleCharStream(Stream dstream) :
            this(dstream, 1, 1, 4096)
        {
        }


        [Obsolete("Deprecated - use EndColumn instead.", false)]
        public int Column
        {
            get { return bufcolumn[bufpos]; }
        }

        [Obsolete("Deprecated - use EndLine instead.", false)]
        public int Line
        {
            get { return bufline[bufpos]; }
        }

        public int EndColumn
        {
            get { return bufcolumn[bufpos]; }
        }

        public int EndLine
        {
            get { return bufline[bufpos]; }
        }

        public int BeginColumn
        {
            get { return bufcolumn[tokenBegin]; }
        }

        public int BeginLine
        {
            get { return bufline[tokenBegin]; }
        }

        protected void ExpandBuff(bool wrapAround)
        {
            char[] newbuffer = new char[bufsize + 2048];
            int[] newbufline = new int[bufsize + 2048];
            int[] newbufcolumn = new int[bufsize + 2048];

            try
            {
                if (wrapAround)
                {
                    Array.Copy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
                    Array.Copy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
                    buffer = newbuffer;

                    Array.Copy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
                    Array.Copy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
                    bufline = newbufline;

                    Array.Copy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
                    Array.Copy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
                    bufcolumn = newbufcolumn;

                    maxNextCharInd = (bufpos += (bufsize - tokenBegin));
                }
                else
                {
                    Array.Copy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
                    buffer = newbuffer;

                    Array.Copy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
                    bufline = newbufline;

                    Array.Copy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
                    bufcolumn = newbufcolumn;

                    maxNextCharInd = (bufpos -= tokenBegin);
                }
            }
            catch (Exception e)
            {
                throw e;
            }


            bufsize += 2048;
            available = bufsize;
            tokenBegin = 0;
        }

        protected void FillBuff()
        {
            if (maxNextCharInd == available)
            {
                if (available == bufsize)
                {
                    if (tokenBegin > 2048)
                    {
                        bufpos = maxNextCharInd = 0;
                        available = tokenBegin;
                    }
                    else if (tokenBegin < 0)
                        bufpos = maxNextCharInd = 0;
                    else
                        ExpandBuff(false);
                }
                else if (available > tokenBegin)
                    available = bufsize;
                else if ((tokenBegin - available) < 2048)
                    ExpandBuff(true);
                else
                    available = tokenBegin;
            }

            int i;
            try
            {
                if ((i = inputStream.Read(buffer, maxNextCharInd,
                                          available - maxNextCharInd)) == -1)
                {
                    inputStream.Close();
                    throw new IOException();
                }
                else
                    maxNextCharInd += i;
                return;
            }
            catch (IOException e)
            {
                --bufpos;
                Backup(0);
                if (tokenBegin == -1)
                    tokenBegin = bufpos;
                throw e;
            }
        }

        [DebuggerNonUserCode]
        public char BeginToken()
        {
            tokenBegin = -1;
            try
            {
                char c = ReadChar();
                tokenBegin = bufpos;
                return c;
            }
            catch (IOException e)
            {
                if (tokenBegin == -1)
                    tokenBegin = bufpos;
                throw e;
            }
        }

        protected void UpdateLineColumn(char c)
        {
            column++;

            if (prevCharIsLF)
            {
                prevCharIsLF = false;
                line += (column = 1);
            }
            else if (prevCharIsCR)
            {
                prevCharIsCR = false;
                if (c == '\n')
                {
                    prevCharIsLF = true;
                }
                else
                    line += (column = 1);
            }

            switch (c)
            {
                case '\r':
                    prevCharIsCR = true;
                    break;
                case '\n':
                    prevCharIsLF = true;
                    break;
                case '\t':
                    column--;
                    column += (8 - (column & 07));
                    break;
                default:
                    break;
            }

            bufline[bufpos] = line;
            bufcolumn[bufpos] = column;
        }

        public char ReadCharOriginal()
        {
            if (inBuf > 0)
            {
                --inBuf;

                if (++bufpos == bufsize)
                {
                    bufpos = 0;
                }

                return buffer[bufpos];
            }

            if (++bufpos >= maxNextCharInd)
            {
                FillBuff();
            }

            char c = buffer[bufpos];

            UpdateLineColumn(c);

            return (c);
        }

        [DebuggerNonUserCode]
        public char ReadChar()
        {
            if (inBuf > 0)
            {
                --inBuf;

                if (++bufpos == bufsize)
                {
                    bufpos = 0;
                }

                return buffer[bufpos];
            }

            if (++bufpos >= maxNextCharInd)
            {
                FillBuff();
            }
            if (bufpos >= maxNextCharInd)
            {
                bufpos--;
                if (bufpos < 0)
                {
                    bufpos += bufsize;
                }
                throw new IOException("End of file");
            }
            char c = buffer[bufpos];

            UpdateLineColumn(c);

            return (c);
        }

        public void Backup(int amount)
        {
            inBuf += amount;
            if ((bufpos -= amount) < 0)
                bufpos += bufsize;
        }

        public void ReInit(TextReader dstream, int startline,
                           int startcolumn, int buffersize)
        {
            inputStream = dstream;
            line = startline;
            column = startcolumn - 1;

            if (buffer == null || buffersize != buffer.Length)
            {
                available = bufsize = buffersize;
                buffer = new char[buffersize];
                bufline = new int[buffersize];
                bufcolumn = new int[buffersize];
            }
            prevCharIsLF = prevCharIsCR = false;
            tokenBegin = inBuf = maxNextCharInd = 0;
            bufpos = -1;
        }

        public void ReInit(TextReader dstream, int startline,
                           int startcolumn)
        {
            ReInit(dstream, startline, startcolumn, 4096);
        }

        public void ReInit(TextReader dstream)
        {
            ReInit(dstream, 1, 1, 4096);
        }

        public void ReInit(Stream dstream, int startline,
                           int startcolumn, int buffersize)
        {
            ReInit(new StreamReader(dstream), startline, startcolumn, 4096);
        }

        public void ReInit(Stream dstream)
        {
            ReInit(dstream, 1, 1, 4096);
        }

        public void ReInit(Stream dstream, int startline,
                           int startcolumn)
        {
            ReInit(dstream, startline, startcolumn, 4096);
        }

        public string GetImage()
        {
            if (bufpos >= tokenBegin)
                return new string(buffer, tokenBegin, bufpos - tokenBegin + 1);
            else
                return new string(buffer, tokenBegin, bufsize - tokenBegin) +
                       new string(buffer, 0, bufpos + 1);
        }

        public char[] GetSuffix(int len)
        {
            char[] ret = new char[len];

            if ((bufpos + 1) >= len)
                Array.Copy(buffer, bufpos - len + 1, ret, 0, len);
            else
            {
                Array.Copy(buffer, bufsize - (len - bufpos - 1), ret, 0,
                           len - bufpos - 1);
                Array.Copy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
            }

            return ret;
        }

        public void Done()
        {
            buffer = null;
            bufline = null;
            bufcolumn = null;
        }

        /// <summary>
        /// Method to adjust line and column numbers for the start of a token.
        /// </summary>
        public void AdjustBeginLineColumn(int newLine, int newCol)
        {
            int start = tokenBegin;
            int len;

            if (bufpos >= tokenBegin)
            {
                len = bufpos - tokenBegin + inBuf + 1;
            }
            else
            {
                len = bufsize - tokenBegin + bufpos + 1 + inBuf;
            }

            int i = 0, j = 0, k = 0;
            int nextColDiff = 0, columnDiff = 0;

            while (i < len &&
                   bufline[j = start%bufsize] == bufline[k = ++start%bufsize])
            {
                bufline[j] = newLine;
                nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];
                bufcolumn[j] = newCol + columnDiff;
                columnDiff = nextColDiff;
                i++;
            }

            if (i < len)
            {
                bufline[j] = newLine++;
                bufcolumn[j] = newCol + columnDiff;

                while (i++ < len)
                {
                    if (bufline[j = start%bufsize] != bufline[++start%bufsize])
                        bufline[j] = newLine++;
                    else
                        bufline[j] = newLine;
                }
            }

            line = bufline[j];
            column = bufcolumn[j];
        }
    }
}