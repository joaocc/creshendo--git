/* Generated By:MinosseCC: Do not edit this line. CLIPSParser.cs */
using System;
using System.Collections;
using System.IO;
using Creshendo.Functions;
using Creshendo.Util.Rete;
using Creshendo.Util.Rule;

namespace Creshendo.Util.Parser.Clips2
{
    public class CLIPSParser : CLIPSParserConstants
    {
        private static int[] mcc_la1_0;
        private static int[] mcc_la1_1;
        private static int[] mcc_la1_2;
        private static int[] mcc_la1_3;
        protected Rete.Rete engine = null;
        protected Token jj_lastpos = null;
        protected Token jj_nt = null;
        protected Token jj_scanpos = null;
        public bool lookingAhead = false;
        private MccCalls[] mcc_2_rtns = new MccCalls[42];
        private int mcc_endpos;
        private ArrayList mcc_expentries = new ArrayList();
        private int[] mcc_expentry;
        private int mcc_gc = 0;
        private int mcc_gen;
        private SimpleCharStream mcc_input_stream;
        private int mcc_kind = -1;
        private int mcc_la;
        private int[] mcc_la1 = new int[63];
        private Token mcc_lastpos;
        private int[] mcc_lasttokens = new int[100];
        private LookaheadSuccess mcc_ls = new LookaheadSuccess();
        public Token mcc_nt;
        private int mcc_ntk;
        private bool mcc_rescan = false;
        private Token mcc_scanpos;
        private bool mcc_semLA;
        public Token token;
        public CLIPSParserTokenManager token_source;

        static CLIPSParser()
        {
            mcc_gla1_0();
            mcc_gla1_1();
            mcc_gla1_2();
            mcc_gla1_3();
        }


        public CLIPSParser(Rete.Rete eng, TextReader stream)
        {
            mcc_input_stream = new SimpleCharStream(stream, 1, 1);
            token_source = new CLIPSParserTokenManager(mcc_input_stream);
            token = new Token();
            mcc_ntk = -1;
            mcc_gen = 0;
            for (int i = 0; i < 63; i++) mcc_la1[i] = -1;
            for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
            engine = eng;
        }

        public CLIPSParser(Rete.Rete eng, Stream stream)
        {
            mcc_input_stream = new SimpleCharStream(stream, 1, 1);
            token_source = new CLIPSParserTokenManager(mcc_input_stream);
            token = new Token();
            mcc_ntk = -1;
            mcc_gen = 0;
            for (int i = 0; i < 63; i++) mcc_la1[i] = -1;
            for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
            engine = eng;
        }

        public CLIPSParser(Stream stream)
        {
            mcc_input_stream = new SimpleCharStream(stream, 1, 1);
            token_source = new CLIPSParserTokenManager(mcc_input_stream);
            token = new Token();
            mcc_ntk = -1;
            mcc_gen = 0;
            for (int i = 0; i < 63; i++) mcc_la1[i] = -1;
            for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
        }

        public CLIPSParser(TextReader stream)
        {
            mcc_input_stream = new SimpleCharStream(stream, 1, 1);
            token_source = new CLIPSParserTokenManager(mcc_input_stream);
            token = new Token();
            mcc_ntk = -1;
            mcc_gen = 0;
            for (int i = 0; i < 63; i++) mcc_la1[i] = -1;
            for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
        }

        public CLIPSParser(CLIPSParserTokenManager tm)
        {
            token_source = tm;
            token = new Token();
            mcc_ntk = -1;
            mcc_gen = 0;
            for (int i = 0; i < 63; i++) mcc_la1[i] = -1;
            for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
        }

        public void close()
        {
            engine = null;
            if (token != null)
            {
                token.Clear();
                token = null;
            }
            if (jj_nt != null)
            {
                jj_nt.Clear();
                jj_nt = null;
            }
            if (jj_scanpos != null)
            {
                jj_scanpos.Clear();
                jj_scanpos = null;
            }
            if (jj_lastpos != null)
            {
                jj_lastpos.Clear();
                jj_lastpos = null;
            }
            try
            {
                mcc_input_stream.inputStream.Close();
            }
            catch (IOException e)
            {
                // later on log the error
            }
        }

        public Object basicExpr()
        {
            Object exp = null;
            Token obj = null;
            ShellFunction func = null;
            IParameter[] pms = null;
            ShellBoundParam sbp = null;

            int HACK = (mcc_ntk == -1) ? mcc_mntk() : mcc_ntk;

            switch (HACK)
            {
                case BIND:
                case BIND3:
                case BIND4:
                    obj = getBindType();
                    func = new ShellFunction();
                    func.Name = "echo";
                    sbp = new ShellBoundParam();
                    sbp.DefglobalName = obj.image;
                    pms = new ShellBoundParam[] {sbp};
                    func.setParameters(pms);
                    {
                        if (true)
                        {
                            return func;
                        }
                    }
                    break;
                case LBRACE:
                    mcc_consume_token(LBRACE);
                    exp = expr();
                    mcc_consume_token(RBRACE);
                    {
                        if (true)
                        {
                            return exp;
                        }
                    }
                    break;
                case 0:
                    mcc_consume_token(0);
                    {
                        if (true)
                        {
                            return null;
                        }
                    }
                    break;
                default:
                    mcc_la1[0] = mcc_gen;
                    mcc_consume_token(-1);
                    throw new ParseException();
            }
            throw new Exception("Missing return statement in function");
        }

// main expression for loading a data file
        public ArrayList loadExpr()
        {
            ArrayList facts = new ArrayList();
            while (true)
            {
                loadAllExpr(facts);
                switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                {
                    case LBRACE:
                        ;
                        break;
                    default:
                        mcc_la1[1] = mcc_gen;
                        goto label_1;
                }
            }
            label_1:
            ;

            {
                if (true) return facts;
            }
            throw new Exception("Missing return statement in function");
        }

// this method is used to load data
        public void loadAllExpr(ArrayList list)
        {
            ValueParam[] param = null;
            param = assertBody();
            list.Add(param);
        }

// typeExpr is only responsible for parsing string and bigdecimal types
        public Object typeExpr()
        {
            Token exp;
            switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
            {
                case STRING_LITERAL:
                    exp = mcc_consume_token(STRING_LITERAL);
                    String strlit = exp.image;
                    strlit = ParserUtils.getStringLiteral(strlit);
                    {
                        if (true) return strlit;
                    }
                    break;
                case INTEGER_LITERAL:
                    exp = mcc_consume_token(INTEGER_LITERAL);
                    // we use Decimal
                    {
                        if (true) return Convert.ToDecimal(exp.image);
                    }
                    break;
                case FLOATING_POINT_LITERAL:
                    exp = mcc_consume_token(FLOATING_POINT_LITERAL);
                    // we use float, double
                    {
                        if (true) return Convert.ToDecimal(exp.image);
                    }
                    break;
                case PATH_LITERAL:
                    exp = mcc_consume_token(PATH_LITERAL);
                    {
                        if (true) return exp.image;
                    }
                    break;
                default:
                    mcc_la1[2] = mcc_gen;
                    mcc_consume_token(-1);
                    throw new ParseException();
            }
            throw new Exception("Missing return statement in function");
        }

        public Object expr()
        {
            Token exp = null;
            Token exp2 = null;
            Token exp3 = null;
            String body;
            ValueParam param;
            Deffact fact;
            Deftemplate templ;
            Defrule rule;
            ShellFunction func;
            DeffunctionFunction dffunc;
            ArrayList list = new ArrayList();
            ValueParam[] pms;
            ArrayList infunc = new ArrayList();
            switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
            {
                case ASSERT:
                    exp = mcc_consume_token(ASSERT);
                    mcc_consume_token(LBRACE);
                    exp2 = mcc_consume_token(IDENTIFIER);
                    while (true)
                    {
                        assertContents(list);
                        switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                        {
                            case LBRACE:
                                ;
                                break;
                            default:
                                mcc_la1[3] = mcc_gen;
                                goto label_2;
                        }
                    }
                    label_2:
                    ;

                    mcc_consume_token(RBRACE);
                    func = new ShellFunction();
                    func.Name = exp.image;
                    pms = new ValueParam[2];
                    pms[0] = new ValueParam(Constants.STRING_TYPE, exp2.image);
                    pms[1] = new ValueParam(Constants.OBJECT_TYPE, list.ToArray());
                    func.setParameters(pms);
                    exp.Clear();
                    exp = null;
                    {
                        if (true) return func;
                    }
                    break;
                case ASSERTTEMPORAL:
                    exp = mcc_consume_token(ASSERTTEMPORAL);
                    mcc_consume_token(LBRACE);
                    exp2 = mcc_consume_token(IDENTIFIER);
                    while (true)
                    {
                        assertContents(list);
                        switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                        {
                            case LBRACE:
                                ;
                                break;
                            default:
                                mcc_la1[4] = mcc_gen;
                                goto label_3;
                        }
                    }
                    label_3:
                    ;

                    mcc_consume_token(RBRACE);
                    func = new ShellFunction();
                    func.Name = exp.image;
                    pms = new ValueParam[2];
                    pms[0] = new ValueParam(Constants.STRING_TYPE, exp2.image);
                    pms[1] = new ValueParam(Constants.OBJECT_TYPE, list.ToArray());
                    func.setParameters(pms);
                    exp.Clear();
                    exp = null;
                    {
                        if (true) return func;
                    }
                    break;
                case RETRACT:
                    exp = mcc_consume_token(RETRACT);
                    switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                    {
                        case BIND:
                            exp2 = mcc_consume_token(BIND);
                            break;
                        case INTEGER_LITERAL:
                            exp2 = mcc_consume_token(INTEGER_LITERAL);
                            break;
                        default:
                            mcc_la1[5] = mcc_gen;
                            mcc_consume_token(-1);
                            throw new ParseException();
                    }
                    func = new ShellFunction();
                    func.Name = exp.image;
                    IParameter[] rpms = new IParameter[1];
                    if (exp2.image.StartsWith("?"))
                    {
                        BoundParam bp1 = new BoundParam();
                        bp1.VariableName = exp2.image;
                        rpms[0] = bp1;
                    }
                    else
                    {
                        ValueParam vp = new ValueParam(Constants.BIG_DECIMAL, Convert.ToDecimal(exp2.image));
                        rpms[0] = vp;
                    }
                    func.setParameters(rpms);
                    exp.Clear();
                    exp = null;
                    exp2.Clear();
                    exp2 = null;
                    {
                        if (true) return func;
                    }
                    break;
                case MODIFY:
                    exp = mcc_consume_token(MODIFY);
                    exp2 = mcc_consume_token(BIND);
                    assertContents(list);
                    func = new ShellFunction();
                    func.Name = exp.image;
                    BoundParam bp = new BoundParam();
                    bp.VariableName = exp2.image;
                    list.Insert(0, bp);
                    func.setParameters(ParameterUtils.slotToParameters(list));
                    exp.Clear();
                    exp = null;
                    {
                        if (true) return func;
                    }
                    break;
                case DEFTEMPLATE:
                    exp = mcc_consume_token(DEFTEMPLATE);
                    templ = templateExpr();
                    func = new ShellFunction();
                    func.Name = exp.image;
                    pms = new ValueParam[1];
                    pms[0] = new ValueParam(Constants.OBJECT_TYPE, templ);
                    func.setParameters(pms);
                    {
                        if (true) return func;
                    }
                    break;
                case DEFMODULE:
                    exp = mcc_consume_token(DEFMODULE);
                    body = getIdentifier();
                    func = new ShellFunction();
                    func.Name = exp.image;
                    pms = new ValueParam[1];
                    pms[0] = new ValueParam(Constants.STRING_TYPE, body);
                    func.setParameters(pms);
                    {
                        if (true) return func;
                    }
                    break;
                case DEFRULE:
                    exp = mcc_consume_token(DEFRULE);
                    rule = ruleBody();
                    func = new ShellFunction();
                    func.Name = exp.image;
                    pms = new ValueParam[1];
                    pms[0] = new ValueParam(Constants.OBJECT_TYPE, rule);
                    func.setParameters(pms);
                    {
                        if (true) return func;
                    }
                    break;
                case DEFCLASS:
                    exp = mcc_consume_token(DEFCLASS);
                    switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                    {
                        case LBRACE:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case STRING_LITERAL:
                        case BIND:
                        case BIND3:
                        case BIND4:
                        case TRUE:
                        case TRUE2:
                        case FALSE:
                        case FALSE2:
                        case IDENTIFIER:
                        case PATH_LITERAL:
                            while (true)
                            {
                                valueParams(list);
                                switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                                {
                                    case LBRACE:
                                    case INTEGER_LITERAL:
                                    case FLOATING_POINT_LITERAL:
                                    case STRING_LITERAL:
                                    case BIND:
                                    case BIND3:
                                    case BIND4:
                                    case TRUE:
                                    case TRUE2:
                                    case FALSE:
                                    case FALSE2:
                                    case IDENTIFIER:
                                    case PATH_LITERAL:
                                        ;
                                        break;
                                    default:
                                        mcc_la1[6] = mcc_gen;
                                        goto label_4;
                                }
                            }
                            label_4:
                            ;

                            break;
                        default:
                            mcc_la1[7] = mcc_gen;
                            ;
                            break;
                    }
                    func = new ShellFunction();
                    func.Name = exp.image;
                    func.setParameters(ParameterUtils.convertParameters(list));
                    list.Clear();
                    {
                        if (true) return func;
                    }
                    break;
                case DEFFUNCTION:
                    exp = mcc_consume_token(DEFFUNCTION);
                    exp2 = mcc_consume_token(IDENTIFIER);
                    mcc_consume_token(LBRACE);
                    switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                    {
                        case BIND:
                        case BIND3:
                        case BIND4:
                            while (true)
                            {
                                bindingParams(list);
                                switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                                {
                                    case BIND:
                                    case BIND3:
                                    case BIND4:
                                        ;
                                        break;
                                    default:
                                        mcc_la1[8] = mcc_gen;
                                        goto label_5;
                                }
                            }
                            label_5:
                            ;

                            break;
                        default:
                            mcc_la1[9] = mcc_gen;
                            ;
                            break;
                    }
                    mcc_consume_token(RBRACE);
                    mcc_consume_token(LBRACE);
                    switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                    {
                        case BINDING:
                        case ASSERT:
                        case ASSERTTEMPORAL:
                        case DEFCLASS:
                        case DEFFUNCTION:
                        case DEFMODULE:
                        case DEFRULE:
                        case DEFTEMPLATE:
                        case MODIFY:
                        case RETRACT:
                        case PLUS:
                        case MINUS:
                        case MULTIPLY:
                        case DIVIDE:
                        case GT1:
                        case GT2:
                        case LT1:
                        case LT2:
                        case EQ1:
                        case EQ2:
                        case LE1:
                        case LE2:
                        case GE1:
                        case GE2:
                        case IDENTIFIER:
                            ruleAction(infunc);
                            break;
                        default:
                            mcc_la1[10] = mcc_gen;
                            ;
                            break;
                    }
                    mcc_consume_token(RBRACE);
                    dffunc = new DeffunctionFunction();
                    dffunc.Name = exp2.image;
                    dffunc.setParameters(ParameterUtils.convertParameters(list));
                    dffunc.Function = (infunc);
                    list.Clear();
                    {
                        if (true) return dffunc;
                    }
                    break;
                case BINDING:
                    mcc_consume_token(BINDING);
                    exp = getBindType();
                    while (true)
                    {
                        valueParams(list);
                        switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                        {
                            case LBRACE:
                            case INTEGER_LITERAL:
                            case FLOATING_POINT_LITERAL:
                            case STRING_LITERAL:
                            case BIND:
                            case BIND3:
                            case BIND4:
                            case TRUE:
                            case TRUE2:
                            case FALSE:
                            case FALSE2:
                            case IDENTIFIER:
                            case PATH_LITERAL:
                                ;
                                break;
                            default:
                                mcc_la1[11] = mcc_gen;
                                goto label_6;
                        }
                    }
                    label_6:
                    ;

                    func = new ShellFunction();
                    func.Name = "bind";
                    list.Insert(0, new ValueParam(Constants.STRING_TYPE, exp.image.Substring(1)));
                    func.setParameters(ParameterUtils.convertParameters(list));
                    list.Clear();
                    {
                        if (true) return func;
                    }
                    break;
                case PLUS:
                case MINUS:
                case MULTIPLY:
                case DIVIDE:
                case GT1:
                case GT2:
                case LT1:
                case LT2:
                case EQ1:
                case EQ2:
                case LE1:
                case LE2:
                case GE1:
                case GE2:
                    switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                    {
                        case PLUS:
                            exp = mcc_consume_token(PLUS);
                            break;
                        case MINUS:
                            exp = mcc_consume_token(MINUS);
                            break;
                        case MULTIPLY:
                            exp = mcc_consume_token(MULTIPLY);
                            break;
                        case DIVIDE:
                            exp = mcc_consume_token(DIVIDE);
                            break;
                        case GT1:
                            exp = mcc_consume_token(GT1);
                            break;
                        case GT2:
                            exp = mcc_consume_token(GT2);
                            break;
                        case LT1:
                            exp = mcc_consume_token(LT1);
                            break;
                        case LT2:
                            exp = mcc_consume_token(LT2);
                            break;
                        case EQ1:
                            exp = mcc_consume_token(EQ1);
                            break;
                        case EQ2:
                            exp = mcc_consume_token(EQ2);
                            break;
                        case LE1:
                            exp = mcc_consume_token(LE1);
                            break;
                        case LE2:
                            exp = mcc_consume_token(LE2);
                            break;
                        case GE1:
                            exp = mcc_consume_token(GE1);
                            break;
                        case GE2:
                            exp = mcc_consume_token(GE2);
                            break;
                        default:
                            mcc_la1[12] = mcc_gen;
                            mcc_consume_token(-1);
                            throw new ParseException();
                    }
                    while (true)
                    {
                        valueParams(list);
                        switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                        {
                            case LBRACE:
                            case INTEGER_LITERAL:
                            case FLOATING_POINT_LITERAL:
                            case STRING_LITERAL:
                            case BIND:
                            case BIND3:
                            case BIND4:
                            case TRUE:
                            case TRUE2:
                            case FALSE:
                            case FALSE2:
                            case IDENTIFIER:
                            case PATH_LITERAL:
                                ;
                                break;
                            default:
                                mcc_la1[13] = mcc_gen;
                                goto label_7;
                        }
                    }
                    label_7:
                    ;

                    func = new ShellFunction();
                    func.Name = exp.image;
                    func.setParameters(ParameterUtils.convertParameters(list));
                    list.Clear();
                    {
                        if (true) return func;
                    }
                    break;
                case IDENTIFIER:
                    exp = mcc_consume_token(IDENTIFIER);
                    switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                    {
                        case LBRACE:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case STRING_LITERAL:
                        case BIND:
                        case BIND3:
                        case BIND4:
                        case TRUE:
                        case TRUE2:
                        case FALSE:
                        case FALSE2:
                        case IDENTIFIER:
                        case PATH_LITERAL:
                            while (true)
                            {
                                valueParams(list);
                                switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                                {
                                    case LBRACE:
                                    case INTEGER_LITERAL:
                                    case FLOATING_POINT_LITERAL:
                                    case STRING_LITERAL:
                                    case BIND:
                                    case BIND3:
                                    case BIND4:
                                    case TRUE:
                                    case TRUE2:
                                    case FALSE:
                                    case FALSE2:
                                    case IDENTIFIER:
                                    case PATH_LITERAL:
                                        ;
                                        break;
                                    default:
                                        mcc_la1[14] = mcc_gen;
                                        goto label_8;
                                }
                            }
                            label_8:
                            ;

                            break;
                        default:
                            mcc_la1[15] = mcc_gen;
                            ;
                            break;
                    }
                    func = new ShellFunction();
                    func.Name = exp.image;
                    func.setParameters(ParameterUtils.convertParameters(list));
                    list.Clear();
                    {
                        if (true) return func;
                    }
                    break;
                default:
                    mcc_la1[16] = mcc_gen;
                    mcc_consume_token(-1);
                    throw new ParseException();
            }
            throw new Exception("Missing return statement in function");
        }

        public void valueParams(ArrayList list)
        {
            Object exp;
            Token tok;
            ValueParam vp = null;
            if (mcc_2_1(2147483647))
            {
                mcc_consume_token(LBRACE);
                exp = expr();
                mcc_consume_token(RBRACE);
                ShellFunction subfunc = (ShellFunction) exp;
                FunctionParam2 fp2 = new FunctionParam2();
                fp2.FunctionName = subfunc.Name;
                fp2.Engine = engine;
                fp2.Parameters = subfunc.Parameters;
                list.Add(fp2);
            }
            else
            {
                switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                {
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case STRING_LITERAL:
                    case PATH_LITERAL:
                        exp = typeExpr();
                        vp = new ValueParam();
                        vp.Value = exp;
                        if (exp is Decimal)
                        {
                            vp.ValueType = Constants.BIG_DECIMAL;
                        }
                        else if (exp is String)
                        {
                            vp.ValueType = Constants.STRING_TYPE;
                        }
                        list.Add(vp);
                        break;
                    case IDENTIFIER:
                        exp = mcc_consume_token(IDENTIFIER);
                        vp = new ValueParam();
                        vp.ValueType = Constants.STRING_TYPE;
                        if (exp is Token)
                        {
                            vp.Value = ((Token) exp).image;
                        }
                        else
                        {
                            vp.Value = exp;
                        }
                        list.Add(vp);
                        break;
                    case TRUE:
                        exp = mcc_consume_token(TRUE);
                        vp = new ValueParam();
                        vp.Value = true;
                        list.Add(vp);
                        break;
                    case TRUE2:
                        exp = mcc_consume_token(TRUE2);
                        vp = new ValueParam();
                        vp.Value = true;
                        list.Add(vp);
                        break;
                    case FALSE:
                        exp = mcc_consume_token(FALSE);
                        vp = new ValueParam();
                        vp.Value = false;
                        list.Add(vp);
                        break;
                    case FALSE2:
                        exp = mcc_consume_token(FALSE2);
                        vp = new ValueParam();
                        vp.Value = false;
                        list.Add(vp);
                        break;
                    case BIND:
                    case BIND3:
                    case BIND4:
                        // in some cases, the parameters may be a binding to a variable
                        tok = getBindType();
                        BoundParam bp = new BoundParam();
                        if (tok.kind == BIND4)
                        {
                            bp.VariableName = tok.image.Substring(2);
                            bp.IsMultislot = true;
                        }
                        else
                        {
                            bp.VariableName = tok.image;
                        }
                        list.Add(bp);
                        break;
                    default:
                        mcc_la1[17] = mcc_gen;
                        mcc_consume_token(-1);
                        throw new ParseException();
                }
            }
        }

/**
 * bindingParams is meant to parse the params for a deffunction
 */

        public void bindingParams(ArrayList list)
        {
            Object exp;
            Token tok;
            ValueParam vp = null;
            tok = getBindType();
            BoundParam bp = new BoundParam();
            if (tok.kind == BIND4)
            {
                bp.VariableName = tok.image.Substring(2);
                bp.IsMultislot = true;
            }
            else
            {
                bp.VariableName = tok.image;
            }
            list.Add(bp);
        }

        public Token getBindType()
        {
            Token exp;
            switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
            {
                case BIND3:
                    exp = mcc_consume_token(BIND3);
                    {
                        if (true) return exp;
                    }
                    break;
                case BIND:
                    exp = mcc_consume_token(BIND);
                    {
                        if (true) return exp;
                    }
                    break;
                case BIND4:
                    exp = mcc_consume_token(BIND4);
                    {
                        if (true) return exp;
                    }
                    break;
                default:
                    mcc_la1[18] = mcc_gen;
                    mcc_consume_token(-1);
                    throw new ParseException();
            }
            throw new Exception("Missing return statement in function");
        }

/**
 * this is for convienance
 */

        public String getIdentifier()
        {
            Token exp;
            exp = mcc_consume_token(IDENTIFIER);
            {
                if (true) return exp.image;
            }
            throw new Exception("Missing return statement in function");
        }

        public ValueParam[] assertBody()
        {
            Token exp;
            ArrayList tokens = new ArrayList();
            ValueParam[] param = null;
            mcc_consume_token(LBRACE);
            exp = mcc_consume_token(IDENTIFIER);
            while (true)
            {
                assertContents(tokens);
                switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                {
                    case LBRACE:
                        ;
                        break;
                    default:
                        mcc_la1[19] = mcc_gen;
                        goto label_9;
                }
            }
            label_9:
            ;

            mcc_consume_token(RBRACE);
            param = new ValueParam[2];
            param[0] = new ValueParam(Constants.STRING_TYPE, exp.image);
            param[1] = new ValueParam(Constants.OBJECT_TYPE, tokens.ToArray());
            tokens.Clear();
            exp = null;
            {
                if (true) return param;
            }
            throw new Exception("Missing return statement in function");
        }

/* assert body */

        public void assertContents(ArrayList tokens)
        {
            Token exp;
            Object body = null;
            mcc_consume_token(LBRACE);
            exp = mcc_consume_token(IDENTIFIER);
            switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
            {
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case STRING_LITERAL:
                case BIND:
                case BIND3:
                case BIND4:
                case TRUE:
                case TRUE2:
                case FALSE:
                case FALSE2:
                case IDENTIFIER:
                case PATH_LITERAL:
                    body = checkMultiSlot();
                    break;
                default:
                    mcc_la1[20] = mcc_gen;
                    ;
                    break;
            }
            mcc_consume_token(RBRACE);
            if (body != null)
            {
                if (body.GetType().IsArray)
                {
                    MultiSlot msl = new MultiSlot(exp.image);
                    msl.Value = body;
                    tokens.Add(msl);
                }
                else
                {
                    Slot s = new Slot(exp.image);
                    s.Value = body;
                    tokens.Add(s);
                }
            }
            exp.Clear();
            exp = null;
            body = null;
        }

        public Object checkMultiSlot()
        {
            Object body;
            ArrayList artokens = new ArrayList();
            if (mcc_2_2(2147483647))
            {
                while (true)
                {
                    arrayType(artokens);
                    switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                    {
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case STRING_LITERAL:
                        case BIND:
                        case BIND3:
                        case IDENTIFIER:
                        case PATH_LITERAL:
                            ;
                            break;
                        default:
                            mcc_la1[21] = mcc_gen;
                            goto label_10;
                    }
                }
                label_10:
                ;

                {
                    if (true) return artokens.ToArray();
                }
            }
            else if (mcc_2_3(2147483647))
            {
                while (true)
                {
                    arrayType(artokens);
                    switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                    {
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case STRING_LITERAL:
                        case BIND:
                        case BIND3:
                        case IDENTIFIER:
                        case PATH_LITERAL:
                            ;
                            break;
                        default:
                            mcc_la1[22] = mcc_gen;
                            goto label_11;
                    }
                }
                label_11:
                ;

                {
                    if (true) return artokens.ToArray();
                }
            }
            else if (mcc_2_4(2147483647))
            {
                while (true)
                {
                    arrayType(artokens);
                    switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                    {
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case STRING_LITERAL:
                        case BIND:
                        case BIND3:
                        case IDENTIFIER:
                        case PATH_LITERAL:
                            ;
                            break;
                        default:
                            mcc_la1[23] = mcc_gen;
                            goto label_12;
                    }
                }
                label_12:
                ;

                {
                    if (true) return artokens.ToArray();
                }
            }
            else if (mcc_2_5(2147483647))
            {
                while (true)
                {
                    arrayType(artokens);
                    switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                    {
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case STRING_LITERAL:
                        case BIND:
                        case BIND3:
                        case IDENTIFIER:
                        case PATH_LITERAL:
                            ;
                            break;
                        default:
                            mcc_la1[24] = mcc_gen;
                            goto label_13;
                    }
                }
                label_13:
                ;

                {
                    if (true) return artokens.ToArray();
                }
            }
            else if (mcc_2_6(2147483647))
            {
                while (true)
                {
                    arrayType(artokens);
                    switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                    {
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case STRING_LITERAL:
                        case BIND:
                        case BIND3:
                        case IDENTIFIER:
                        case PATH_LITERAL:
                            ;
                            break;
                        default:
                            mcc_la1[25] = mcc_gen;
                            goto label_14;
                    }
                }
                label_14:
                ;

                {
                    if (true) return artokens.ToArray();
                }
            }
            else if (mcc_2_7(2147483647))
            {
                while (true)
                {
                    arrayType(artokens);
                    switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                    {
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case STRING_LITERAL:
                        case BIND:
                        case BIND3:
                        case IDENTIFIER:
                        case PATH_LITERAL:
                            ;
                            break;
                        default:
                            mcc_la1[26] = mcc_gen;
                            goto label_15;
                    }
                }
                label_15:
                ;

                {
                    if (true) return artokens.ToArray();
                }
            }
            else
            {
                switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                {
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case STRING_LITERAL:
                    case BIND:
                    case BIND3:
                    case BIND4:
                    case TRUE:
                    case TRUE2:
                    case FALSE:
                    case FALSE2:
                    case IDENTIFIER:
                    case PATH_LITERAL:
                        body = slotValueType();
                        {
                            if (true) return body;
                        }
                        break;
                    default:
                        mcc_la1[27] = mcc_gen;
                        mcc_consume_token(-1);
                        throw new ParseException();
                }
            }
            throw new Exception("Missing return statement in function");
        }

        public Object slotValueType()
        {
            Object body;
            Token btoken;
            bool boolval;
            switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
            {
                case BIND:
                case BIND3:
                case BIND4:
                    btoken = getBindType();
                    // probably should refactor this later, instead of looking up the value directly
                    Object val = engine.getDefglobalValue(btoken.image);
                    if (val != null)
                    {
                        {
                            if (true) return engine.getDefglobalValue(btoken.image);
                        }
                    }
                    else
                    {
                        BoundParam bp = new BoundParam();
                        bp.VariableName = btoken.image;
                        {
                            if (true) return bp;
                        }
                    }
                    break;
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case STRING_LITERAL:
                case PATH_LITERAL:
                    body = typeExpr();
                    {
                        if (true) return body;
                    }
                    break;
                case TRUE:
                case TRUE2:
                case FALSE:
                case FALSE2:
                    boolval = trueFalse();
                    {
                        if (true) return Convert.ToBoolean(boolval);
                    }
                    break;
                case IDENTIFIER:
                    btoken = mcc_consume_token(IDENTIFIER);
                    {
                        if (true) return btoken.image;
                    }
                    break;
                default:
                    mcc_la1[28] = mcc_gen;
                    mcc_consume_token(-1);
                    throw new ParseException();
            }
            throw new Exception("Missing return statement in function");
        }

/* arrayType handles multislot tokens */

        public void arrayType(ArrayList tokens)
        {
            Token tval;
            Object val;
            switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
            {
                case IDENTIFIER:
                    tval = mcc_consume_token(IDENTIFIER);
                    tokens.Add(tval.image);
                    break;
                case BIND:
                    tval = mcc_consume_token(BIND);
                    if (tval.kind == BIND)
                    {
                        BoundParam bp = new BoundParam();
                        bp.VariableName = tval.image;
                        tokens.Add(bp);
                    }
                    break;
                case BIND3:
                    tval = mcc_consume_token(BIND3);
                    if (tval.kind == BIND3)
                    {
                        BoundParam bp = new BoundParam();
                        bp.VariableName = tval.image;
                        tokens.Add(bp);
                    }
                    break;
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case STRING_LITERAL:
                case PATH_LITERAL:
                    val = typeExpr();
                    tokens.Add(val);
                    break;
                default:
                    mcc_la1[29] = mcc_gen;
                    mcc_consume_token(-1);
                    throw new ParseException();
            }
        }

/* templateExpr gets the slots of a deftemplate */

        public Deftemplate templateExpr()
        {
            Token exp;
            Deftemplate template;
            ArrayList slots = new ArrayList();
            /* javacc gives a warning for this, but not sure how to do it better */
            exp = mcc_consume_token(IDENTIFIER);
            while (true)
            {
                templateBody(slots);
                switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                {
                    case LBRACE:
                        ;
                        break;
                    default:
                        mcc_la1[30] = mcc_gen;
                        goto label_16;
                }
            }
            label_16:
            ;

            Slot[] s = new Slot[slots.Count];
            slots.CopyTo(s);
            template = new Deftemplate(exp.image, null, s);
            slots.Clear();
            exp.Clear();
            exp = null;
            {
                if (true) return template;
            }
            throw new Exception("Missing return statement in function");
        }

        public void templateBody(ArrayList slots)
        {
            Token sname;
            int stype;
            int sid;
            Slot sl;
            MultiSlot msl;
            Object defaultvalue;
            if (mcc_2_8(2147483647))
            {
                mcc_consume_token(LBRACE);
                mcc_consume_token(SLOT);
                sname = mcc_consume_token(IDENTIFIER);
                stype = slotType();
                defaultvalue = defaultValue();
                mcc_consume_token(RBRACE);
                sid = slots.Count;
                sl = new Slot(sname.image);
                sl.Id = sid;
                sl.ValueType = stype;
                sl.Value = defaultvalue;
                slots.Add(sl);
                sname = null;
            }
            else if (mcc_2_9(2147483647))
            {
                mcc_consume_token(LBRACE);
                mcc_consume_token(MULTISLOT);
                sname = mcc_consume_token(IDENTIFIER);
                mcc_consume_token(RBRACE);
                sid = slots.Count;
                msl = new MultiSlot(sname.image);
                msl.Id = sid;
                slots.Add(msl);
                sname = null;
            }
            else
            {
                mcc_consume_token(-1);
                throw new ParseException();
            }
        }

        public int slotType()
        {
            int stype = -1;
            int defaultType = 9;
            if (mcc_2_10(2147483647))
            {
                mcc_consume_token(LBRACE);
                mcc_consume_token(TYPEDEF);
                stype = getType();
                mcc_consume_token(RBRACE);
            }
            else
            {
                ;
            }
            if (stype > -1)
            {
                defaultType = stype;
            }
            {
                if (true) return defaultType;
            }
            throw new Exception("Missing return statement in function");
        }

        public Object defaultValue()
        {
            Object defobj = null;
            if (mcc_2_11(2147483647))
            {
                mcc_consume_token(LBRACE);
                mcc_consume_token(DEFAULTVALUE);
                defobj = typeExpr();
                mcc_consume_token(RBRACE);
            }
            else
            {
                defobj = Constants.NIL_SYMBOL;
            }

            if (defobj != null)
                return defobj;
            
            throw new Exception("Missing return statement in function");
        }

        public int getType()
        {
            Token exp = null;
            switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
            {
                case INTEGER:
                    exp = mcc_consume_token(INTEGER);
                    exp = null;
                    {
                        if (true) return Constants.INT_PRIM_TYPE;
                    }
                    break;
                case SHORT:
                    exp = mcc_consume_token(SHORT);
                    exp = null;
                    {
                        if (true) return Constants.SHORT_PRIM_TYPE;
                    }
                    break;
                case LONG:
                    exp = mcc_consume_token(LONG);
                    exp = null;
                    {
                        if (true) return Constants.LONG_PRIM_TYPE;
                    }
                    break;
                case FLOAT:
                    exp = mcc_consume_token(FLOAT);
                    exp = null;
                    {
                        if (true) return Constants.FLOAT_PRIM_TYPE;
                    }
                    break;
                case DOUBLE:
                    exp = mcc_consume_token(DOUBLE);
                    exp = null;
                    {
                        if (true) return Constants.DOUBLE_PRIM_TYPE;
                    }
                    break;
                case SYMBOL:
                    exp = mcc_consume_token(SYMBOL);
                    exp = null;
                    {
                        if (true) return Constants.OBJECT_TYPE;
                    }
                    break;
                case STRING:
                    exp = mcc_consume_token(STRING);
                    exp = null;
                    {
                        if (true) return Constants.STRING_TYPE;
                    }
                    break;
                case BOOLEAN:
                    exp = mcc_consume_token(BOOLEAN);
                    exp = null;
                    {
                        if (true) return Constants.BOOLEAN_PRIM_TYPE;
                    }
                    break;
                default:
                    mcc_la1[31] = mcc_gen;
                    mcc_consume_token(-1);
                    throw new ParseException();
            }
            throw new Exception("Missing return statement in function");
        }

        public Defrule ruleBody()
        {
            Token exp = null;
            Token rulecomment = null;
            Defrule rule;
            ArrayList dec = new ArrayList();
            ArrayList conditions = new ArrayList();
            ArrayList actions = new ArrayList();
            exp = mcc_consume_token(IDENTIFIER);
            if (mcc_2_12(2147483647))
            {
                rulecomment = mcc_consume_token(STRING_LITERAL);
            }
            else
            {
                ;
            }
            if (mcc_2_13(2147483647))
            {
                ruleDeclaration(dec);
            }
            else
            {
                ;
            }
            switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
            {
                case LBRACE:
                case BIND:
                    while (true)
                    {
                        conditionElement(conditions);
                        switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                        {
                            case LBRACE:
                            case BIND:
                                ;
                                break;
                            default:
                                mcc_la1[32] = mcc_gen;
                                goto label_17;
                        }
                    }
                    label_17:
                    ;

                    break;
                default:
                    mcc_la1[33] = mcc_gen;
                    ;
                    break;
            }
            arrow();
            ruleActions(actions);
            rule = new Defrule(exp.image);
            if (rulecomment != null)
            {
                rule.Comment = rulecomment.image;
            }
            rule.setRuleProperties(dec);
            IEnumerator itrC = conditions.GetEnumerator();
            while (itrC.MoveNext())
            {
                rule.addCondition((ICondition) itrC.Current);
            }

            IEnumerator itr = actions.GetEnumerator();
            while (itr.MoveNext())
            {
                Object acn = itr.Current;
                if (acn is IFunction)
                {
                    FunctionAction faction = new FunctionAction();
                    faction.Function = (IFunction) acn;
                    rule.addAction(faction);
                }
                else if (acn is IAction)
                {
                    rule.addAction((IAction) acn);
                }
            }
            dec.Clear();
            conditions.Clear();
            actions.Clear();
            exp = null;
            {
                if (true) return rule;
            }
            throw new Exception("Missing return statement in function");
        }

        public void ruleDeclaration(ArrayList list)
        {
            Token exp;
            mcc_consume_token(LBRACE);
            exp = mcc_consume_token(DECLARE);
            ruleProperty(list);
            mcc_consume_token(RBRACE);
        }

        public void ruleProperty(ArrayList list)
        {
            Object exp = null;
            bool tf = true;
            String ver = null;
            bool remember = true;
            bool temporal = false;
            bool agenda = false;
            String direction = null;
            String date = null;
            if (mcc_2_14(2147483647))
            {
                exp = salience();
            }
            else
            {
                ;
            }
            if (exp != null)
            {
                long intsal = Convert.ToInt64(((Token) exp).image);
                RuleProperty sal = new RuleProperty(RuleProperty.SALIENCE, intsal.ToString());
                list.Add(sal);
            }
            if (mcc_2_15(2147483647))
            {
                tf = autoFocus();
            }
            else
            {
                ;
            }
            RuleProperty auto = new RuleProperty(RuleProperty.AUTO_FOCUS, tf);
            list.Add(auto);
            if (mcc_2_16(2147483647))
            {
                ver = ruleVersion();
            }
            else
            {
                ;
            }
            RuleProperty rp = new RuleProperty(RuleProperty.VERSION, ver);
            list.Add(rp);
            if (mcc_2_17(2147483647))
            {
                remember = Remember();
            }
            else
            {
                ;
            }
            RuleProperty rmem = new RuleProperty(RuleProperty.REMEMBER_MATCH, remember);
            list.Add(rmem);
            if (mcc_2_18(2147483647))
            {
                date = effectiveDate();
            }
            else
            {
                ;
            }
            RuleProperty eff = new RuleProperty(RuleProperty.EFFECTIVE_DATE, date);
            list.Add(eff);
            if (mcc_2_19(2147483647))
            {
                date = expirationDate();
            }
            else
            {
                ;
            }
            RuleProperty expr = new RuleProperty(RuleProperty.EXPIRATION_DATE, date);
            list.Add(expr);
            if (mcc_2_20(2147483647))
            {
                direction = Direction();
            }
            else
            {
                ;
            }
            RuleProperty dir = new RuleProperty(RuleProperty.DIRECTION, direction);
            list.Add(dir);
            if (mcc_2_21(2147483647))
            {
                agenda = noAgenda();
            }
            else
            {
                ;
            }
            RuleProperty noagenda = new RuleProperty(RuleProperty.NO_AGENDA, agenda);
            list.Add(noagenda);
            if (mcc_2_22(2147483647))
            {
                temporal = temporalAct();
            }
            else
            {
                ;
            }
            RuleProperty tempprop = new RuleProperty(RuleProperty.TEMPORAL_ACTIVATION, temporal);
            list.Add(tempprop);
        }

        public Object salience()
        {
            Token exp = null;
            Object val = null;
            mcc_consume_token(LBRACE);
            exp = mcc_consume_token(SALIENCE);
            val = mcc_consume_token(INTEGER_LITERAL);
            mcc_consume_token(RBRACE);
            exp = null;
            if (val != null)
            {
                {
                    if (true) return val;
                }
            }
            else
            {
                {
                    if (true) return null;
                }
            }
            throw new Exception("Missing return statement in function");
        }

        public bool autoFocus()
        {
            Token exp;
            bool tf = false;
            mcc_consume_token(LBRACE);
            exp = mcc_consume_token(AUTOFOCUS);
            tf = trueFalse();
            mcc_consume_token(RBRACE);
            {
                if (true) return tf;
            }
            throw new Exception("Missing return statement in function");
        }

        public String ruleVersion()
        {
            Token exp;
            mcc_consume_token(LBRACE);
            mcc_consume_token(RULEVERSION);
            switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
            {
                case IDENTIFIER:
                    exp = mcc_consume_token(IDENTIFIER);
                    break;
                case FLOATING_POINT_LITERAL:
                    exp = mcc_consume_token(FLOATING_POINT_LITERAL);
                    break;
                case INTEGER_LITERAL:
                    exp = mcc_consume_token(INTEGER_LITERAL);
                    break;
                default:
                    mcc_la1[34] = mcc_gen;
                    mcc_consume_token(-1);
                    throw new ParseException();
            }
            mcc_consume_token(RBRACE);
            {
                if (true) return exp.image;
            }
            throw new Exception("Missing return statement in function");
        }

        public bool Remember()
        {
            Token exp;
            bool tf = false;
            mcc_consume_token(LBRACE);
            exp = mcc_consume_token(REMEMBERMATCH);
            tf = trueFalse();
            mcc_consume_token(RBRACE);
            {
                if (true) return tf;
            }
            throw new Exception("Missing return statement in function");
        }

        public String Direction()
        {
            Token exp;
            String defaultDir = "forward";
            mcc_consume_token(LBRACE);
            mcc_consume_token(CHAININGDIRECTION);
            exp = mcc_consume_token(IDENTIFIER);
            mcc_consume_token(RBRACE);
            if (exp != null && exp.image.Equals("backward"))
            {
                {
                    if (true) return exp.image;
                }
            }
            else
            {
                {
                    if (true) return defaultDir;
                }
            }
            throw new Exception("Missing return statement in function");
        }

        public bool noAgenda()
        {
            Token exp;
            bool tf = false;
            mcc_consume_token(LBRACE);
            exp = mcc_consume_token(NOAGENDA);
            tf = trueFalse();
            mcc_consume_token(RBRACE);
            {
                if (true) return tf;
            }
            throw new Exception("Missing return statement in function");
        }

        public String effectiveDate()
        {
            Token exp;
            Token date;
            mcc_consume_token(LBRACE);
            exp = mcc_consume_token(EFFECTIVE);
            date = mcc_consume_token(STRING_LITERAL);
            mcc_consume_token(RBRACE);
            {
                if (true) return date.image.Substring(1, date.image.Length - 1);
            }
            throw new Exception("Missing return statement in function");
        }

        public String expirationDate()
        {
            Token exp;
            Token date;
            mcc_consume_token(LBRACE);
            exp = mcc_consume_token(EXPIRATION);
            date = mcc_consume_token(STRING_LITERAL);
            mcc_consume_token(RBRACE);
            {
                if (true) return date.image.Substring(1, date.image.Length - 1);
            }
            throw new Exception("Missing return statement in function");
        }

        public bool temporalAct()
        {
            Token exp;
            bool tf = false;
            mcc_consume_token(LBRACE);
            exp = mcc_consume_token(TEMPORALACTIVATION);
            tf = trueFalse();
            mcc_consume_token(RBRACE);
            {
                if (true) return tf;
            }
            throw new Exception("Missing return statement in function");
        }

        public bool trueFalse()
        {
            switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
            {
                case TRUE:
                    mcc_consume_token(TRUE);
                    {
                        if (true) return true;
                    }
                    break;
                case TRUE2:
                    mcc_consume_token(TRUE2);
                    {
                        if (true) return true;
                    }
                    break;
                case FALSE:
                    mcc_consume_token(FALSE);
                    {
                        if (true) return false;
                    }
                    break;
                case FALSE2:
                    mcc_consume_token(FALSE2);
                    {
                        if (true) return false;
                    }
                    break;
                default:
                    mcc_la1[35] = mcc_gen;
                    mcc_consume_token(-1);
                    throw new ParseException();
            }
            throw new Exception("Missing return statement in function");
        }

// conditionalElement checks for object binding
        public void conditionElement(ArrayList list)
        {
            Token exp;
            if (mcc_2_23(2147483647))
            {
                exp = mcc_consume_token(BIND);
                mcc_consume_token(ASSIGN);
                mcc_consume_token(LBRACE);
                CEType(list);
                mcc_consume_token(RBRACE);
                ObjectCondition oc = (ObjectCondition) list[list.Count - 1];
                BoundConstraint bc = new BoundConstraint(oc.TemplateName, true);
                bc.Value = exp.image.Substring(1);
                oc.addConstraint(bc, 0);
            }
            else
            {
                switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                {
                    case LBRACE:
                        mcc_consume_token(LBRACE);
                        CEType(list);
                        mcc_consume_token(RBRACE);

                        break;
                    default:
                        mcc_la1[36] = mcc_gen;
                        mcc_consume_token(-1);
                        throw new ParseException();
                }
            }
        }

// CEType checks the Conditional element to see if it's exist, not, test or plain
        public void CEType(ArrayList list)
        {
            Token exp;
            Token exp2;
            Object etime;
            Object nested = null;
            ArrayList alpha = new ArrayList();
            ObjectCondition oc = null;
            TemporalCondition tmpc = null;
            ArrayList parms = new ArrayList();
            if (mcc_2_24(2147483647))
            {
                mcc_consume_token(NOTCE);
                mcc_consume_token(LBRACE);
                exp = mcc_consume_token(IDENTIFIER);
                switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                {
                    case LBRACE:
                        while (true)
                        {
                            templatePatterns(alpha);
                            switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                            {
                                case LBRACE:
                                    ;
                                    break;
                                default:
                                    mcc_la1[37] = mcc_gen;
                                    goto label_18;
                            }
                        }
                        label_18:
                        ;

                        break;
                    default:
                        mcc_la1[38] = mcc_gen;
                        ;
                        break;
                }
                mcc_consume_token(RBRACE);
                oc = new ObjectCondition();
                oc.Negated = true;
                oc.TemplateName = exp.image;
                IEnumerator itr = alpha.GetEnumerator();
                while (itr.MoveNext())
                {
                    oc.addConstraint((IConstraint) itr.Current);
                }
                list.Add(oc);
                alpha.Clear();
                exp = null;
            }
            else
            {
                switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                {
                    case NOTCE:
                        mcc_consume_token(NOTCE);
                        mcc_consume_token(LBRACE);
                        nested = expr();
                        mcc_consume_token(RBRACE);
                        TestCondition tc = new TestCondition();
                        tc.Negated = true;
                        if (nested is IFunction)
                        {
                            tc.Function = ((IFunction) nested);
                        }
                        list.Add(tc);
                        break;
                    case TEMPORAL:
                        mcc_consume_token(TEMPORAL);
                        temporalPattern(list);

                        break;
                    case TEST:
                        mcc_consume_token(TEST);
                        mcc_consume_token(LBRACE);
                        nested = expr();
                        mcc_consume_token(RBRACE);
                        tc = new TestCondition();
                        if (nested is IFunction)
                        {
                            tc.Function = ((IFunction) nested);
                        }
                        list.Add(tc);
                        break;
                    case AND1:
                        mcc_consume_token(AND1);
                        while (true)
                        {
                            mcc_consume_token(LBRACE);
                            nested = expr();
                            mcc_consume_token(RBRACE);
                            switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                            {
                                case LBRACE:
                                    ;
                                    break;
                                default:
                                    mcc_la1[39] = mcc_gen;
                                    goto label_19;
                            }
                        }
                        label_19:
                        ;

                        AndCondition ac = new AndCondition();
                        ac.addNestedConditionElement(nested);
                        list.Add(ac);
                        break;
                    case EXISTS:
                        mcc_consume_token(EXISTS);
                        while (true)
                        {
                            mcc_consume_token(LBRACE);
                            CEType(alpha);
                            mcc_consume_token(RBRACE);
                            switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                            {
                                case LBRACE:
                                    ;
                                    break;
                                default:
                                    mcc_la1[40] = mcc_gen;
                                    goto label_20;
                            }
                        }
                        label_20:
                        ;

                        ExistCondition exc = null;
                        if (alpha.Count > 1)
                        {
                            for (int iz = 0; iz < alpha.Count; iz++)
                            {
                                exc = ExistCondition.newExistCondition((ObjectCondition) alpha[iz]);
                                list.Add(exc);
                            }
                        }
                        else
                        {
                            exc = ExistCondition.newExistCondition((ObjectCondition) alpha[0]);
                            list.Add(exc);
                        }
                        break;
                    case IDENTIFIER:
                        exp = mcc_consume_token(IDENTIFIER);
                        switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                        {
                            case LBRACE:
                                while (true)
                                {
                                    templatePatterns(alpha);
                                    switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                                    {
                                        case LBRACE:
                                            ;
                                            break;
                                        default:
                                            mcc_la1[41] = mcc_gen;
                                            goto label_21;
                                    }
                                }
                                label_21:
                                ;

                                break;
                            default:
                                mcc_la1[42] = mcc_gen;
                                ;
                                break;
                        }
                        oc = new ObjectCondition();
                        oc.TemplateName = exp.image;
                        IEnumerator itr = alpha.GetEnumerator();
                        while (itr.MoveNext())
                        {
                            oc.addConstraint((IConstraint) itr.Current);
                        }
                        list.Add(oc);
                        alpha.Clear();
                        exp = null;
                        break;
                    default:
                        mcc_la1[43] = mcc_gen;
                        mcc_consume_token(-1);
                        throw new ParseException();
                }
            }
        }

        public void temporalPattern(ArrayList list)
        {
            Token exp;
            Token exp2;
            Object etime;
            Object itime;
            Object nested = null;
            ArrayList alpha = new ArrayList();
            ObjectCondition oc = null;
            TemporalCondition tmpc = null;
            ArrayList parms = new ArrayList();
            if (mcc_2_25(2147483647))
            {
                exp2 = mcc_consume_token(BIND);
                mcc_consume_token(LBRACE);
                mcc_consume_token(RELATIVETIME);
                etime = typeExpr();
                mcc_consume_token(RBRACE);
                mcc_consume_token(LBRACE);
                exp = mcc_consume_token(IDENTIFIER);
                switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                {
                    case LBRACE:
                        while (true)
                        {
                            templatePatterns(alpha);
                            switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                            {
                                case LBRACE:
                                    ;
                                    break;
                                default:
                                    mcc_la1[44] = mcc_gen;
                                    goto label_22;
                            }
                        }
                        label_22:
                        ;

                        break;
                    default:
                        mcc_la1[45] = mcc_gen;
                        ;
                        break;
                }
                mcc_consume_token(RBRACE);
                tmpc = new TemporalCondition();
                tmpc.TemplateName = exp.image;
                tmpc.VariableName = exp2.image.Substring(1);
                if (etime is Decimal)
                {
                    tmpc.RelativeTime = Convert.ToInt32(etime);
                }
                IEnumerator itr = alpha.GetEnumerator();
                while (itr.MoveNext())
                {
                    tmpc.addConstraint((IConstraint) itr.Current);
                }
                list.Add(tmpc);
                alpha.Clear();
                exp = null;
            }
            else
            {
                switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                {
                    case BIND:
                        // (temporal ?binding (interval-time n) (relative-time n) (person (name "me") ) )
                        exp2 = mcc_consume_token(BIND);
                        mcc_consume_token(LBRACE);
                        mcc_consume_token(INTERVALTIME);
                        itime = typeExpr();
                        switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                        {
                            case LBRACE:
                                mcc_consume_token(LBRACE);
                                while (true)
                                {
                                    valueParams(parms);
                                    switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                                    {
                                        case LBRACE:
                                        case INTEGER_LITERAL:
                                        case FLOATING_POINT_LITERAL:
                                        case STRING_LITERAL:
                                        case BIND:
                                        case BIND3:
                                        case BIND4:
                                        case TRUE:
                                        case TRUE2:
                                        case FALSE:
                                        case FALSE2:
                                        case IDENTIFIER:
                                        case PATH_LITERAL:
                                            ;
                                            break;
                                        default:
                                            mcc_la1[46] = mcc_gen;
                                            goto label_23;
                                    }
                                }
                                label_23:
                                ;

                                mcc_consume_token(RBRACE);
                                break;
                            default:
                                mcc_la1[47] = mcc_gen;
                                ;
                                break;
                        }
                        mcc_consume_token(RBRACE);
                        mcc_consume_token(LBRACE);
                        mcc_consume_token(RELATIVETIME);
                        etime = typeExpr();
                        mcc_consume_token(RBRACE);
                        mcc_consume_token(LBRACE);
                        exp = mcc_consume_token(IDENTIFIER);
                        switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                        {
                            case LBRACE:
                                while (true)
                                {
                                    templatePatterns(alpha);
                                    switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                                    {
                                        case LBRACE:
                                            ;
                                            break;
                                        default:
                                            mcc_la1[48] = mcc_gen;
                                            goto label_24;
                                    }
                                }
                                label_24:
                                ;

                                break;
                            default:
                                mcc_la1[49] = mcc_gen;
                                ;
                                break;
                        }
                        mcc_consume_token(RBRACE);
                        tmpc = new TemporalCondition();
                        tmpc.TemplateName = exp.image;
                        tmpc.VariableName = exp2.image.Substring(1);
                        if (itime is Decimal)
                        {
                            tmpc.IntervalTime = Convert.ToInt32(itime);
                        }
                        if (etime is Decimal)
                        {
                            tmpc.RelativeTime = Convert.ToInt32(etime);
                        }
                        tmpc.AddFunction(parms);
                        IEnumerator itr = alpha.GetEnumerator();
                        while (itr.MoveNext())
                        {
                            tmpc.addConstraint((IConstraint) itr.Current);
                        }
                        list.Add(tmpc);
                        alpha.Clear();
                        exp = null;
                        break;
                    default:
                        mcc_la1[50] = mcc_gen;
                        mcc_consume_token(-1);
                        throw new ParseException();
                }
            }
        }

        public void templatePatterns(ArrayList list)
        {
            Token exp = null;
            mcc_consume_token(LBRACE);
            exp = mcc_consume_token(IDENTIFIER);
            propertyType(list, exp);
            mcc_consume_token(RBRACE);
            exp = null;
        }

        public void propertyType(ArrayList list, Token identifier)
        {
            Token id = null;
            Object body = null;
            Token body2 = null;
            bool bval = false;
            LiteralConstraint vc;
            BoundConstraint bc;
            OrLiteralConstraint orc;
            AndLiteralConstraint andc;
            ArrayList andor = new ArrayList();
            MultiValue mv = null;
            if (mcc_2_26(2147483647))
            {
                predicateFunc(list, identifier);
            }
            else if (mcc_2_27(2147483647))
            {
                body2 = mcc_consume_token(BIND4);
                if (body2 != null)
                {
                    bc = new BoundConstraint();
                    bc.Name = identifier.image;
                    bc.Value = body2.image.Substring(2);
                    bc.IsMultislot = true;
                    list.Add(bc);
                }
            }
            else if (mcc_2_28(2147483647))
            {
                body2 = mcc_consume_token(BIND);
                if (body2 != null)
                {
                    bc = new BoundConstraint();
                    bc.Name = identifier.image;
                    bc.Value = body2.image.Substring(1);
                    list.Add(bc);
                }
            }
            else if (mcc_2_29(2147483647))
            {
                mcc_consume_token(TILDA);
                body2 = mcc_consume_token(BIND);
                if (body2 != null)
                {
                    bc = new BoundConstraint();
                    bc.Name = identifier.image;
                    bc.Value = body2.image.Substring(1);
                    bc.Negated = true;
                    list.Add(bc);
                }
            }
            else if (mcc_2_30(2147483647))
            {
                body = typeExpr();
                while (true)
                {
                    mcc_consume_token(OR2);
                    orType(andor);
                    switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                    {
                        case OR2:
                            ;
                            break;
                        default:
                            mcc_la1[51] = mcc_gen;
                            goto label_25;
                    }
                }
                label_25:
                ;

                if (body != null)
                {
                    orc = new OrLiteralConstraint();
                    orc.Name = identifier.image;
                    mv = new MultiValue(body);
                    orc.addValue(mv);
                    orc.addValues(andor);
                    list.Add(orc);
                }
            }
            else if (mcc_2_31(2147483647))
            {
                mcc_consume_token(TILDA);
                body = typeExpr();
                while (true)
                {
                    mcc_consume_token(OR2);
                    orType(andor);
                    switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                    {
                        case OR2:
                            ;
                            break;
                        default:
                            mcc_la1[52] = mcc_gen;
                            goto label_26;
                    }
                }
                label_26:
                ;

                if (body != null)
                {
                    orc = new OrLiteralConstraint();
                    orc.Name = identifier.image;
                    mv = new MultiValue(body);
                    mv.Negated = true;
                    orc.addValue(mv);
                    orc.addValues(andor);
                    list.Add(orc);
                }
            }
            else if (mcc_2_32(2147483647))
            {
                body = bindTypeExpr();
                while (true)
                {
                    mcc_consume_token(AND2);
                    andType(andor);
                    switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                    {
                        case AND2:
                            ;
                            break;
                        default:
                            mcc_la1[53] = mcc_gen;
                            goto label_27;
                    }
                }
                label_27:
                ;

                if (body != null)
                {
                    if (body is String && ((String) body).StartsWith("?"))
                    {
                        bc = new BoundConstraint();
                        bc.Name = identifier.image;
                        bc.Value = ((String) body).Substring(1);
                        bc.IntraFactJoin = true;
                        bc.addIntrFactJoin(andor);
                        list.Add(bc);
                    }
                    else
                    {
                        andc = new AndLiteralConstraint();
                        andc.Name = identifier.image;
                        mv = new MultiValue(body);
                        andc.addValue(mv);
                        andc.addValues(andor);
                        list.Add(andc);
                    }
                }
            }
            else if (mcc_2_33(2147483647))
            {
                mcc_consume_token(TILDA);
                body = typeExpr();
                while (true)
                {
                    mcc_consume_token(AND2);
                    andType(andor);
                    switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                    {
                        case AND2:
                            ;
                            break;
                        default:
                            mcc_la1[54] = mcc_gen;
                            goto label_28;
                    }
                }
                label_28:
                ;

                if (body != null)
                {
                    andc = new AndLiteralConstraint();
                    andc.Name = identifier.image;
                    mv = new MultiValue(body);
                    mv.Negated = true;
                    andc.addValue(mv);
                    andc.addValues(andor);
                    list.Add(andc);
                }
            }
            else if (mcc_2_34(2147483647))
            {
                mcc_consume_token(TILDA);
                body = typeExpr();
                if (body != null)
                {
                    vc = new LiteralConstraint();
                    vc.Name = identifier.image;
                    vc.Value = body;
                    vc.Negated = true;
                    list.Add(vc);
                }
            }
            else if (mcc_2_35(2147483647))
            {
                id = mcc_consume_token(IDENTIFIER);
                if (id != null)
                {
                    vc = new LiteralConstraint();
                    vc.Name = identifier.image;
                    vc.Value = id.image;
                    list.Add(vc);
                }
            }
            else if (mcc_2_36(2147483647))
            {
                mcc_consume_token(TILDA);
                id = mcc_consume_token(IDENTIFIER);
                if (id != null)
                {
                    vc = new LiteralConstraint();
                    vc.Name = identifier.image;
                    vc.Value = id.image;
                    vc.Negated = true;
                    list.Add(vc);
                }
            }
            else
            {
                switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                {
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case STRING_LITERAL:
                    case PATH_LITERAL:
                        body = typeExpr();
                        if (body != null)
                        {
                            vc = new LiteralConstraint();
                            vc.Name = identifier.image;
                            vc.Value = body;
                            list.Add(vc);
                        }
                        break;
                    case TRUE:
                    case TRUE2:
                    case FALSE:
                    case FALSE2:
                        bval = trueFalse();
                        vc = new LiteralConstraint();
                        vc.Name = identifier.image;
                        vc.Value = Convert.ToBoolean(bval);
                        list.Add(vc);
                        break;
                    default:
                        mcc_la1[55] = mcc_gen;
                        mcc_consume_token(-1);
                        throw new ParseException();
                }
            }
        }

// either a bind or typeExpr
        public Object bindTypeExpr()
        {
            Token body = null;
            Object value = null;
            if (mcc_2_37(2147483647))
            {
                body = mcc_consume_token(BIND);
                {
                    if (true) return body.image;
                }
            }
            else if (mcc_2_38(2147483647))
            {
                value = typeExpr();
                {
                    if (true) return value;
                }
            }
            else
            {
                mcc_consume_token(-1);
                throw new ParseException();
            }
            throw new Exception("Missing return statement in function");
        }

// need to enhance to handling bindings
        public void andType(ArrayList list)
        {
            Token body = null;
            Object val = null;
            MultiValue mv = null;
            BoundConstraint bc;
            if (mcc_2_39(2147483647))
            {
                body = mcc_consume_token(IDENTIFIER);
                if (body != null)
                {
                    mv = new MultiValue(body.image);
                    list.Add(mv);
                }
            }
            else if (mcc_2_40(2147483647))
            {
                mcc_consume_token(TILDA);
                val = typeExpr();
                if (val != null)
                {
                    mv = new MultiValue(val, true);
                    list.Add(mv);
                }
            }
            else
            {
                switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                {
                    case BIND:
                        // a binding ?bind
                        body = mcc_consume_token(BIND);
                        bc = new BoundConstraint();
                        bc.Value = body.image.Substring(1);
                        list.Add(bc);
                        break;
                    case TILDA:
                        mcc_consume_token(TILDA);
                        body = mcc_consume_token(BIND);
                        bc = new BoundConstraint();
                        bc.Value = body.image.Substring(1);
                        bc.Negated = true;
                        list.Add(bc);
                        break;
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case STRING_LITERAL:
                    case PATH_LITERAL:
                        val = typeExpr();
                        if (val != null)
                        {
                            mv = new MultiValue(val);
                            list.Add(mv);
                        }
                        break;
                    default:
                        mcc_la1[56] = mcc_gen;
                        mcc_consume_token(-1);
                        throw new ParseException();
                }
            }
        }

        public void orType(ArrayList list)
        {
            Token body = null;
            Object val = null;
            MultiValue mv = null;
            if (mcc_2_41(2147483647))
            {
                body = mcc_consume_token(IDENTIFIER);
                if (body != null)
                {
                    mv = new MultiValue(body.image);
                    list.Add(mv);
                }
            }
            else if (mcc_2_42(2147483647))
            {
                mcc_consume_token(TILDA);
                val = typeExpr();
                if (val != null)
                {
                    mv = new MultiValue(val, true);
                    list.Add(mv);
                }
            }
            else
            {
                switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                {
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case STRING_LITERAL:
                    case PATH_LITERAL:
                        val = typeExpr();
                        if (val != null)
                        {
                            mv = new MultiValue(val);
                            list.Add(mv);
                        }
                        break;
                    default:
                        mcc_la1[57] = mcc_gen;
                        mcc_consume_token(-1);
                        throw new ParseException();
                }
            }
        }

        public void predicateFunc(ArrayList list, Token identifier)
        {
            Token varname = null;
            String func = null;
            ArrayList parms = new ArrayList();
            Token bind = null;
            Token val = null;
            varname = mcc_consume_token(BIND2);
            mcc_consume_token(LBRACE);
            func = functionName();
            bind = mcc_consume_token(BIND);
            actionParams(parms);
            mcc_consume_token(RBRACE);
            PredicateConstraint predc = new PredicateConstraint();
            predc.Name = identifier.image;
            predc.VariableName = varname.image.Substring(1, varname.image.Length - 2);
            predc.FunctionName = func;
            BoundParam bp = new BoundParam();
            bp.VariableName = bind.image;
            predc.addParameter(bp);
            predc.addParameters(parms);
            list.Add(predc);
        }

        public String functionName()
        {
            Token fname = null;
            switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
            {
                case IDENTIFIER:
                    fname = mcc_consume_token(IDENTIFIER);
                    {
                        if (true) return fname.image;
                    }
                    break;
                case PLUS:
                case MINUS:
                case MULTIPLY:
                case DIVIDE:
                case GT1:
                case GT2:
                case LT1:
                case LT2:
                case EQ1:
                case EQ2:
                case LE1:
                case LE2:
                case GE1:
                case GE2:
                    switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                    {
                        case PLUS:
                            fname = mcc_consume_token(PLUS);
                            break;
                        case MINUS:
                            fname = mcc_consume_token(MINUS);
                            break;
                        case MULTIPLY:
                            fname = mcc_consume_token(MULTIPLY);
                            break;
                        case DIVIDE:
                            fname = mcc_consume_token(DIVIDE);
                            break;
                        case GT1:
                            fname = mcc_consume_token(GT1);
                            break;
                        case GT2:
                            fname = mcc_consume_token(GT2);
                            break;
                        case LT1:
                            fname = mcc_consume_token(LT1);
                            break;
                        case LT2:
                            fname = mcc_consume_token(LT2);
                            break;
                        case EQ1:
                            fname = mcc_consume_token(EQ1);
                            break;
                        case EQ2:
                            fname = mcc_consume_token(EQ2);
                            break;
                        case LE1:
                            fname = mcc_consume_token(LE1);
                            break;
                        case LE2:
                            fname = mcc_consume_token(LE2);
                            break;
                        case GE1:
                            fname = mcc_consume_token(GE1);
                            break;
                        case GE2:
                            fname = mcc_consume_token(GE2);
                            break;
                        default:
                            mcc_la1[58] = mcc_gen;
                            mcc_consume_token(-1);
                            throw new ParseException();
                    }
                    {
                        if (true) return fname.image;
                    }
                    break;
                default:
                    mcc_la1[59] = mcc_gen;
                    mcc_consume_token(-1);
                    throw new ParseException();
            }
            throw new Exception("Missing return statement in function");
        }

        public void arrow()
        {
            Token exp;
            exp = mcc_consume_token(ARROW);
            exp = null;
        }

        public void ruleActions(ArrayList list)
        {
            switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
            {
                case LBRACE:
                    while (true)
                    {
                        mcc_consume_token(LBRACE);
                        ruleAction(list);
                        mcc_consume_token(RBRACE);
                        switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
                        {
                            case LBRACE:
                                ;
                                break;
                            default:
                                mcc_la1[60] = mcc_gen;
                                goto label_29;
                        }
                    }
                    label_29:
                    ;

                    break;
                default:
                    mcc_la1[61] = mcc_gen;
                    ;
                    break;
            }
        }

        public void ruleAction(ArrayList list)
        {
            Object exp;
            exp = expr();
            list.Add(exp);
        }

        public void actionParams(ArrayList list)
        {
            Object exp;
            ValueParam vp = null;
            switch ((mcc_ntk == -1) ? mcc_mntk() : mcc_ntk)
            {
                case BIND:
                    exp = mcc_consume_token(BIND);
                    if (exp is Token)
                    {
                        BoundParam bp = new BoundParam();
                        bp.VariableName = ((Token) exp).image.Substring(1);
                        list.Add(bp);
                    }
                    break;
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case STRING_LITERAL:
                case PATH_LITERAL:
                    exp = typeExpr();
                    vp = new ValueParam();
                    if (exp is Token)
                    {
                        vp.Value = ((Token) exp).image;
                    }
                    else
                    {
                        vp.Value = exp;
                    }
                    if (exp is long)
                    {
                        vp.ValueType = Constants.LONG_PRIM_TYPE;
                    }
                    else if (exp is float)
                    {
                        vp.ValueType = Constants.DOUBLE_PRIM_TYPE;
                    }
                    else if (exp is String)
                    {
                        vp.ValueType = Constants.STRING_TYPE;
                    }
                    list.Add(vp);
                    break;
                case IDENTIFIER:
                    exp = mcc_consume_token(IDENTIFIER);
                    vp = new ValueParam();
                    vp.ValueType = Constants.STRING_TYPE;
                    if (exp is Token)
                    {
                        vp.Value = ((Token) exp).image;
                    }
                    else
                    {
                        vp.Value = exp;
                    }
                    list.Add(vp);
                    break;
                default:
                    mcc_la1[62] = mcc_gen;
                    mcc_consume_token(-1);
                    throw new ParseException();
            }
        }

        private bool mcc_2_1(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_1();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(0, xla);
            }
        }

        private bool mcc_2_2(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_2();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(1, xla);
            }
        }

        private bool mcc_2_3(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_3();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(2, xla);
            }
        }

        private bool mcc_2_4(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_4();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(3, xla);
            }
        }

        private bool mcc_2_5(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_5();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(4, xla);
            }
        }

        private bool mcc_2_6(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_6();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(5, xla);
            }
        }

        private bool mcc_2_7(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_7();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(6, xla);
            }
        }

        private bool mcc_2_8(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_8();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(7, xla);
            }
        }

        private bool mcc_2_9(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_9();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(8, xla);
            }
        }

        private bool mcc_2_10(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_10();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(9, xla);
            }
        }

        private bool mcc_2_11(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_11();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(10, xla);
            }
        }

        private bool mcc_2_12(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_12();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(11, xla);
            }
        }

        private bool mcc_2_13(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_13();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(12, xla);
            }
        }

        private bool mcc_2_14(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_14();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(13, xla);
            }
        }

        private bool mcc_2_15(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_15();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(14, xla);
            }
        }

        private bool mcc_2_16(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_16();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(15, xla);
            }
        }

        private bool mcc_2_17(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_17();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(16, xla);
            }
        }

        private bool mcc_2_18(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_18();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(17, xla);
            }
        }

        private bool mcc_2_19(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_19();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(18, xla);
            }
        }

        private bool mcc_2_20(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_20();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(19, xla);
            }
        }

        private bool mcc_2_21(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_21();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(20, xla);
            }
        }

        private bool mcc_2_22(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_22();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(21, xla);
            }
        }

        private bool mcc_2_23(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_23();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(22, xla);
            }
        }

        private bool mcc_2_24(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_24();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(23, xla);
            }
        }

        private bool mcc_2_25(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_25();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(24, xla);
            }
        }

        private bool mcc_2_26(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_26();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(25, xla);
            }
        }

        private bool mcc_2_27(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_27();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(26, xla);
            }
        }

        private bool mcc_2_28(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_28();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(27, xla);
            }
        }

        private bool mcc_2_29(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_29();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(28, xla);
            }
        }

        private bool mcc_2_30(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_30();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(29, xla);
            }
        }

        private bool mcc_2_31(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_31();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(30, xla);
            }
        }

        private bool mcc_2_32(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_32();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(31, xla);
            }
        }

        private bool mcc_2_33(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_33();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(32, xla);
            }
        }

        private bool mcc_2_34(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_34();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(33, xla);
            }
        }

        private bool mcc_2_35(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_35();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(34, xla);
            }
        }

        private bool mcc_2_36(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_36();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(35, xla);
            }
        }

        private bool mcc_2_37(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_37();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(36, xla);
            }
        }

        private bool mcc_2_38(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_38();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(37, xla);
            }
        }

        private bool mcc_2_39(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_39();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(38, xla);
            }
        }

        private bool mcc_2_40(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_40();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(39, xla);
            }
        }

        private bool mcc_2_41(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_41();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(40, xla);
            }
        }

        private bool mcc_2_42(int xla)
        {
            mcc_la = xla;
            mcc_lastpos = mcc_scanpos = token;
            try
            {
                return !mcc_3_42();
            }
            catch (LookaheadSuccess)
            {
                return true;
            }
            finally
            {
                mcc_save(41, xla);
            }
        }

        private bool mcc_3_27()
        {
            if (mcc_scan_token(BIND4)) return true;
            return false;
        }

        private bool mcc_3_16()
        {
            if (mcc_scan_token(LBRACE)) return true;
            if (mcc_scan_token(RULEVERSION)) return true;
            return false;
        }

        private bool mcc_3_40()
        {
            if (mcc_scan_token(TILDA)) return true;
            Token xsp;
            xsp = mcc_scanpos;
            if (mcc_scan_token(14))
            {
                mcc_scanpos = xsp;
                if (mcc_scan_token(11))
                {
                    mcc_scanpos = xsp;
                    if (mcc_scan_token(12)) return true;
                }
            }
            return false;
        }

        private bool mcc_3_15()
        {
            if (mcc_scan_token(LBRACE)) return true;
            if (mcc_scan_token(AUTOFOCUS)) return true;
            return false;
        }

        private bool mcc_3_23()
        {
            if (mcc_scan_token(BIND)) return true;
            return false;
        }

        private bool mcc_3_26()
        {
            if (mcc_scan_token(BIND2)) return true;
            return false;
        }

        private bool mcc_3_33()
        {
            if (mcc_scan_token(TILDA)) return true;
            Token xsp;
            xsp = mcc_scanpos;
            if (mcc_scan_token(14))
            {
                mcc_scanpos = xsp;
                if (mcc_scan_token(11))
                {
                    mcc_scanpos = xsp;
                    if (mcc_scan_token(12)) return true;
                }
            }
            if (mcc_scan_token(AND2)) return true;
            return false;
        }

        private bool mcc_3_39()
        {
            if (mcc_scan_token(IDENTIFIER)) return true;
            return false;
        }

        private bool mcc_3_7()
        {
            if (mcc_scan_token(BIND3)) return true;
            if (mcc_scan_token(BIND3)) return true;
            return false;
        }

        private bool mcc_3_14()
        {
            if (mcc_scan_token(LBRACE)) return true;
            if (mcc_scan_token(SALIENCE)) return true;
            return false;
        }

        private bool mcc_3_6()
        {
            if (mcc_scan_token(BIND)) return true;
            if (mcc_scan_token(BIND)) return true;
            return false;
        }

        private bool mcc_3_5()
        {
            if (mcc_scan_token(FLOATING_POINT_LITERAL)) return true;
            if (mcc_scan_token(FLOATING_POINT_LITERAL)) return true;
            return false;
        }

        private bool mcc_3_38()
        {
            Token xsp;
            xsp = mcc_scanpos;
            if (mcc_scan_token(14))
            {
                mcc_scanpos = xsp;
                if (mcc_scan_token(11))
                {
                    mcc_scanpos = xsp;
                    if (mcc_scan_token(12)) return true;
                }
            }
            return false;
        }

        private bool mcc_3_4()
        {
            if (mcc_scan_token(INTEGER_LITERAL)) return true;
            if (mcc_scan_token(INTEGER_LITERAL)) return true;
            return false;
        }

        private bool mcc_3_37()
        {
            if (mcc_scan_token(BIND)) return true;
            return false;
        }

        private bool mcc_3_1()
        {
            if (mcc_scan_token(LBRACE)) return true;
            return false;
        }

        private bool mcc_3_32()
        {
            Token xsp;
            xsp = mcc_scanpos;
            if (mcc_scan_token(14))
            {
                mcc_scanpos = xsp;
                if (mcc_scan_token(11))
                {
                    mcc_scanpos = xsp;
                    if (mcc_scan_token(12))
                    {
                        mcc_scanpos = xsp;
                        if (mcc_scan_token(15)) return true;
                    }
                }
            }
            if (mcc_scan_token(AND2)) return true;
            return false;
        }

        private bool mcc_3_3()
        {
            if (mcc_scan_token(STRING_LITERAL)) return true;
            if (mcc_scan_token(STRING_LITERAL)) return true;
            return false;
        }

        private bool mcc_3_2()
        {
            if (mcc_scan_token(IDENTIFIER)) return true;
            if (mcc_scan_token(IDENTIFIER)) return true;
            return false;
        }

        private bool mcc_3_11()
        {
            if (mcc_scan_token(LBRACE)) return true;
            if (mcc_scan_token(DEFAULTVALUE)) return true;
            return false;
        }

        private bool mcc_3_31()
        {
            if (mcc_scan_token(TILDA)) return true;
            Token xsp;
            xsp = mcc_scanpos;
            if (mcc_scan_token(14))
            {
                mcc_scanpos = xsp;
                if (mcc_scan_token(11))
                {
                    mcc_scanpos = xsp;
                    if (mcc_scan_token(12)) return true;
                }
            }
            if (mcc_scan_token(OR2)) return true;
            return false;
        }

        private bool mcc_3_42()
        {
            if (mcc_scan_token(TILDA)) return true;
            Token xsp;
            xsp = mcc_scanpos;
            if (mcc_scan_token(14))
            {
                mcc_scanpos = xsp;
                if (mcc_scan_token(11))
                {
                    mcc_scanpos = xsp;
                    if (mcc_scan_token(12)) return true;
                }
            }
            return false;
        }

        private bool mcc_3_12()
        {
            if (mcc_scan_token(STRING_LITERAL)) return true;
            return false;
        }

        private bool mcc_3_41()
        {
            if (mcc_scan_token(IDENTIFIER)) return true;
            return false;
        }

        private bool mcc_3_10()
        {
            if (mcc_scan_token(LBRACE)) return true;
            if (mcc_scan_token(TYPEDEF)) return true;
            return false;
        }

        private bool mcc_3_30()
        {
            Token xsp;
            xsp = mcc_scanpos;
            if (mcc_scan_token(14))
            {
                mcc_scanpos = xsp;
                if (mcc_scan_token(11))
                {
                    mcc_scanpos = xsp;
                    if (mcc_scan_token(12)) return true;
                }
            }
            if (mcc_scan_token(OR2)) return true;
            return false;
        }

        private bool mcc_3_22()
        {
            if (mcc_scan_token(LBRACE)) return true;
            if (mcc_scan_token(TEMPORALACTIVATION)) return true;
            return false;
        }

        private bool mcc_3_13()
        {
            if (mcc_scan_token(LBRACE)) return true;
            if (mcc_scan_token(DECLARE)) return true;
            return false;
        }

        private bool mcc_3_36()
        {
            if (mcc_scan_token(TILDA)) return true;
            if (mcc_scan_token(IDENTIFIER)) return true;
            return false;
        }

        private bool mcc_3_21()
        {
            if (mcc_scan_token(LBRACE)) return true;
            if (mcc_scan_token(NOAGENDA)) return true;
            return false;
        }

        private bool mcc_3_29()
        {
            if (mcc_scan_token(TILDA)) return true;
            if (mcc_scan_token(BIND)) return true;
            if (mcc_scan_token(RBRACE)) return true;
            return false;
        }

        private bool mcc_3_24()
        {
            if (mcc_scan_token(NOTCE)) return true;
            if (mcc_scan_token(LBRACE)) return true;
            if (mcc_scan_token(IDENTIFIER)) return true;
            if (mcc_scan_token(LBRACE)) return true;
            return false;
        }

        private bool mcc_3_20()
        {
            if (mcc_scan_token(LBRACE)) return true;
            if (mcc_scan_token(CHAININGDIRECTION)) return true;
            return false;
        }

        private bool mcc_3_9()
        {
            if (mcc_scan_token(LBRACE)) return true;
            if (mcc_scan_token(MULTISLOT)) return true;
            return false;
        }

        private bool mcc_3_25()
        {
            if (mcc_scan_token(BIND)) return true;
            if (mcc_scan_token(LBRACE)) return true;
            if (mcc_scan_token(RELATIVETIME)) return true;
            return false;
        }

        private bool mcc_3_35()
        {
            if (mcc_scan_token(IDENTIFIER)) return true;
            return false;
        }

        private bool mcc_3_19()
        {
            if (mcc_scan_token(LBRACE)) return true;
            if (mcc_scan_token(EXPIRATION)) return true;
            return false;
        }

        private bool mcc_3_28()
        {
            if (mcc_scan_token(BIND)) return true;
            if (mcc_scan_token(RBRACE)) return true;
            return false;
        }

        private bool mcc_3_18()
        {
            if (mcc_scan_token(LBRACE)) return true;
            if (mcc_scan_token(EFFECTIVE)) return true;
            return false;
        }

        private bool mcc_3_8()
        {
            if (mcc_scan_token(LBRACE)) return true;
            if (mcc_scan_token(SLOT)) return true;
            return false;
        }

        private bool mcc_3_17()
        {
            if (mcc_scan_token(LBRACE)) return true;
            if (mcc_scan_token(REMEMBERMATCH)) return true;
            return false;
        }

        private bool mcc_3_34()
        {
            if (mcc_scan_token(TILDA)) return true;
            Token xsp;
            xsp = mcc_scanpos;
            if (mcc_scan_token(14))
            {
                mcc_scanpos = xsp;
                if (mcc_scan_token(11))
                {
                    mcc_scanpos = xsp;
                    if (mcc_scan_token(12)) return true;
                }
            }
            return false;
        }

        private static void mcc_gla1_0()
        {
            mcc_la1_0 = new int[] {426497, 512, 22528, 512, 512, 34816, 449024, 449024, 425984, 425984, 1099956224, 449024, 0, 449024, 449024, 449024, 1099956224, 448512, 425984, 512, 448512, 186368, 186368, 186368, 186368, 186368, 186368, 448512, 448512, 186368, 512, 2097152, 33280, 33280, 6144, 0, 512, 512, 512, 512, 512, 512, 512, 0, 512, 512, 449024, 512, 512, 512, 32768, 0, 0, 0, 0, 22528, 55296, 22528, 0, 0, 512, 512, 55296,};
        }

        private static void mcc_gla1_1()
        {
            mcc_la1_1 = new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135266529, 0, 0, 0, 0, 0, 135266529, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 623616, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33556480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,};
        }

        private static void mcc_gla1_2()
        {
            mcc_la1_2 = new int[] {0, 0, 0, 0, 0, 0, 3456, 3456, 0, 0, 1073676288, 3456, 1073676288, 3456, 3456, 3456, 1073676288, 3456, 0, 0, 3456, 0, 0, 0, 0, 0, 0, 3456, 3456, 0, 0, 13, 0, 0, 0, 3456, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 3456, 0, 0, 0, 0, 0, 0, 0, 0, 3456, 0, 0, 1073676288, 1073676288, 0, 0, 0,};
        }

        private static void mcc_gla1_3()
        {
            mcc_la1_3 = new int[] {0, 0, 256, 0, 0, 0, 288, 288, 0, 0, 32, 288, 0, 288, 288, 288, 32, 288, 0, 0, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 288, 0, 0, 0, 0, 8, 8, 2, 2, 256, 272, 256, 0, 32, 0, 0, 288,};
        }

        public void ReInit(Stream stream)
        {
            mcc_input_stream.ReInit(stream, 1, 1);
            token_source.ReInit(mcc_input_stream);
            token = new Token();
            mcc_ntk = -1;
            mcc_gen = 0;
            for (int i = 0; i < 63; i++) mcc_la1[i] = -1;
            for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
        }

        public void ReInit(TextReader stream)
        {
            mcc_input_stream.ReInit(stream, 1, 1);
            token_source.ReInit(mcc_input_stream);
            token = new Token();
            mcc_ntk = -1;
            mcc_gen = 0;
            for (int i = 0; i < 63; i++) mcc_la1[i] = -1;
            for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
        }

        public void ReInit(CLIPSParserTokenManager tm)
        {
            token_source = tm;
            token = new Token();
            mcc_ntk = -1;
            mcc_gen = 0;
            for (int i = 0; i < 63; i++) mcc_la1[i] = -1;
            for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
        }

        private Token mcc_consume_token(int kind)
        {
            Token oldToken = null;
            if ((oldToken = token).next != null) token = token.next;
            else token = token.next = token_source.GetNextToken();
            mcc_ntk = -1;
            if (token.kind == kind)
            {
                mcc_gen++;
                if (++mcc_gc > 100)
                {
                    mcc_gc = 0;
                    for (int i = 0; i < mcc_2_rtns.Length; i++)
                    {
                        MccCalls c = mcc_2_rtns[i];
                        while (c != null)
                        {
                            if (c.gen < mcc_gen) c.first = null;
                            c = c.next;
                        }
                    }
                }
                return token;
            }
            token = oldToken;
            mcc_kind = kind;
            throw GenerateParseException();
        }

        private bool mcc_scan_token(int kind)
        {
            if (mcc_scanpos == mcc_lastpos)
            {
                mcc_la--;
                if (mcc_scanpos.next == null)
                {
                    mcc_lastpos = mcc_scanpos = mcc_scanpos.next = token_source.GetNextToken();
                }
                else
                {
                    mcc_lastpos = mcc_scanpos = mcc_scanpos.next;
                }
            }
            else
            {
                mcc_scanpos = mcc_scanpos.next;
            }
            if (mcc_rescan)
            {
                int i = 0;
                Token tok = token;
                while (tok != null && tok != mcc_scanpos)
                {
                    i++;
                    tok = tok.next;
                }
                if (tok != null) mcc_add_error_token(kind, i);
            }
            if (mcc_scanpos.kind != kind) return true;
            if (mcc_la == 0 && mcc_scanpos == mcc_lastpos) throw mcc_ls;
            return false;
        }

        public Token GetNextToken()
        {
            if (token.next != null) token = token.next;
            else token = token.next = token_source.GetNextToken();
            mcc_ntk = -1;
            mcc_gen++;
            return token;
        }

        public Token GetToken(int index)
        {
            Token t = lookingAhead ? mcc_scanpos : token;
            for (int i = 0; i < index; i++)
            {
                if (t.next != null) t = t.next;
                else t = t.next = token_source.GetNextToken();
            }
            return t;
        }

        private int mcc_mntk()
        {
            if ((mcc_nt = token.next) == null)
                return (mcc_ntk = (token.next = token_source.GetNextToken()).kind);
            else
                return (mcc_ntk = mcc_nt.kind);
        }

        private void mcc_add_error_token(int kind, int pos)
        {
            if (pos >= 100) return;
            if (pos == mcc_endpos + 1)
            {
                mcc_lasttokens[mcc_endpos++] = kind;
            }
            else if (mcc_endpos != 0)
            {
                mcc_expentry = new int[mcc_endpos];
                for (int i = 0; i < mcc_endpos; i++)
                {
                    mcc_expentry[i] = mcc_lasttokens[i];
                }
                bool exists = false;
                for (IEnumerator e = mcc_expentries.GetEnumerator(); e.MoveNext();)
                {
                    int[] oldentry = (int[]) e.Current;
                    if (oldentry.Length == mcc_expentry.Length)
                    {
                        exists = true;
                        for (int i = 0; i < mcc_expentry.Length; i++)
                        {
                            if (oldentry[i] != mcc_expentry[i])
                            {
                                exists = false;
                                break;
                            }
                        }
                        if (exists) break;
                    }
                }
                if (!exists) mcc_expentries.Add(mcc_expentry);
                if (pos != 0) mcc_lasttokens[(mcc_endpos = pos) - 1] = kind;
            }
        }

        public ParseException GenerateParseException()
        {
            mcc_expentries.Clear();
            bool[] la1tokens = new bool[105];
            for (int i = 0; i < 105; i++)
            {
                la1tokens[i] = false;
            }
            if (mcc_kind >= 0)
            {
                la1tokens[mcc_kind] = true;
                mcc_kind = -1;
            }
            for (int i = 0; i < 63; i++)
            {
                if (mcc_la1[i] == mcc_gen)
                {
                    for (int j = 0; j < 32; j++)
                    {
                        if ((mcc_la1_0[i] & (1 << j)) != 0)
                        {
                            la1tokens[j] = true;
                        }
                        if ((mcc_la1_1[i] & (1 << j)) != 0)
                        {
                            la1tokens[32 + j] = true;
                        }
                        if ((mcc_la1_2[i] & (1 << j)) != 0)
                        {
                            la1tokens[64 + j] = true;
                        }
                        if ((mcc_la1_3[i] & (1 << j)) != 0)
                        {
                            la1tokens[96 + j] = true;
                        }
                    }
                }
            }
            for (int i = 0; i < 105; i++)
            {
                if (la1tokens[i])
                {
                    mcc_expentry = new int[1];
                    mcc_expentry[0] = i;
                    mcc_expentries.Add(mcc_expentry);
                }
            }
            mcc_endpos = 0;
            mcc_rescan_token();
            mcc_add_error_token(0, 0);
            int[][] exptokseq = new int[mcc_expentries.Count][];
            for (int i = 0; i < mcc_expentries.Count; i++)
            {
                exptokseq[i] = (int[]) mcc_expentries[i];
            }
            return new ParseException(token, exptokseq, tokenImage);
        }

        public void enable_tracing()
        {
        }

        public void disable_tracing()
        {
        }

        private void mcc_rescan_token()
        {
            mcc_rescan = true;
            for (int i = 0; i < 42; i++)
            {
                MccCalls p = mcc_2_rtns[i];
                do
                {
                    if (p.gen > mcc_gen)
                    {
                        mcc_la = p.arg;
                        mcc_lastpos = mcc_scanpos = p.first;
                        switch (i)
                        {
                            case 0:
                                mcc_3_1();
                                break;
                            case 1:
                                mcc_3_2();
                                break;
                            case 2:
                                mcc_3_3();
                                break;
                            case 3:
                                mcc_3_4();
                                break;
                            case 4:
                                mcc_3_5();
                                break;
                            case 5:
                                mcc_3_6();
                                break;
                            case 6:
                                mcc_3_7();
                                break;
                            case 7:
                                mcc_3_8();
                                break;
                            case 8:
                                mcc_3_9();
                                break;
                            case 9:
                                mcc_3_10();
                                break;
                            case 10:
                                mcc_3_11();
                                break;
                            case 11:
                                mcc_3_12();
                                break;
                            case 12:
                                mcc_3_13();
                                break;
                            case 13:
                                mcc_3_14();
                                break;
                            case 14:
                                mcc_3_15();
                                break;
                            case 15:
                                mcc_3_16();
                                break;
                            case 16:
                                mcc_3_17();
                                break;
                            case 17:
                                mcc_3_18();
                                break;
                            case 18:
                                mcc_3_19();
                                break;
                            case 19:
                                mcc_3_20();
                                break;
                            case 20:
                                mcc_3_21();
                                break;
                            case 21:
                                mcc_3_22();
                                break;
                            case 22:
                                mcc_3_23();
                                break;
                            case 23:
                                mcc_3_24();
                                break;
                            case 24:
                                mcc_3_25();
                                break;
                            case 25:
                                mcc_3_26();
                                break;
                            case 26:
                                mcc_3_27();
                                break;
                            case 27:
                                mcc_3_28();
                                break;
                            case 28:
                                mcc_3_29();
                                break;
                            case 29:
                                mcc_3_30();
                                break;
                            case 30:
                                mcc_3_31();
                                break;
                            case 31:
                                mcc_3_32();
                                break;
                            case 32:
                                mcc_3_33();
                                break;
                            case 33:
                                mcc_3_34();
                                break;
                            case 34:
                                mcc_3_35();
                                break;
                            case 35:
                                mcc_3_36();
                                break;
                            case 36:
                                mcc_3_37();
                                break;
                            case 37:
                                mcc_3_38();
                                break;
                            case 38:
                                mcc_3_39();
                                break;
                            case 39:
                                mcc_3_40();
                                break;
                            case 40:
                                mcc_3_41();
                                break;
                            case 41:
                                mcc_3_42();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            }
            mcc_rescan = false;
        }

        private void mcc_save(int index, int xla)
        {
            MccCalls p = mcc_2_rtns[index];
            while (p.gen > mcc_gen)
            {
                if (p.next == null)
                {
                    p = p.next = new MccCalls();
                    break;
                }
                p = p.next;
            }
            p.gen = mcc_gen + xla - mcc_la;
            p.first = token;
            p.arg = xla;
        }

        #region Nested type: LookaheadSuccess

        private class LookaheadSuccess : Exception
        {
        }

        #endregion

        #region Nested type: MccCalls

        private class MccCalls
        {
            public int arg;
            public Token first;
            public int gen;
            public MccCalls next;
        }

        #endregion
    }
}