/* Generated By:MinosseCC: Do not edit this line. CLIPSParserTokenManager.cs */
using System;
using System.Diagnostics;
using System.IO;

namespace Creshendo.Util.Parser.Clips2
{
    public class CLIPSParserTokenManager : CLIPSParserConstants
    {
        public static readonly string[] lexStateNames = {
                                                            "DEFAULT",
                                                            "IN_COMMENT",
                                                        };

        private static readonly long[] mccbitVec0 = {
                                                        -2, -1L, -1L, -1L
                                                    };

        private static readonly long[] mccbitVec1 = {
                                                        -1L, -1L, -1L, -1L
                                                    };

        private static readonly long[] mccbitVec10 = {
                                                         0L, 281200098803712L, 0L, 281200098803712L
                                                     };

        private static readonly long[] mccbitVec11 = {
                                                         0L, 4393751543808L, 0L, 287948901175001088L
                                                     };

        private static readonly long[] mccbitVec12 = {
                                                         0L, 281200098803712L, 0L, 280925220896768L
                                                     };

        private static readonly long[] mccbitVec13 = {
                                                         0L, 281200098803712L, 0L, 0L
                                                     };

        private static readonly long[] mccbitVec14 = {
                                                         0L, 67043328L, 0L, 67043328L
                                                     };

        private static readonly long[] mccbitVec15 = {
                                                         0L, 1023L, 0L, 0L
                                                     };

        private static readonly long[] mccbitVec2 = {
                                                        0L, 0L, -1L, -1L
                                                    };

        private static readonly long[] mccbitVec3 = {
                                                        2301339413881290750, -16384L, 4294967295L, 432345564227567616L
                                                    };

        private static readonly long[] mccbitVec4 = {
                                                        0L, 0L, 0L, -36028797027352577L
                                                    };

        private static readonly long[] mccbitVec5 = {
                                                        0L, -1L, -1L, -1L
                                                    };

        private static readonly long[] mccbitVec6 = {
                                                        -1L, -1L, 65535L, 0L
                                                    };

        private static readonly long[] mccbitVec7 = {
                                                        -1L, -1L, 0L, 0L
                                                    };

        private static readonly long[] mccbitVec8 = {
                                                        70368744177663L, 0L, 0L, 0L
                                                    };

        private static readonly long[] mccbitVec9 = {
                                                        5632, 0L, 0L, 0L
                                                    };

        public static readonly int[] mccnewLexState = {
                                                          -1, -1, -1, -1, -1, 1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                          -1, -1, -1, -1, -1,
                                                      };

        private static readonly int[] mccnextStates = {
                                                          11, 12, 14, 6, 7, 9, 43, 44, 47, 31, 32, 33, 38, 39, 3, 4,
                                                          16, 17, 36, 37, 40, 41, 44, 46, 47, 49,
                                                      };

        public static readonly string[] mccstrLiteralImages = {
                                                                  "", null, null, null, null, null, null, null, null, "(", ")", null, null, null,
                                                                  null, null, null, null, null, null, "bind", "BOOLEAN", "aggregate", "assert",
                                                                  "assert-temporal", "auto-focus", "allowed-values", "chaining-direction", "command", "declare",
                                                                  "defclass", "deffact", "deffunction", "defgeneric", "defglobal", "definstance",
                                                                  "defmethod", "defmodule", "defrule", "deftemplate", "describe-class", "default", "DOUBLE",
                                                                  "exists", "effective-date", "expiration-date", "fact-index", "FLOAT", "INTEGER",
                                                                  "interval-time", "logical", "LONG", "modify", "multislot", "no-agenda", "no-loop", "NUMBER",
                                                                  "not", "remember-match", "retract", "rule-version", "relative-time", "salience",
                                                                  "send", "SHORT", "slot", "STRING", "symbol", "temporal-activation", "temporal",
                                                                  "test", "TRUE", "true", "type", "FALSE", "false", "nil", "=>", "<-", ";", "+", "-",
                                                                  "*", "/", ">", "gt", "<", "lt", "==", "eq", "<=", "le", ">=", "ge", "!=", "ne",
                                                                  "and", "&", "or", "|", "~", null, null, null, null,
                                                              };

        private static readonly long[] mcctoMore = {
                                                       192, 0,
                                                   };

        private static readonly long[] mcctoSkip = {
                                                       318, 0,
                                                   };

        private static readonly long[] mcctoToken = {
                                                        -8703, 2199023255551,
                                                    };

        private readonly int[] mccrounds = new int[50];
        private readonly int[] mccstateSet = new int[100];
        protected char curChar;
        private int curLexState = 0;

        public TextWriter debugStream = Console.Out;
        private int defaultLexState = 0;
        protected SimpleCharStream input_stream;
        private int mccmatchedKind;
        private int mccmatchedPos;
        private int mccnewStateCnt;
        private int mccround;

        public CLIPSParserTokenManager(SimpleCharStream stream)
        {
            if (SimpleCharStream.staticFlag)
                throw new Exception("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
            input_stream = stream;
        }

        public CLIPSParserTokenManager(SimpleCharStream stream, int lexState) :
            this(stream)
        {
            SwitchTo(lexState);
        }

        public void SetDebugStream(TextWriter ds)
        {
            debugStream = ds;
        }

        private int mccStopStringLiteralDfa_0(int pos, long active0, long active1)
        {
            switch (pos)
            {
                case 0:
                    if ((active0 & -1048576L) != 0L || (active1 & 24337456271L) != 0L)
                    {
                        mccmatchedKind = 101;
                        return 50;
                    }
                    if ((active1 & 880L) != 0L)
                    {
                        mccmatchedKind = 101;
                        return 25;
                    }
                    if ((active1 & 655360L) != 0L)
                        return 50;
                    if ((active1 & 68719476736L) != 0L)
                        return 51;
                    return -1;
                case 1:
                    if ((active0 & -1048576L) != 0L || (active1 & 4294974975L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 1;
                        return 50;
                    }
                    if ((active1 & 512L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 1;
                        return 24;
                    }
                    if ((active1 & 10485760L) != 0L)
                        return 25;
                    if ((active1 & 20031995904L) != 0L)
                        return 50;
                    return -1;
                case 2:
                    if ((active0 & 577023702290399232L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 2;
                        return 25;
                    }
                    if ((active1 & 512L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 2;
                        return 23;
                    }
                    if ((active0 & -721138890367303680L) != 0L || (active1 & 3583L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 2;
                        return 50;
                    }
                    if ((active0 & 144115188075855872L) != 0L)
                        return 25;
                    if ((active1 & 4294971392L) != 0L)
                        return 50;
                    return -1;
                case 3:
                    if ((active0 & 9067926931208404992L) != 0L || (active1 & 3133L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 3;
                        return 50;
                    }
                    if ((active1 & 66L) != 0L)
                        return 25;
                    if ((active0 & -9221120237040041984L) != 0L || (active1 & 896L) != 0L)
                        return 50;
                    if ((active0 & 9078117754732544L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 3;
                        return 25;
                    }
                    return -1;
                case 4:
                    if ((active0 & 6771012506168066048L) != 0L || (active1 & 60L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 4;
                        return 50;
                    }
                    if ((active0 & 2305851805306716160L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 4;
                        return 25;
                    }
                    if ((active0 & 140737488355328L) != 0L || (active1 & 3073L) != 0L)
                        return 50;
                    return -1;
                case 5:
                    if ((active0 & 17660905521152L) != 0L)
                    {
                        if (mccmatchedPos != 5)
                        {
                            mccmatchedKind = 101;
                            mccmatchedPos = 5;
                        }
                        return 25;
                    }
                    if ((active0 & 9000272262739263488L) != 0L || (active1 & 48L) != 0L)
                    {
                        if (mccmatchedPos != 5)
                        {
                            mccmatchedKind = 101;
                            mccmatchedPos = 5;
                        }
                        return 50;
                    }
                    if ((active0 & 25165824L) != 0L)
                        return 25;
                    if ((active0 & 76574387804831744L) != 0L || (active1 & 12L) != 0L)
                        return 50;
                    return -1;
                case 6:
                    if ((active0 & 35218731827200L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 6;
                        return 25;
                    }
                    if ((active0 & 8386355303867744256L) != 0L || (active1 & 48L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 6;
                        return 50;
                    }
                    if ((active0 & 576462953474162688L) != 0L)
                        return 25;
                    if ((active0 & 37436447587827712L) != 0L)
                        return 50;
                    return -1;
                case 7:
                    if ((active0 & 3774704498782502912L) != 0L)
                    {
                        if (mccmatchedPos != 7)
                        {
                            mccmatchedKind = 101;
                            mccmatchedPos = 7;
                        }
                        return 50;
                    }
                    if ((active0 & 4611686019501129728L) != 0L || (active1 & 48L) != 0L)
                        return 50;
                    if ((active0 & 4315938816L) != 0L)
                    {
                        if (mccmatchedPos != 7)
                        {
                            mccmatchedKind = 101;
                            mccmatchedPos = 7;
                        }
                        return 25;
                    }
                    return -1;
                case 8:
                    if ((active0 & 3747682681991725056L) != 0L || (active1 & 16L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 8;
                        return 50;
                    }
                    if ((active0 & 9007199254740992L) != 0L)
                        return 25;
                    if ((active0 & 18014621851975680L) != 0L)
                        return 50;
                    return -1;
                case 9:
                    if ((active0 & 2306406508922929152L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 9;
                        return 25;
                    }
                    if ((active0 & 1441205795701129216L) != 0L || (active1 & 16L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 9;
                        return 50;
                    }
                    if ((active0 & 70377367666688L) != 0L)
                        return 50;
                    return -1;
                case 10:
                    if ((active0 & 3747611716213538816L) != 0L || (active1 & 16L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 10;
                        return 50;
                    }
                    if ((active0 & 588410519552L) != 0L)
                        return 50;
                    return -1;
                case 11:
                    if ((active0 & 2306459835454980096L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 11;
                        return 50;
                    }
                    if ((active0 & 1152921504606846976L) != 0L)
                        return 50;
                    if ((active0 & 288230376151711744L) != 0L || (active1 & 16L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 11;
                        return 25;
                    }
                    return -1;
                case 12:
                    if ((active0 & 288266660253532160L) != 0L || (active1 & 16L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 12;
                        return 50;
                    }
                    if ((active0 & 2306405959167115264L) != 0L)
                        return 50;
                    if ((active0 & 17592186044416L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 12;
                        return 25;
                    }
                    return -1;
                case 13:
                    if ((active0 & 35184372088832L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 13;
                        return 25;
                    }
                    if ((active0 & 150994944L) != 0L || (active1 & 16L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 13;
                        return 50;
                    }
                    if ((active0 & 288249067916492800L) != 0L)
                        return 50;
                    return -1;
                case 14:
                    if ((active0 & 134217728L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 14;
                        return 25;
                    }
                    if ((active1 & 16L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 14;
                        return 50;
                    }
                    if ((active0 & 35184388866048L) != 0L)
                        return 50;
                    return -1;
                case 15:
                    if ((active0 & 134217728L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 15;
                        return 50;
                    }
                    if ((active1 & 16L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 15;
                        return 25;
                    }
                    return -1;
                case 16:
                    if ((active0 & 134217728L) != 0L || (active1 & 16L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 16;
                        return 50;
                    }
                    return -1;
                case 17:
                    if ((active1 & 16L) != 0L)
                    {
                        mccmatchedKind = 101;
                        mccmatchedPos = 17;
                        return 50;
                    }
                    if ((active0 & 134217728L) != 0L)
                        return 50;
                    return -1;
                default:
                    return -1;
            }
        }

        private int mccStartNfa_0(int pos, long active0, long active1)
        {
            return mccMoveNfa_0(mccStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
        }

        private int mccStopAtPos(int pos, int kind)
        {
            mccmatchedKind = kind;
            mccmatchedPos = pos;
            return pos + 1;
        }

        private int mccStartNfaWithStates_0(int pos, int kind, int state)
        {
            mccmatchedKind = kind;
            mccmatchedPos = pos;
            try
            {
                curChar = input_stream.ReadChar();
            }
            catch (IOException)
            {
                return pos + 1;
            }
            return mccMoveNfa_0(state, pos + 1);
        }

        private int mccMoveStringLiteralDfa0_0()
        {
            switch ((int) curChar)
            {
                case 33:
                    return mccMoveStringLiteralDfa1_0(0L, 1073741824L);
                case 38:
                    return mccStopAtPos(0, 97);
                case 40:
                    return mccStopAtPos(0, 9);
                case 41:
                    return mccStopAtPos(0, 10);
                case 42:
                    return mccStopAtPos(0, 82);
                case 43:
                    return mccStopAtPos(0, 80);
                case 45:
                    return mccStartNfaWithStates_0(0, 81, 50);
                case 47:
                    return mccStartNfaWithStates_0(0, 83, 50);
                case 59:
                    mccmatchedKind = 79;
                    return mccMoveStringLiteralDfa1_0(32L, 0L);
                case 60:
                    mccmatchedKind = 86;
                    return mccMoveStringLiteralDfa1_0(0L, 67125248L);
                case 61:
                    return mccMoveStringLiteralDfa1_0(0L, 16785408L);
                case 62:
                    mccmatchedKind = 84;
                    return mccMoveStringLiteralDfa1_0(0L, 268435456L);
                case 66:
                    return mccMoveStringLiteralDfa1_0(2097152L, 0L);
                case 68:
                    return mccMoveStringLiteralDfa1_0(4398046511104L, 0L);
                case 70:
                    return mccMoveStringLiteralDfa1_0(140737488355328L, 1024L);
                case 73:
                    return mccMoveStringLiteralDfa1_0(281474976710656L, 0L);
                case 76:
                    return mccMoveStringLiteralDfa1_0(2251799813685248L, 0L);
                case 78:
                    return mccMoveStringLiteralDfa1_0(72057594037927936L, 0L);
                case 83:
                    return mccMoveStringLiteralDfa1_0(0L, 5L);
                case 84:
                    return mccMoveStringLiteralDfa1_0(0L, 128L);
                case 97:
                    return mccMoveStringLiteralDfa1_0(130023424L, 4294967296L);
                case 98:
                    return mccMoveStringLiteralDfa1_0(1048576L, 0L);
                case 99:
                    return mccMoveStringLiteralDfa1_0(402653184L, 0L);
                case 100:
                    return mccMoveStringLiteralDfa1_0(4397509640192L, 0L);
                case 101:
                    return mccMoveStringLiteralDfa1_0(61572651155456L, 33554432L);
                case 102:
                    return mccMoveStringLiteralDfa1_0(70368744177664L, 2048L);
                case 103:
                    return mccMoveStringLiteralDfa1_0(0L, 538968064L);
                case 105:
                    return mccMoveStringLiteralDfa1_0(562949953421312L, 0L);
                case 108:
                    return mccMoveStringLiteralDfa1_0(1125899906842624L, 142606336L);
                case 109:
                    return mccMoveStringLiteralDfa1_0(13510798882111488L, 0L);
                case 110:
                    return mccMoveStringLiteralDfa1_0(198158383604301824L, 2147487744L);
                case 111:
                    return mccMoveStringLiteralDfa1_0(0L, 17179869184L);
                case 114:
                    return mccMoveStringLiteralDfa1_0(4323455642275676160L, 0L);
                case 115:
                    return mccMoveStringLiteralDfa1_0(-4611686018427387904L, 10L);
                case 116:
                    return mccMoveStringLiteralDfa1_0(0L, 880L);
                case 124:
                    return mccStopAtPos(0, 99);
                case 126:
                    return mccStartNfaWithStates_0(0, 100, 51);
                default:
                    return mccMoveNfa_0(0, 0);
            }
        }

        private int mccMoveStringLiteralDfa1_0(long active0, long active1)
        {
            try
            {
                curChar = input_stream.ReadChar();
            }
            catch (IOException)
            {
                mccStopStringLiteralDfa_0(0, active0, active1);
                return 1;
            }
            switch ((int) curChar)
            {
                case 45:
                    if ((active1 & 16384L) != 0L)
                        return mccStopAtPos(1, 78);
                    break;
                case 59:
                    if ((active0 & 32L) != 0L)
                        return mccStopAtPos(1, 5);
                    break;
                case 61:
                    if ((active1 & 16777216L) != 0L)
                        return mccStopAtPos(1, 88);
                    else if ((active1 & 67108864L) != 0L)
                        return mccStopAtPos(1, 90);
                    else if ((active1 & 268435456L) != 0L)
                        return mccStopAtPos(1, 92);
                    else if ((active1 & 1073741824L) != 0L)
                        return mccStopAtPos(1, 94);
                    break;
                case 62:
                    if ((active1 & 8192L) != 0L)
                        return mccStopAtPos(1, 77);
                    break;
                case 65:
                    return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 1024L);
                case 72:
                    return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 1L);
                case 76:
                    return mccMoveStringLiteralDfa2_0(active0, 140737488355328L, active1, 0L);
                case 78:
                    return mccMoveStringLiteralDfa2_0(active0, 281474976710656L, active1, 0L);
                case 79:
                    return mccMoveStringLiteralDfa2_0(active0, 2256197862293504L, active1, 0L);
                case 82:
                    return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 128L);
                case 84:
                    return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 4L);
                case 85:
                    return mccMoveStringLiteralDfa2_0(active0, 72057594037927936L, active1, 0L);
                case 97:
                    return mccMoveStringLiteralDfa2_0(active0, 4611756387171565568L, active1, 2048L);
                case 101:
                    if ((active1 & 134217728L) != 0L)
                        return mccStartNfaWithStates_0(1, 91, 50);
                    else if ((active1 & 536870912L) != 0L)
                        return mccStartNfaWithStates_0(1, 93, 50);
                    else if ((active1 & 2147483648L) != 0L)
                        return mccStartNfaWithStates_0(1, 95, 50);
                    return mccMoveStringLiteralDfa2_0(active0, -6052833501676306432L, active1, 112L);
                case 102:
                    return mccMoveStringLiteralDfa2_0(active0, 17592186044416L, active1, 0L);
                case 103:
                    return mccMoveStringLiteralDfa2_0(active0, 4194304L, active1, 0L);
                case 104:
                    return mccMoveStringLiteralDfa2_0(active0, 134217728L, active1, 0L);
                case 105:
                    return mccMoveStringLiteralDfa2_0(active0, 1048576L, active1, 4096L);
                case 108:
                    return mccMoveStringLiteralDfa2_0(active0, 67108864L, active1, 2L);
                case 110:
                    return mccMoveStringLiteralDfa2_0(active0, 562949953421312L, active1, 4294967296L);
                case 111:
                    return mccMoveStringLiteralDfa2_0(active0, 203787883406950400L, active1, 0L);
                case 113:
                    if ((active1 & 33554432L) != 0L)
                        return mccStartNfaWithStates_0(1, 89, 50);
                    break;
                case 114:
                    if ((active1 & 17179869184L) != 0L)
                        return mccStartNfaWithStates_0(1, 98, 50);
                    return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 256L);
                case 115:
                    return mccMoveStringLiteralDfa2_0(active0, 25165824L, active1, 0L);
                case 116:
                    if ((active1 & 2097152L) != 0L)
                        return mccStartNfaWithStates_0(1, 85, 25);
                    else if ((active1 & 8388608L) != 0L)
                        return mccStartNfaWithStates_0(1, 87, 25);
                    break;
                case 117:
                    return mccMoveStringLiteralDfa2_0(active0, 1161928703895142400L, active1, 0L);
                case 120:
                    return mccMoveStringLiteralDfa2_0(active0, 43980465111040L, active1, 0L);
                case 121:
                    return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 520L);
                default:
                    break;
            }
            return mccStartNfa_0(0, active0, active1);
        }

        private int mccMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return mccStartNfa_0(0, old0, old1);
            try
            {
                curChar = input_stream.ReadChar();
            }
            catch (IOException)
            {
                mccStopStringLiteralDfa_0(1, active0, active1);
                return 2;
            }
            switch ((int) curChar)
            {
                case 45:
                    return mccMoveStringLiteralDfa3_0(active0, 54043195528445952L, active1, 0L);
                case 76:
                    return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 1024L);
                case 77:
                    return mccMoveStringLiteralDfa3_0(active0, 72057594037927936L, active1, 0L);
                case 78:
                    return mccMoveStringLiteralDfa3_0(active0, 2251799813685248L, active1, 0L);
                case 79:
                    return mccMoveStringLiteralDfa3_0(active0, 140737490452480L, active1, 1L);
                case 82:
                    return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 4L);
                case 84:
                    return mccMoveStringLiteralDfa3_0(active0, 281474976710656L, active1, 0L);
                case 85:
                    return mccMoveStringLiteralDfa3_0(active0, 4398046511104L, active1, 128L);
                case 97:
                    return mccMoveStringLiteralDfa3_0(active0, 134217728L, active1, 0L);
                case 99:
                    return mccMoveStringLiteralDfa3_0(active0, 70369281048576L, active1, 0L);
                case 100:
                    if ((active1 & 4294967296L) != 0L)
                        return mccStartNfaWithStates_0(2, 96, 50);
                    return mccMoveStringLiteralDfa3_0(active0, 4503599627370496L, active1, 0L);
                case 102:
                    return mccMoveStringLiteralDfa3_0(active0, 20889647185920L, active1, 0L);
                case 103:
                    return mccMoveStringLiteralDfa3_0(active0, 1125899911036928L, active1, 0L);
                case 105:
                    return mccMoveStringLiteralDfa3_0(active0, 8796093022208L, active1, 0L);
                case 108:
                    if ((active1 & 4096L) != 0L)
                        return mccStartNfaWithStates_0(2, 76, 50);
                    return mccMoveStringLiteralDfa3_0(active0, 8079457731569778688L, active1, 2048L);
                case 109:
                    return mccMoveStringLiteralDfa3_0(active0, 288230376420147200L, active1, 56L);
                case 110:
                    return mccMoveStringLiteralDfa3_0(active0, -9223372036853727232L, active1, 0L);
                case 111:
                    return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 2L);
                case 112:
                    return mccMoveStringLiteralDfa3_0(active0, 35184372088832L, active1, 512L);
                case 115:
                    return mccMoveStringLiteralDfa3_0(active0, 1099536793600L, active1, 64L);
                case 116:
                    if ((active0 & 144115188075855872L) != 0L)
                        return mccStartNfaWithStates_0(2, 57, 25);
                    return mccMoveStringLiteralDfa3_0(active0, 577023702290399232L, active1, 0L);
                case 117:
                    return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 256L);
                default:
                    break;
            }
            return mccStartNfa_0(1, active0, active1);
        }

        private int mccMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return mccStartNfa_0(1, old0, old1);
            try
            {
                curChar = input_stream.ReadChar();
            }
            catch (IOException)
            {
                mccStopStringLiteralDfa_0(2, active0, active1);
                return 3;
            }
            switch ((int) curChar)
            {
                case 65:
                    return mccMoveStringLiteralDfa4_0(active0, 140737488355328L, active1, 0L);
                case 66:
                    return mccMoveStringLiteralDfa4_0(active0, 72061992084439040L, active1, 0L);
                case 69:
                    if ((active1 & 128L) != 0L)
                        return mccStartNfaWithStates_0(3, 71, 50);
                    return mccMoveStringLiteralDfa4_0(active0, 281474976710656L, active1, 0L);
                case 71:
                    if ((active0 & 2251799813685248L) != 0L)
                        return mccStartNfaWithStates_0(3, 51, 50);
                    break;
                case 73:
                    return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 4L);
                case 76:
                    return mccMoveStringLiteralDfa4_0(active0, 2097152L, active1, 0L);
                case 82:
                    return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 1L);
                case 83:
                    return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 1024L);
                case 97:
                    return mccMoveStringLiteralDfa4_0(active0, 2323859606746431488L, active1, 0L);
                case 98:
                    return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 8L);
                case 99:
                    return mccMoveStringLiteralDfa4_0(active0, 1100585369600L, active1, 0L);
                case 100:
                    if ((active0 & 1048576L) != 0L)
                        return mccStartNfaWithStates_0(3, 20, 50);
                    else if ((active0 & -9223372036854775808L) != 0L)
                        return mccStartNfaWithStates_0(3, 63, 50);
                    break;
                case 101:
                    if ((active1 & 256L) != 0L)
                        return mccStartNfaWithStates_0(3, 72, 50);
                    else if ((active1 & 512L) != 0L)
                        return mccStartNfaWithStates_0(3, 73, 50);
                    return mccMoveStringLiteralDfa4_0(active0, 1441732422923190272L, active1, 0L);
                case 102:
                    return mccMoveStringLiteralDfa4_0(active0, 6442450944L, active1, 0L);
                case 103:
                    return mccMoveStringLiteralDfa4_0(active0, 25769803776L, active1, 0L);
                case 105:
                    return mccMoveStringLiteralDfa4_0(active0, 4617350736827645952L, active1, 0L);
                case 108:
                    return mccMoveStringLiteralDfa4_0(active0, 36028797555834880L, active1, 0L);
                case 109:
                    return mccMoveStringLiteralDfa4_0(active0, 206426865664L, active1, 0L);
                case 111:
                    return mccMoveStringLiteralDfa4_0(active0, 100663296L, active1, 0L);
                case 112:
                    return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 48L);
                case 114:
                    return mccMoveStringLiteralDfa4_0(active0, 576461027185524736L, active1, 0L);
                case 115:
                    return mccMoveStringLiteralDfa4_0(active0, 8796093022208L, active1, 2048L);
                case 116:
                    if ((active1 & 2L) != 0L)
                        return mccStartNfaWithStates_0(3, 65, 25);
                    else if ((active1 & 64L) != 0L)
                        return mccStartNfaWithStates_0(3, 70, 25);
                    return mccMoveStringLiteralDfa4_0(active0, 9078117754732544L, active1, 0L);
                default:
                    break;
            }
            return mccStartNfa_0(2, active0, active1);
        }

        private int mccMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return mccStartNfa_0(2, old0, old1);
            try
            {
                curChar = input_stream.ReadChar();
            }
            catch (IOException)
            {
                mccStopStringLiteralDfa_0(3, active0, active1);
                return 4;
            }
            switch ((int) curChar)
            {
                case 45:
                    return mccMoveStringLiteralDfa5_0(active0, 1152991873384579072L, active1, 0L);
                case 69:
                    if ((active1 & 1024L) != 0L)
                        return mccStartNfaWithStates_0(4, 74, 50);
                    return mccMoveStringLiteralDfa5_0(active0, 72057594040025088L, active1, 0L);
                case 71:
                    return mccMoveStringLiteralDfa5_0(active0, 281474976710656L, active1, 0L);
                case 76:
                    return mccMoveStringLiteralDfa5_0(active0, 4398046511104L, active1, 0L);
                case 78:
                    return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 4L);
                case 84:
                    if ((active0 & 140737488355328L) != 0L)
                        return mccStartNfaWithStates_0(4, 47, 50);
                    else if ((active1 & 1L) != 0L)
                        return mccStartNfaWithStates_0(4, 64, 50);
                    break;
                case 97:
                    return mccMoveStringLiteralDfa5_0(active0, 576460755256213504L, active1, 0L);
                case 99:
                    return mccMoveStringLiteralDfa5_0(active0, 1143492092887040L, active1, 0L);
                case 101:
                    if ((active1 & 2048L) != 0L)
                        return mccStartNfaWithStates_0(4, 75, 50);
                    return mccMoveStringLiteralDfa5_0(active0, 4611686645496807424L, active1, 0L);
                case 102:
                    return mccMoveStringLiteralDfa5_0(active0, 4503599627370496L, active1, 0L);
                case 103:
                    return mccMoveStringLiteralDfa5_0(active0, 18014398509481984L, active1, 0L);
                case 105:
                    return mccMoveStringLiteralDfa5_0(active0, 9007199254740992L, active1, 0L);
                case 108:
                    return mccMoveStringLiteralDfa5_0(active0, 18253611008L, active1, 0L);
                case 109:
                    return mccMoveStringLiteralDfa5_0(active0, 288230376151711744L, active1, 0L);
                case 110:
                    return mccMoveStringLiteralDfa5_0(active0, 34493956096L, active1, 0L);
                case 111:
                    return mccMoveStringLiteralDfa5_0(active0, 36028934457917440L, active1, 56L);
                case 114:
                    return mccMoveStringLiteralDfa5_0(active0, 599233862303744L, active1, 0L);
                case 116:
                    return mccMoveStringLiteralDfa5_0(active0, 2305851805306716160L, active1, 0L);
                case 117:
                    return mccMoveStringLiteralDfa5_0(active0, 2478196129792L, active1, 0L);
                case 119:
                    return mccMoveStringLiteralDfa5_0(active0, 67108864L, active1, 0L);
                default:
                    break;
            }
            return mccStartNfa_0(3, active0, active1);
        }

        private int mccMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return mccStartNfa_0(3, old0, old1);
            try
            {
                curChar = input_stream.ReadChar();
            }
            catch (IOException)
            {
                mccStopStringLiteralDfa_0(4, active0, active1);
                return 5;
            }
            switch ((int) curChar)
            {
                case 65:
                    return mccMoveStringLiteralDfa6_0(active0, 2097152L, active1, 0L);
                case 69:
                    if ((active0 & 4398046511104L) != 0L)
                        return mccStartNfaWithStates_0(5, 42, 50);
                    return mccMoveStringLiteralDfa6_0(active0, 281474976710656L, active1, 0L);
                case 71:
                    if ((active1 & 4L) != 0L)
                        return mccStartNfaWithStates_0(5, 66, 50);
                    break;
                case 82:
                    if ((active0 & 72057594037927936L) != 0L)
                        return mccStartNfaWithStates_0(5, 56, 50);
                    break;
                case 97:
                    return mccMoveStringLiteralDfa6_0(active0, 1161085352673280L, active1, 0L);
                case 98:
                    return mccMoveStringLiteralDfa6_0(active0, 288230376151711744L, active1, 0L);
                case 99:
                    return mccMoveStringLiteralDfa6_0(active0, 576460754450907136L, active1, 0L);
                case 100:
                    return mccMoveStringLiteralDfa6_0(active0, 137438953472L, active1, 0L);
                case 101:
                    return mccMoveStringLiteralDfa6_0(active0, 18014398576590848L, active1, 0L);
                case 102:
                    return mccMoveStringLiteralDfa6_0(active0, 33554432L, active1, 0L);
                case 103:
                    return mccMoveStringLiteralDfa6_0(active0, 4194304L, active1, 0L);
                case 105:
                    return mccMoveStringLiteralDfa6_0(active0, 2305914477603717120L, active1, 0L);
                case 108:
                    if ((active1 & 8L) != 0L)
                        return mccStartNfaWithStates_0(5, 67, 50);
                    return mccMoveStringLiteralDfa6_0(active0, 2473901162496L, active1, 0L);
                case 109:
                    return mccMoveStringLiteralDfa6_0(active0, 549755813888L, active1, 0L);
                case 110:
                    return mccMoveStringLiteralDfa6_0(active0, 4611686031580725248L, active1, 0L);
                case 111:
                    return mccMoveStringLiteralDfa6_0(active0, 36028814198833152L, active1, 0L);
                case 114:
                    return mccMoveStringLiteralDfa6_0(active0, 536870912L, active1, 48L);
                case 115:
                    if ((active0 & 8796093022208L) != 0L)
                        return mccStartNfaWithStates_0(5, 43, 50);
                    return mccMoveStringLiteralDfa6_0(active0, 9007233614479360L, active1, 0L);
                case 116:
                    if ((active0 & 8388608L) != 0L)
                    {
                        mccmatchedKind = 23;
                        mccmatchedPos = 5;
                    }
                    return mccMoveStringLiteralDfa6_0(active0, 17660922298368L, active1, 0L);
                case 118:
                    return mccMoveStringLiteralDfa6_0(active0, 1153484454560268288L, active1, 0L);
                case 121:
                    if ((active0 & 4503599627370496L) != 0L)
                        return mccStartNfaWithStates_0(5, 52, 50);
                    break;
                default:
                    break;
            }
            return mccStartNfa_0(4, active0, active1);
        }

        private int mccMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return mccStartNfa_0(4, old0, old1);
            try
            {
                curChar = input_stream.ReadChar();
            }
            catch (IOException)
            {
                mccStopStringLiteralDfa_0(5, active0, active1);
                return 6;
            }
            switch ((int) curChar)
            {
                case 45:
                    return mccMoveStringLiteralDfa7_0(active0, 16777216L, active1, 0L);
                case 78:
                    if ((active0 & 2097152L) != 0L)
                        return mccStartNfaWithStates_0(6, 21, 50);
                    break;
                case 82:
                    if ((active0 & 281474976710656L) != 0L)
                        return mccStartNfaWithStates_0(6, 48, 50);
                    break;
                case 97:
                    return mccMoveStringLiteralDfa7_0(active0, 562949957615616L, active1, 48L);
                case 98:
                    return mccMoveStringLiteralDfa7_0(active0, 1116691496960L, active1, 0L);
                case 99:
                    return mccMoveStringLiteralDfa7_0(active0, 4611686022722355200L, active1, 0L);
                case 100:
                    if ((active0 & 268435456L) != 0L)
                        return mccStartNfaWithStates_0(6, 28, 50);
                    return mccMoveStringLiteralDfa7_0(active0, 67108864L, active1, 0L);
                case 101:
                    if ((active0 & 536870912L) != 0L)
                        return mccStartNfaWithStates_0(6, 29, 50);
                    else if ((active0 & 274877906944L) != 0L)
                        return mccStartNfaWithStates_0(6, 38, 50);
                    return mccMoveStringLiteralDfa7_0(active0, 1441151889348493312L, active1, 0L);
                case 104:
                    return mccMoveStringLiteralDfa7_0(active0, 68719476736L, active1, 0L);
                case 105:
                    return mccMoveStringLiteralDfa7_0(active0, 17592186044416L, active1, 0L);
                case 108:
                    if ((active0 & 1125899906842624L) != 0L)
                        return mccStartNfaWithStates_0(6, 50, 50);
                    return mccMoveStringLiteralDfa7_0(active0, 9007199254740992L, active1, 0L);
                case 110:
                    return mccMoveStringLiteralDfa7_0(active0, 18084767387877376L, active1, 0L);
                case 111:
                    return mccMoveStringLiteralDfa7_0(active0, 33554432L, active1, 0L);
                case 112:
                    if ((active0 & 36028797018963968L) != 0L)
                        return mccStartNfaWithStates_0(6, 55, 50);
                    return mccMoveStringLiteralDfa7_0(active0, 549755813888L, active1, 0L);
                case 115:
                    return mccMoveStringLiteralDfa7_0(active0, 1073741824L, active1, 0L);
                case 116:
                    if ((active0 & 2147483648L) != 0L)
                        return mccStartNfaWithStates_0(6, 31, 25);
                    else if ((active0 & 2199023255552L) != 0L)
                        return mccStartNfaWithStates_0(6, 41, 25);
                    else if ((active0 & 576460752303423488L) != 0L)
                        return mccStartNfaWithStates_0(6, 59, 25);
                    return mccMoveStringLiteralDfa7_0(active0, 35218731827200L, active1, 0L);
                case 117:
                    return mccMoveStringLiteralDfa7_0(active0, 137438953472L, active1, 0L);
                case 118:
                    return mccMoveStringLiteralDfa7_0(active0, 2305843009213693952L, active1, 0L);
                default:
                    break;
            }
            return mccStartNfa_0(5, active0, active1);
        }

        private int mccMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return mccStartNfa_0(5, old0, old1);
            try
            {
                curChar = input_stream.ReadChar();
            }
            catch (IOException)
            {
                mccStopStringLiteralDfa_0(6, active0, active1);
                return 7;
            }
            switch ((int) curChar)
            {
                case 45:
                    return mccMoveStringLiteralDfa8_0(active0, 67108864L, active1, 0L);
                case 97:
                    return mccMoveStringLiteralDfa8_0(active0, 51539607552L, active1, 0L);
                case 99:
                    return mccMoveStringLiteralDfa8_0(active0, 33554432L, active1, 0L);
                case 100:
                    return mccMoveStringLiteralDfa8_0(active0, 18084767253659648L, active1, 0L);
                case 101:
                    if ((active0 & 4611686018427387904L) != 0L)
                        return mccStartNfaWithStates_0(7, 62, 50);
                    return mccMoveStringLiteralDfa8_0(active0, 2305844108725321728L, active1, 0L);
                case 103:
                    return mccMoveStringLiteralDfa8_0(active0, 134217728L, active1, 0L);
                case 105:
                    return mccMoveStringLiteralDfa8_0(active0, 35184372088832L, active1, 0L);
                case 108:
                    if ((active1 & 32L) != 0L)
                    {
                        mccmatchedKind = 69;
                        mccmatchedPos = 7;
                    }
                    return mccMoveStringLiteralDfa8_0(active0, 563637148188672L, active1, 16L);
                case 111:
                    return mccMoveStringLiteralDfa8_0(active0, 9007267974217728L, active1, 0L);
                case 114:
                    return mccMoveStringLiteralDfa8_0(active0, 1441151889348493312L, active1, 0L);
                case 115:
                    if ((active0 & 1073741824L) != 0L)
                        return mccStartNfaWithStates_0(7, 30, 50);
                    break;
                case 116:
                    return mccMoveStringLiteralDfa8_0(active0, 4315938816L, active1, 0L);
                case 118:
                    return mccMoveStringLiteralDfa8_0(active0, 17592186044416L, active1, 0L);
                default:
                    break;
            }
            return mccStartNfa_0(6, active0, active1);
        }

        private int mccMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return mccStartNfa_0(6, old0, old1);
            try
            {
                curChar = input_stream.ReadChar();
            }
            catch (IOException)
            {
                mccStopStringLiteralDfa_0(7, active0, active1);
                return 8;
            }
            switch ((int) curChar)
            {
                case 45:
                    return mccMoveStringLiteralDfa9_0(active0, 2594637434964672512L, active1, 16L);
                case 97:
                    if ((active0 & 18014398509481984L) != 0L)
                        return mccStartNfaWithStates_0(8, 54, 50);
                    return mccMoveStringLiteralDfa9_0(active0, 549755813888L, active1, 0L);
                case 100:
                    if ((active0 & 68719476736L) != 0L)
                        return mccStartNfaWithStates_0(8, 36, 50);
                    break;
                case 101:
                    if ((active0 & 4194304L) != 0L)
                        return mccStartNfaWithStates_0(8, 22, 50);
                    else if ((active0 & 137438953472L) != 0L)
                        return mccStartNfaWithStates_0(8, 37, 50);
                    return mccMoveStringLiteralDfa9_0(active0, 87960946999296L, active1, 0L);
                case 105:
                    return mccMoveStringLiteralDfa9_0(active0, 12884901888L, active1, 0L);
                case 108:
                    if ((active0 & 17179869184L) != 0L)
                        return mccStartNfaWithStates_0(8, 34, 50);
                    break;
                case 110:
                    return mccMoveStringLiteralDfa9_0(active0, 34359738368L, active1, 0L);
                case 111:
                    return mccMoveStringLiteralDfa9_0(active0, 35184372088832L, active1, 0L);
                case 115:
                    return mccMoveStringLiteralDfa9_0(active0, 1152921504606846976L, active1, 0L);
                case 116:
                    if ((active0 & 9007199254740992L) != 0L)
                        return mccStartNfaWithStates_0(8, 53, 25);
                    break;
                case 117:
                    return mccMoveStringLiteralDfa9_0(active0, 33554432L, active1, 0L);
                case 118:
                    return mccMoveStringLiteralDfa9_0(active0, 67108864L, active1, 0L);
                default:
                    break;
            }
            return mccStartNfa_0(7, active0, active1);
        }

        private int mccMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return mccStartNfa_0(7, old0, old1);
            try
            {
                curChar = input_stream.ReadChar();
            }
            catch (IOException)
            {
                mccStopStringLiteralDfa_0(8, active0, active1);
                return 9;
            }
            switch ((int) curChar)
            {
                case 45:
                    return mccMoveStringLiteralDfa10_0(active0, 17592186044416L, active1, 0L);
                case 97:
                    return mccMoveStringLiteralDfa10_0(active0, 67108864L, active1, 16L);
                case 99:
                    if ((active0 & 8589934592L) != 0L)
                        return mccStartNfaWithStates_0(9, 33, 50);
                    return mccMoveStringLiteralDfa10_0(active0, 1133871366144L, active1, 0L);
                case 100:
                    return mccMoveStringLiteralDfa10_0(active0, 134217728L, active1, 0L);
                case 105:
                    return mccMoveStringLiteralDfa10_0(active0, 1152921504606846976L, active1, 0L);
                case 109:
                    return mccMoveStringLiteralDfa10_0(active0, 288230376168488960L, active1, 0L);
                case 110:
                    return mccMoveStringLiteralDfa10_0(active0, 35184372088832L, active1, 0L);
                case 111:
                    return mccMoveStringLiteralDfa10_0(active0, 4294967296L, active1, 0L);
                case 115:
                    if ((active0 & 33554432L) != 0L)
                        return mccStartNfaWithStates_0(9, 25, 50);
                    break;
                case 116:
                    return mccMoveStringLiteralDfa10_0(active0, 2306406508922929152L, active1, 0L);
                case 120:
                    if ((active0 & 70368744177664L) != 0L)
                        return mccStartNfaWithStates_0(9, 46, 50);
                    break;
                default:
                    break;
            }
            return mccStartNfa_0(8, active0, active1);
        }

        private int mccMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return mccStartNfa_0(8, old0, old1);
            try
            {
                curChar = input_stream.ReadChar();
            }
            catch (IOException)
            {
                mccStopStringLiteralDfa_0(9, active0, active1);
                return 10;
            }
            switch ((int) curChar)
            {
                case 45:
                    return mccMoveStringLiteralDfa11_0(active0, 35184372088832L, active1, 0L);
                case 97:
                    return mccMoveStringLiteralDfa11_0(active0, 288230376151711744L, active1, 0L);
                case 99:
                    return mccMoveStringLiteralDfa11_0(active0, 0L, active1, 16L);
                case 100:
                    return mccMoveStringLiteralDfa11_0(active0, 17592186044416L, active1, 0L);
                case 101:
                    if ((active0 & 34359738368L) != 0L)
                        return mccStartNfaWithStates_0(10, 35, 50);
                    else if ((active0 & 549755813888L) != 0L)
                        return mccStartNfaWithStates_0(10, 39, 50);
                    break;
                case 105:
                    return mccMoveStringLiteralDfa11_0(active0, 2306405959301332992L, active1, 0L);
                case 108:
                    return mccMoveStringLiteralDfa11_0(active0, 1099578736640L, active1, 0L);
                case 110:
                    if ((active0 & 4294967296L) != 0L)
                        return mccStartNfaWithStates_0(10, 32, 50);
                    break;
                case 111:
                    return mccMoveStringLiteralDfa11_0(active0, 1152921504606846976L, active1, 0L);
                case 112:
                    return mccMoveStringLiteralDfa11_0(active0, 16777216L, active1, 0L);
                default:
                    break;
            }
            return mccStartNfa_0(9, active0, active1);
        }

        private int mccMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return mccStartNfa_0(9, old0, old1);
            try
            {
                curChar = input_stream.ReadChar();
            }
            catch (IOException)
            {
                mccStopStringLiteralDfa_0(10, active0, active1);
                return 11;
            }
            switch ((int) curChar)
            {
                case 97:
                    return mccMoveStringLiteralDfa12_0(active0, 18691697672192L, active1, 0L);
                case 100:
                    return mccMoveStringLiteralDfa12_0(active0, 35184372088832L, active1, 0L);
                case 109:
                    return mccMoveStringLiteralDfa12_0(active0, 2306405959167115264L, active1, 0L);
                case 110:
                    if ((active0 & 1152921504606846976L) != 0L)
                        return mccStartNfaWithStates_0(11, 60, 50);
                    break;
                case 111:
                    return mccMoveStringLiteralDfa12_0(active0, 16777216L, active1, 0L);
                case 114:
                    return mccMoveStringLiteralDfa12_0(active0, 134217728L, active1, 0L);
                case 116:
                    return mccMoveStringLiteralDfa12_0(active0, 288230376151711744L, active1, 16L);
                case 117:
                    return mccMoveStringLiteralDfa12_0(active0, 67108864L, active1, 0L);
                default:
                    break;
            }
            return mccStartNfa_0(10, active0, active1);
        }

        private int mccMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return mccStartNfa_0(10, old0, old1);
            try
            {
                curChar = input_stream.ReadChar();
            }
            catch (IOException)
            {
                mccStopStringLiteralDfa_0(11, active0, active1);
                return 12;
            }
            switch ((int) curChar)
            {
                case 97:
                    return mccMoveStringLiteralDfa13_0(active0, 35184372088832L, active1, 0L);
                case 99:
                    return mccMoveStringLiteralDfa13_0(active0, 288230376151711744L, active1, 0L);
                case 101:
                    if ((active0 & 562949953421312L) != 0L)
                        return mccStartNfaWithStates_0(12, 49, 50);
                    else if ((active0 & 2305843009213693952L) != 0L)
                        return mccStartNfaWithStates_0(12, 61, 50);
                    return mccMoveStringLiteralDfa13_0(active0, 201326592L, active1, 0L);
                case 105:
                    return mccMoveStringLiteralDfa13_0(active0, 0L, active1, 16L);
                case 114:
                    return mccMoveStringLiteralDfa13_0(active0, 16777216L, active1, 0L);
                case 115:
                    return mccMoveStringLiteralDfa13_0(active0, 1099511627776L, active1, 0L);
                case 116:
                    return mccMoveStringLiteralDfa13_0(active0, 17592186044416L, active1, 0L);
                default:
                    break;
            }
            return mccStartNfa_0(11, active0, active1);
        }

        private int mccMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return mccStartNfa_0(11, old0, old1);
            try
            {
                curChar = input_stream.ReadChar();
            }
            catch (IOException)
            {
                mccStopStringLiteralDfa_0(12, active0, active1);
                return 13;
            }
            switch ((int) curChar)
            {
                case 97:
                    return mccMoveStringLiteralDfa14_0(active0, 16777216L, active1, 0L);
                case 99:
                    return mccMoveStringLiteralDfa14_0(active0, 134217728L, active1, 0L);
                case 101:
                    if ((active0 & 17592186044416L) != 0L)
                        return mccStartNfaWithStates_0(13, 44, 50);
                    break;
                case 104:
                    if ((active0 & 288230376151711744L) != 0L)
                        return mccStartNfaWithStates_0(13, 58, 50);
                    break;
                case 115:
                    if ((active0 & 67108864L) != 0L)
                        return mccStartNfaWithStates_0(13, 26, 50);
                    else if ((active0 & 1099511627776L) != 0L)
                        return mccStartNfaWithStates_0(13, 40, 50);
                    break;
                case 116:
                    return mccMoveStringLiteralDfa14_0(active0, 35184372088832L, active1, 0L);
                case 118:
                    return mccMoveStringLiteralDfa14_0(active0, 0L, active1, 16L);
                default:
                    break;
            }
            return mccStartNfa_0(12, active0, active1);
        }

        private int mccMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return mccStartNfa_0(12, old0, old1);
            try
            {
                curChar = input_stream.ReadChar();
            }
            catch (IOException)
            {
                mccStopStringLiteralDfa_0(13, active0, active1);
                return 14;
            }
            switch ((int) curChar)
            {
                case 97:
                    return mccMoveStringLiteralDfa15_0(active0, 0L, active1, 16L);
                case 101:
                    if ((active0 & 35184372088832L) != 0L)
                        return mccStartNfaWithStates_0(14, 45, 50);
                    break;
                case 108:
                    if ((active0 & 16777216L) != 0L)
                        return mccStartNfaWithStates_0(14, 24, 50);
                    break;
                case 116:
                    return mccMoveStringLiteralDfa15_0(active0, 134217728L, active1, 0L);
                default:
                    break;
            }
            return mccStartNfa_0(13, active0, active1);
        }

        private int mccMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return mccStartNfa_0(13, old0, old1);
            try
            {
                curChar = input_stream.ReadChar();
            }
            catch (IOException)
            {
                mccStopStringLiteralDfa_0(14, active0, active1);
                return 15;
            }
            switch ((int) curChar)
            {
                case 105:
                    return mccMoveStringLiteralDfa16_0(active0, 134217728L, active1, 0L);
                case 116:
                    return mccMoveStringLiteralDfa16_0(active0, 0L, active1, 16L);
                default:
                    break;
            }
            return mccStartNfa_0(14, active0, active1);
        }

        private int mccMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return mccStartNfa_0(14, old0, old1);
            try
            {
                curChar = input_stream.ReadChar();
            }
            catch (IOException)
            {
                mccStopStringLiteralDfa_0(15, active0, active1);
                return 16;
            }
            switch ((int) curChar)
            {
                case 105:
                    return mccMoveStringLiteralDfa17_0(active0, 0L, active1, 16L);
                case 111:
                    return mccMoveStringLiteralDfa17_0(active0, 134217728L, active1, 0L);
                default:
                    break;
            }
            return mccStartNfa_0(15, active0, active1);
        }

        private int mccMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return mccStartNfa_0(15, old0, old1);
            try
            {
                curChar = input_stream.ReadChar();
            }
            catch (IOException)
            {
                mccStopStringLiteralDfa_0(16, active0, active1);
                return 17;
            }
            switch ((int) curChar)
            {
                case 110:
                    if ((active0 & 134217728L) != 0L)
                        return mccStartNfaWithStates_0(17, 27, 50);
                    break;
                case 111:
                    return mccMoveStringLiteralDfa18_0(active0, 0L, active1, 16L);
                default:
                    break;
            }
            return mccStartNfa_0(16, active0, active1);
        }

        private int mccMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1)
        {
            if (((active0 &= old0) | (active1 &= old1)) == 0L)
                return mccStartNfa_0(16, old0, old1);
            try
            {
                curChar = input_stream.ReadChar();
            }
            catch (IOException)
            {
                mccStopStringLiteralDfa_0(17, 0L, active1);
                return 18;
            }
            switch ((int) curChar)
            {
                case 110:
                    if ((active1 & 16L) != 0L)
                        return mccStartNfaWithStates_0(18, 68, 50);
                    break;
                default:
                    break;
            }
            return mccStartNfa_0(17, 0L, active1);
        }

        private void mccCheckNAdd(int state)
        {
            if (mccrounds[state] != mccround)
            {
                mccstateSet[mccnewStateCnt++] = state;
                mccrounds[state] = mccround;
            }
        }

        private void mccAddStates(int start, int end)
        {
            do
            {
                mccstateSet[mccnewStateCnt++] = mccnextStates[start];
            } while (start++ != end);
        }

        private void mccCheckNAddTwoStates(int state1, int state2)
        {
            mccCheckNAdd(state1);
            mccCheckNAdd(state2);
        }

        private void mccCheckNAddStates(int start, int end)
        {
            do
            {
                mccCheckNAdd(mccnextStates[start]);
            } while (start++ != end);
        }

        private void mccCheckNAddStates(int start)
        {
            mccCheckNAdd(mccnextStates[start]);
            mccCheckNAdd(mccnextStates[start + 1]);
        }

        private int mccMoveNfa_0(int startState, int curPos)
        {
            int[] nextStates;
            int startsAt = 0;
            mccnewStateCnt = 50;
            int i = 1;
            mccstateSet[0] = startState;
            int j, kind = Int32.MaxValue;
            for (;;)
            {
                if (++mccround == Int32.MaxValue)
                    ReInitRounds();
                if (curChar < 64)
                {
                    long l = 1L << curChar;
                    do
                    {
                        switch (mccstateSet[--i])
                        {
                            case 50:
                                if ((576425636650811392 & l) != 0L)
                                {
                                    if (kind > 104)
                                        kind = 104;
                                    mccCheckNAdd(29);
                                }
                                if ((576425636650811392 & l) != 0L)
                                {
                                    if (kind > 101)
                                        kind = 101;
                                    mccCheckNAddTwoStates(22, 26);
                                }
                                break;
                            case 51:
                            case 22:
                                if ((576425636650811392 & l) == 0L)
                                    break;
                                if (kind > 101)
                                    kind = 101;
                                mccCheckNAddTwoStates(22, 26);
                                break;
                            case 25:
                                if ((576425636650811392 & l) != 0L)
                                {
                                    if (kind > 104)
                                        kind = 104;
                                    mccCheckNAdd(29);
                                }
                                if ((576425636650811392 & l) != 0L)
                                {
                                    if (kind > 101)
                                        kind = 101;
                                    mccCheckNAddTwoStates(22, 26);
                                }
                                break;
                            case 24:
                                if ((576425636650811392 & l) != 0L)
                                {
                                    if (kind > 104)
                                        kind = 104;
                                    mccCheckNAdd(29);
                                }
                                if ((576425636650811392 & l) != 0L)
                                {
                                    if (kind > 101)
                                        kind = 101;
                                    mccCheckNAddTwoStates(22, 26);
                                }
                                break;
                            case 0:
                                if ((576425636650811392 & l) != 0L)
                                {
                                    if (kind > 104)
                                        kind = 104;
                                    mccCheckNAdd(29);
                                }
                                else if (curChar == 39)
                                    mccCheckNAddStates(0, 2);
                                else if (curChar == 34)
                                    mccCheckNAddStates(3, 5);
                                else if (curChar == 63)
                                    mccCheckNAddStates(6, 8);
                                if ((576425636650811392 & l) != 0L)
                                {
                                    if (kind > 101)
                                        kind = 101;
                                    mccCheckNAddTwoStates(22, 26);
                                }
                                else if (curChar == 63)
                                    mccstateSet[mccnewStateCnt++] = 15;
                                if ((287948901175001088 & l) != 0L)
                                {
                                    if (kind > 11)
                                        kind = 11;
                                    mccCheckNAddStates(9, 13);
                                }
                                else if (curChar == 36)
                                {
                                    if (kind > 102)
                                        kind = 102;
                                }
                                else if (curChar == 46)
                                    mccCheckNAdd(1);
                                if ((287948901175001088 & l) != 0L)
                                {
                                    if (kind > 103)
                                        kind = 103;
                                }
                                else if (curChar == 36)
                                    mccstateSet[mccnewStateCnt++] = 19;
                                break;
                            case 23:
                                if ((576425636650811392 & l) != 0L)
                                {
                                    if (kind > 104)
                                        kind = 104;
                                    mccCheckNAdd(29);
                                }
                                if ((576425636650811392 & l) != 0L)
                                {
                                    if (kind > 101)
                                        kind = 101;
                                    mccCheckNAddTwoStates(22, 26);
                                }
                                break;
                            case 1:
                                if ((287948901175001088 & l) == 0L)
                                    break;
                                if (kind > 12)
                                    kind = 12;
                                mccCheckNAddTwoStates(1, 2);
                                break;
                            case 3:
                                if ((43980465111040 & l) != 0L)
                                    mccCheckNAdd(4);
                                break;
                            case 4:
                                if ((287948901175001088 & l) == 0L)
                                    break;
                                if (kind > 12)
                                    kind = 12;
                                mccCheckNAdd(4);
                                break;
                            case 5:
                            case 8:
                                if (curChar == 34)
                                    mccCheckNAddStates(3, 5);
                                break;
                            case 6:
                                if ((-17179869185 & l) != 0L)
                                    mccCheckNAddStates(3, 5);
                                break;
                            case 9:
                                if (curChar == 34 && kind > 14)
                                    kind = 14;
                                break;
                            case 10:
                            case 13:
                                if (curChar == 39)
                                    mccCheckNAddStates(0, 2);
                                break;
                            case 11:
                                if ((-549755813889 & l) != 0L)
                                    mccCheckNAddStates(0, 2);
                                break;
                            case 14:
                                if (curChar == 39 && kind > 14)
                                    kind = 14;
                                break;
                            case 15:
                                if (curChar == 42)
                                    mccCheckNAdd(16);
                                break;
                            case 16:
                                if ((287948969894477824 & l) != 0L)
                                    mccCheckNAddTwoStates(16, 17);
                                break;
                            case 17:
                                if (curChar == 42 && kind > 17)
                                    kind = 17;
                                break;
                            case 18:
                                if (curChar == 63)
                                    mccstateSet[mccnewStateCnt++] = 15;
                                break;
                            case 19:
                                if (curChar == 63)
                                    mccCheckNAdd(20);
                                break;
                            case 20:
                                if ((287948969894477824 & l) == 0L)
                                    break;
                                if (kind > 18)
                                    kind = 18;
                                mccCheckNAdd(20);
                                break;
                            case 21:
                                if (curChar == 36)
                                    mccstateSet[mccnewStateCnt++] = 19;
                                break;
                            case 27:
                                if (curChar == 36 && kind > 102)
                                    kind = 102;
                                break;
                            case 28:
                                if ((287948901175001088 & l) != 0L && kind > 103)
                                    kind = 103;
                                break;
                            case 29:
                                if ((576425636650811392 & l) == 0L)
                                    break;
                                if (kind > 104)
                                    kind = 104;
                                mccCheckNAdd(29);
                                break;
                            case 30:
                                if ((287948901175001088 & l) == 0L)
                                    break;
                                if (kind > 11)
                                    kind = 11;
                                mccCheckNAddStates(9, 13);
                                break;
                            case 31:
                                if ((287948901175001088 & l) == 0L)
                                    break;
                                if (kind > 11)
                                    kind = 11;
                                mccCheckNAdd(31);
                                break;
                            case 32:
                                if ((287948901175001088 & l) != 0L)
                                    mccCheckNAddTwoStates(32, 33);
                                break;
                            case 33:
                                if (curChar != 46)
                                    break;
                                if (kind > 12)
                                    kind = 12;
                                mccCheckNAddTwoStates(34, 35);
                                break;
                            case 34:
                                if ((287948901175001088 & l) == 0L)
                                    break;
                                if (kind > 12)
                                    kind = 12;
                                mccCheckNAddTwoStates(34, 35);
                                break;
                            case 36:
                                if ((43980465111040 & l) != 0L)
                                    mccCheckNAdd(37);
                                break;
                            case 37:
                                if ((287948901175001088 & l) == 0L)
                                    break;
                                if (kind > 12)
                                    kind = 12;
                                mccCheckNAdd(37);
                                break;
                            case 38:
                                if ((287948901175001088 & l) != 0L)
                                    mccCheckNAddTwoStates(38, 39);
                                break;
                            case 40:
                                if ((43980465111040 & l) != 0L)
                                    mccCheckNAdd(41);
                                break;
                            case 41:
                                if ((287948901175001088 & l) == 0L)
                                    break;
                                if (kind > 12)
                                    kind = 12;
                                mccCheckNAdd(41);
                                break;
                            case 42:
                                if (curChar == 63)
                                    mccCheckNAddStates(6, 8);
                                break;
                            case 43:
                                if ((287948969894477824 & l) == 0L)
                                    break;
                                if (kind > 15)
                                    kind = 15;
                                mccCheckNAdd(43);
                                break;
                            case 44:
                                if ((287948969894477824 & l) != 0L)
                                    mccCheckNAddTwoStates(44, 46);
                                break;
                            case 45:
                                if (curChar == 58 && kind > 16)
                                    kind = 16;
                                break;
                            case 46:
                                if (curChar == 38)
                                    mccstateSet[mccnewStateCnt++] = 45;
                                break;
                            case 47:
                                if ((287948969894477824 & l) != 0L)
                                    mccCheckNAddTwoStates(47, 49);
                                break;
                            case 49:
                                if (curChar == 38)
                                    mccstateSet[mccnewStateCnt++] = 48;
                                break;
                            default:
                                break;
                        }
                    } while (i != startsAt);
                }
                else if (curChar < 128)
                {
                    long l = 1L << (curChar & 63);
                    do
                    {
                        switch (mccstateSet[--i])
                        {
                            case 50:
                                if ((5188146764422578175 & l) != 0L)
                                {
                                    if (kind > 101)
                                        kind = 101;
                                    mccCheckNAddTwoStates(22, 26);
                                }
                                if ((576460746263625726 & l) != 0L)
                                {
                                    if (kind > 104)
                                        kind = 104;
                                    mccCheckNAdd(29);
                                }
                                if (curChar == 116)
                                    mccstateSet[mccnewStateCnt++] = 25;
                                break;
                            case 51:
                                if ((5188146764422578175 & l) != 0L)
                                {
                                    if (kind > 101)
                                        kind = 101;
                                    mccCheckNAddTwoStates(22, 26);
                                }
                                if (curChar == 116)
                                    mccstateSet[mccnewStateCnt++] = 25;
                                break;
                            case 25:
                                if ((5188146764422578175 & l) != 0L)
                                {
                                    if (kind > 101)
                                        kind = 101;
                                    mccCheckNAddTwoStates(22, 26);
                                }
                                if ((576460746263625726 & l) != 0L)
                                {
                                    if (kind > 104)
                                        kind = 104;
                                    mccCheckNAdd(29);
                                }
                                if (curChar == 121)
                                    mccstateSet[mccnewStateCnt++] = 24;
                                else if (curChar == 116)
                                    mccstateSet[mccnewStateCnt++] = 25;
                                break;
                            case 24:
                                if ((5188146764422578175 & l) != 0L)
                                {
                                    if (kind > 101)
                                        kind = 101;
                                    mccCheckNAddTwoStates(22, 26);
                                }
                                if ((576460746263625726 & l) != 0L)
                                {
                                    if (kind > 104)
                                        kind = 104;
                                    mccCheckNAdd(29);
                                }
                                if (curChar == 112)
                                    mccstateSet[mccnewStateCnt++] = 23;
                                else if (curChar == 116)
                                    mccstateSet[mccnewStateCnt++] = 25;
                                break;
                            case 0:
                                if ((5188146764422578175 & l) != 0L)
                                {
                                    if (kind > 101)
                                        kind = 101;
                                    mccCheckNAddTwoStates(22, 26);
                                }
                                if ((576460746263625726 & l) != 0L)
                                {
                                    if (kind > 104)
                                        kind = 104;
                                    mccCheckNAdd(29);
                                }
                                if ((576460745995190270 & l) != 0L)
                                {
                                    if (kind > 102)
                                        kind = 102;
                                }
                                if (curChar == 116)
                                    mccstateSet[mccnewStateCnt++] = 25;
                                break;
                            case 23:
                                if ((5188146764422578175 & l) != 0L)
                                {
                                    if (kind > 101)
                                        kind = 101;
                                    mccCheckNAddTwoStates(22, 26);
                                }
                                if ((576460746263625726 & l) != 0L)
                                {
                                    if (kind > 104)
                                        kind = 104;
                                    mccCheckNAdd(29);
                                }
                                if (curChar == 101)
                                {
                                    if (kind > 101)
                                        kind = 101;
                                    mccCheckNAddTwoStates(22, 26);
                                }
                                else if (curChar == 116)
                                    mccstateSet[mccnewStateCnt++] = 25;
                                break;
                            case 2:
                                if ((137438953504 & l) != 0L)
                                    mccAddStates(14, 15);
                                break;
                            case 6:
                                if ((-268435457 & l) != 0L)
                                    mccCheckNAddStates(3, 5);
                                break;
                            case 7:
                                if (curChar == 92)
                                    mccstateSet[mccnewStateCnt++] = 8;
                                break;
                            case 8:
                                if (curChar == 92)
                                    mccCheckNAddStates(3, 5);
                                break;
                            case 11:
                                if ((-268435457 & l) != 0L)
                                    mccCheckNAddStates(0, 2);
                                break;
                            case 12:
                                if (curChar == 92)
                                    mccstateSet[mccnewStateCnt++] = 13;
                                break;
                            case 13:
                                if (curChar == 92)
                                    mccCheckNAddStates(0, 2);
                                break;
                            case 16:
                                if ((576460745995190270 & l) != 0L)
                                    mccAddStates(16, 17);
                                break;
                            case 20:
                                if ((576460745995190270 & l) == 0L)
                                    break;
                                if (kind > 18)
                                    kind = 18;
                                mccstateSet[mccnewStateCnt++] = 20;
                                break;
                            case 22:
                                if ((5188146764422578175 & l) == 0L)
                                    break;
                                if (kind > 101)
                                    kind = 101;
                                mccCheckNAddTwoStates(22, 26);
                                break;
                            case 26:
                                if (curChar == 116)
                                    mccstateSet[mccnewStateCnt++] = 25;
                                break;
                            case 27:
                                if ((576460745995190270 & l) != 0L && kind > 102)
                                    kind = 102;
                                break;
                            case 29:
                                if ((576460746263625726 & l) == 0L)
                                    break;
                                if (kind > 104)
                                    kind = 104;
                                mccCheckNAdd(29);
                                break;
                            case 35:
                                if ((137438953504 & l) != 0L)
                                    mccAddStates(18, 19);
                                break;
                            case 39:
                                if ((137438953504 & l) != 0L)
                                    mccAddStates(20, 21);
                                break;
                            case 43:
                                if ((576460745995190270 & l) == 0L)
                                    break;
                                if (kind > 15)
                                    kind = 15;
                                mccstateSet[mccnewStateCnt++] = 43;
                                break;
                            case 44:
                                if ((576460745995190270 & l) != 0L)
                                    mccAddStates(22, 23);
                                break;
                            case 47:
                                if ((576460745995190270 & l) != 0L)
                                    mccAddStates(24, 25);
                                break;
                            case 48:
                                if (curChar == 126 && kind > 19)
                                    kind = 19;
                                break;
                            default:
                                break;
                        }
                    } while (i != startsAt);
                }
                else
                {
                    int hiByte = (curChar >> 8);
                    int i1 = hiByte >> 6;
                    long l1 = 1L << (hiByte & 63);
                    int i2 = (curChar & 0xff) >> 6;
                    long l2 = 1L << (curChar & 63);
                    do
                    {
                        switch (mccstateSet[--i])
                        {
                            case 50:
                                if (mccCanMove_1(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 101)
                                        kind = 101;
                                    mccCheckNAddTwoStates(22, 26);
                                }
                                if (mccCanMove_1(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 104)
                                        kind = 104;
                                    mccCheckNAdd(29);
                                }
                                break;
                            case 51:
                            case 22:
                                if (!mccCanMove_1(hiByte, i1, i2, l1, l2))
                                    break;
                                if (kind > 101)
                                    kind = 101;
                                mccCheckNAddTwoStates(22, 26);
                                break;
                            case 25:
                                if (mccCanMove_1(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 101)
                                        kind = 101;
                                    mccCheckNAddTwoStates(22, 26);
                                }
                                if (mccCanMove_1(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 104)
                                        kind = 104;
                                    mccCheckNAdd(29);
                                }
                                break;
                            case 24:
                                if (mccCanMove_1(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 101)
                                        kind = 101;
                                    mccCheckNAddTwoStates(22, 26);
                                }
                                if (mccCanMove_1(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 104)
                                        kind = 104;
                                    mccCheckNAdd(29);
                                }
                                break;
                            case 0:
                                if (mccCanMove_1(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 101)
                                        kind = 101;
                                    mccCheckNAddTwoStates(22, 26);
                                }
                                if (mccCanMove_1(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 102)
                                        kind = 102;
                                }
                                if (mccCanMove_2(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 103)
                                        kind = 103;
                                }
                                if (mccCanMove_1(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 104)
                                        kind = 104;
                                    mccCheckNAdd(29);
                                }
                                break;
                            case 23:
                                if (mccCanMove_1(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 101)
                                        kind = 101;
                                    mccCheckNAddTwoStates(22, 26);
                                }
                                if (mccCanMove_1(hiByte, i1, i2, l1, l2))
                                {
                                    if (kind > 104)
                                        kind = 104;
                                    mccCheckNAdd(29);
                                }
                                break;
                            case 6:
                                if (mccCanMove_0(hiByte, i1, i2, l1, l2))
                                    mccAddStates(3, 5);
                                break;
                            case 11:
                                if (mccCanMove_0(hiByte, i1, i2, l1, l2))
                                    mccAddStates(0, 2);
                                break;
                            case 16:
                                if (mccCanMove_1(hiByte, i1, i2, l1, l2))
                                    mccAddStates(16, 17);
                                break;
                            case 20:
                                if (!mccCanMove_1(hiByte, i1, i2, l1, l2))
                                    break;
                                if (kind > 18)
                                    kind = 18;
                                mccstateSet[mccnewStateCnt++] = 20;
                                break;
                            case 27:
                                if (mccCanMove_1(hiByte, i1, i2, l1, l2) && kind > 102)
                                    kind = 102;
                                break;
                            case 28:
                                if (mccCanMove_2(hiByte, i1, i2, l1, l2) && kind > 103)
                                    kind = 103;
                                break;
                            case 29:
                                if (!mccCanMove_1(hiByte, i1, i2, l1, l2))
                                    break;
                                if (kind > 104)
                                    kind = 104;
                                mccCheckNAdd(29);
                                break;
                            case 43:
                                if (!mccCanMove_1(hiByte, i1, i2, l1, l2))
                                    break;
                                if (kind > 15)
                                    kind = 15;
                                mccstateSet[mccnewStateCnt++] = 43;
                                break;
                            case 44:
                                if (mccCanMove_1(hiByte, i1, i2, l1, l2))
                                    mccAddStates(22, 23);
                                break;
                            case 47:
                                if (mccCanMove_1(hiByte, i1, i2, l1, l2))
                                    mccAddStates(24, 25);
                                break;
                            default:
                                break;
                        }
                    } while (i != startsAt);
                }
                if (kind != Int32.MaxValue)
                {
                    mccmatchedKind = kind;
                    mccmatchedPos = curPos;
                    kind = Int32.MaxValue;
                }
                ++curPos;
                if ((i = mccnewStateCnt) == (startsAt = 50 - (mccnewStateCnt = startsAt)))
                    return curPos;
                try
                {
                    curChar = input_stream.ReadChar();
                }
                catch (IOException)
                {
                    return curPos;
                }
            }
        }

        private int mccMoveStringLiteralDfa0_1()
        {
            return mccMoveNfa_1(1, 0);
        }

        private int mccMoveNfa_1(int startState, int curPos)
        {
            int[] nextStates;
            int startsAt = 0;
            mccnewStateCnt = 4;
            int i = 1;
            mccstateSet[0] = startState;
            int j, kind = Int32.MaxValue;
            for (;;)
            {
                if (++mccround == Int32.MaxValue)
                    ReInitRounds();
                if (curChar < 64)
                {
                    long l = 1L << curChar;
                    do
                    {
                        switch (mccstateSet[--i])
                        {
                            case 1:
                                if ((287948901175001088 & l) != 0L)
                                {
                                    if (kind > 7)
                                        kind = 7;
                                    mccCheckNAdd(0);
                                }
                                else if ((9216 & l) != 0L)
                                {
                                    if (kind > 8)
                                        kind = 8;
                                }
                                if (curChar == 13)
                                    mccstateSet[mccnewStateCnt++] = 2;
                                break;
                            case 0:
                                if ((287948901175001088 & l) == 0L)
                                    break;
                                kind = 7;
                                mccCheckNAdd(0);
                                break;
                            case 2:
                                if (curChar == 10 && kind > 8)
                                    kind = 8;
                                break;
                            case 3:
                                if (curChar == 13)
                                    mccstateSet[mccnewStateCnt++] = 2;
                                break;
                            default:
                                break;
                        }
                    } while (i != startsAt);
                }
                else if (curChar < 128)
                {
                    long l = 1L << (curChar & 63);
                    do
                    {
                        switch (mccstateSet[--i])
                        {
                            case 1:
                            case 0:
                                if ((576460743713488896 & l) == 0L)
                                    break;
                                kind = 7;
                                mccCheckNAdd(0);
                                break;
                            default:
                                break;
                        }
                    } while (i != startsAt);
                }
                else
                {
                    int hiByte = (curChar >> 8);
                    int i1 = hiByte >> 6;
                    long l1 = 1L << (hiByte & 63);
                    int i2 = (curChar & 0xff) >> 6;
                    long l2 = 1L << (curChar & 63);
                    do
                    {
                        switch (mccstateSet[--i])
                        {
                            default:
                                break;
                        }
                    } while (i != startsAt);
                }
                if (kind != Int32.MaxValue)
                {
                    mccmatchedKind = kind;
                    mccmatchedPos = curPos;
                    kind = Int32.MaxValue;
                }
                ++curPos;
                if ((i = mccnewStateCnt) == (startsAt = 4 - (mccnewStateCnt = startsAt)))
                    return curPos;
                try
                {
                    curChar = input_stream.ReadChar();
                }
                catch (IOException)
                {
                    return curPos;
                }
            }
        }

        private static bool mccCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
        {
            switch (hiByte)
            {
                case 0:
                    return ((mccbitVec2[i2] & l2) != 0L);
                default:
                    if ((mccbitVec0[i1] & l1) != 0L)
                        if ((mccbitVec1[i2] & l2) == 0L)
                            return false;
                        else
                            return true;
                    return false;
            }
        }

        private static bool mccCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
        {
            switch (hiByte)
            {
                case 0:
                    return ((mccbitVec4[i2] & l2) != 0L);
                case 48:
                    return ((mccbitVec5[i2] & l2) != 0L);
                case 49:
                    return ((mccbitVec6[i2] & l2) != 0L);
                case 51:
                    return ((mccbitVec7[i2] & l2) != 0L);
                case 61:
                    return ((mccbitVec8[i2] & l2) != 0L);
                default:
                    if ((mccbitVec3[i1] & l1) != 0L)
                        if ((mccbitVec1[i2] & l2) == 0L)
                            return false;
                        else
                            return true;
                    return false;
            }
        }

        private static bool mccCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
        {
            switch (hiByte)
            {
                case 6:
                    return ((mccbitVec11[i2] & l2) != 0L);
                case 11:
                    return ((mccbitVec12[i2] & l2) != 0L);
                case 13:
                    return ((mccbitVec13[i2] & l2) != 0L);
                case 14:
                    return ((mccbitVec14[i2] & l2) != 0L);
                case 16:
                    return ((mccbitVec15[i2] & l2) != 0L);
                default:
                    if ((mccbitVec9[i1] & l1) != 0L)
                        if ((mccbitVec10[i2] & l2) == 0L)
                            return false;
                        else
                            return true;
                    return false;
            }
        }

        public void ReInit(SimpleCharStream stream)
        {
            mccmatchedPos = mccnewStateCnt = 0;
            curLexState = defaultLexState;
            input_stream = stream;
            ReInitRounds();
        }

        private void ReInitRounds()
        {
            int i;
            mccround = -2147483647;
            for (i = 50; i-- > 0;)
                mccrounds[i] = Int32.MinValue;
        }

        public void ReInit(SimpleCharStream stream, int lexState)
        {
            ReInit(stream);
            SwitchTo(lexState);
        }

        public void SwitchTo(int lexState)
        {
            if (lexState >= 2 || lexState < 0)
                throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.InvalidLexicalState);
            else
                curLexState = lexState;
        }

        protected Token mccFillToken()
        {
            Token t = Token.NewToken(mccmatchedKind);
            t.kind = mccmatchedKind;
            string im = mccstrLiteralImages[mccmatchedKind];
            t.image = (im == null) ? input_stream.GetImage() : im;
            t.beginLine = input_stream.BeginLine;
            t.beginColumn = input_stream.BeginColumn;
            t.endLine = input_stream.EndLine;
            t.endColumn = input_stream.EndColumn;
            return t;
        }

        [DebuggerNonUserCode]
        public Token GetNextToken()
        {
            int kind;
            Token specialToken = null;
            Token matchedToken;
            int curPos = 0;

            EOFLoop :
            for (;;)
            {
                try
                {
                    curChar = input_stream.BeginToken();
                }
                catch (IOException)
                {
                    mccmatchedKind = 0;
                    matchedToken = mccFillToken();
                    return matchedToken;
                }

                for (;;)
                {
                    switch (curLexState)
                    {
                        case 0:
                            try
                            {
                                input_stream.Backup(0);
                                while (curChar <= ' ' && (4294977024L & (1L << curChar)) != 0L)
                                    curChar = input_stream.BeginToken();
                            }
                            catch (IOException)
                            {
                                goto EOFLoop;
                            }
                            mccmatchedKind = Int32.MaxValue;
                            mccmatchedPos = 0;
                            curPos = mccMoveStringLiteralDfa0_0();
                            break;
                        case 1:
                            mccmatchedKind = Int32.MaxValue;
                            mccmatchedPos = 0;
                            curPos = mccMoveStringLiteralDfa0_1();
                            if (mccmatchedPos == 0 && mccmatchedKind > 6)
                            {
                                mccmatchedKind = 6;
                            }
                            break;
                    }
                    if (mccmatchedKind != Int32.MaxValue)
                    {
                        if (mccmatchedPos + 1 < curPos)
                            input_stream.Backup(curPos - mccmatchedPos - 1);
                        if ((mcctoToken[mccmatchedKind >> 6] & (1L << (mccmatchedKind & 63))) != 0L)
                        {
                            matchedToken = mccFillToken();
                            if (mccnewLexState[mccmatchedKind] != -1)
                                curLexState = mccnewLexState[mccmatchedKind];
                            return matchedToken;
                        }
                        else if ((mcctoSkip[mccmatchedKind >> 6] & (1L << (mccmatchedKind & 63))) != 0L)
                        {
                            if (mccnewLexState[mccmatchedKind] != -1)
                                curLexState = mccnewLexState[mccmatchedKind];
                            goto EOFLoop;
                        }
                        if (mccnewLexState[mccmatchedKind] != -1)
                            curLexState = mccnewLexState[mccmatchedKind];
                        curPos = 0;
                        mccmatchedKind = Int32.MaxValue;
                        try
                        {
                            curChar = input_stream.ReadChar();
                            continue;
                        }
                        catch (IOException)
                        {
                        }
                    }
                    int error_line = input_stream.EndLine;
                    int error_column = input_stream.EndColumn;
                    string error_after = null;
                    bool EOFSeen = false;
                    try
                    {
                        input_stream.ReadChar();
                        input_stream.Backup(1);
                    }
                    catch (IOException)
                    {
                        EOFSeen = true;
                        error_after = curPos <= 1 ? "" : input_stream.GetImage();
                        if (curChar == '\n' || curChar == '\r')
                        {
                            error_line++;
                            error_column = 0;
                        }
                        else
                            error_column++;
                    }
                    if (!EOFSeen)
                    {
                        input_stream.Backup(1);
                        error_after = curPos <= 1 ? "" : input_stream.GetImage();
                    }
                    throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LexicalError);
                }
            }
        }
    }
}